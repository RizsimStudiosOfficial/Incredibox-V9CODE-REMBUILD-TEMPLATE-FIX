var versions = {};
function initVersions() {
  versions.total = Object.keys(versions).length;
  if (versions["v" + appVersion]) {
    (app = versions["v" + appVersion]).animearray.forEach(function (h, i) {
      h.soundA = h.name + "_a";
      h.soundB = h.uniqsnd ? h.name + "_a" : h.name + "_b";
      h.anime = h.name + "-sprite.png";
      h.animeData = h.name + ".json";
    });
    app.bonusarray.forEach(function (h, i) {
      h.src = h.src + "." + vidExt;
    });
    app.recmaxloop = Math.round(180 / (app.looptime / 1000));
    app.recminloop = Math.round(20 / (app.looptime / 1000));
    app.recmintime = Math.round(app.recminloop * (app.looptime / 1000));
    app.recminloop = appBrowserDemo ? 0 : app.recminloop;
  } else {
    popupGeneralError({
      error: "init versions",
      action: "kill"
    });
  }
}
function nada() {}
var preventActionUsed = false;
var preventActionDelay = 0.25;
function preventAction(g) {
  if (!preventActionUsed) {
    preventActionUsed = true;
    g();
    // TOLOOK
    setTimeout(function () {
      preventActionUsed = false;
    }, preventActionDelay);
  }
}
function tryfunc(g) {
  if (notnull(g) && (typeof g).toLowerCase() === "function") {
    g();
  }
}
function inIframe() {
  try {
    return window.self !== window.top;
  } catch (g) {
    return true;
  }
}
function callParentWindow(g, h) {
  if (isIframe) {
    if (notnull(window.top) && notnull(window.top.appEvent)) {
      window.top.appEvent(g, h);
    } else {
      // TOLOOK
      setTimeout(function () {
        callParentWindow(g, h);
      }, 200);
    }
  }
}
var regexList = {
  allchar: /[*]/,
  classic: /[^A-Za-z0-9\u00C0-\u017F '-]/,
  search: /[^A-Za-z0-9\u00C0-\u017F\u0025 '-]/,
  max3letters: /[*]|(.)(?=\1\1\1)/gi,
  strict: /[^A-Za-z0-9 '-]/,
  custom: /[^A-Za-z0-9àâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ '-]/,
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  allsafe: /[^A-Za-z0-9\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\s]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/
};
function removeDupInArray(o, t) {
  var e,
    n = gE,
    i = []
  for (e of o) existInArray(i, e, t) || i[n(736)](e)
  return i
}
function uniqueBetweenArray(o, t, e) {
  var n,
    i = gE,
    a = []
  for (n of o) existInArray(t, n, e) || a[i(736)](n)
  for (n of t) existInArray(o, n, e) || a.push(n)
  return a
}
function existInArray(g, h, j) {
  for (var k = !notnull(j) || j, l = false, m = 0, p = g.length; m < p; m++) {
    if (k) {
      if (g[m] === h) {
        l = true;
        break;
      }
    } else if (g[m].toLowerCase() === h.toLowerCase()) {
      l = true;
      break;
    }
  }
  return l;
}
function removeInArray(g, h) {
  for (var i = 0, j = h.length; i < j; i++) {
    if (h[i] === g) {
      h.splice(i, 1);
      break;
    }
  }
  return h;
}
function existInArrayFromProp(g, h, j) {
  for (var l = 0, m = j.length; l < m; l++) {
    if (j[l][h] === g) {
      return true;
    }
  }
  return false;
}
function numberArray(g) {
  for (var h = 0, i = g.length; h < i; h++) {
    g[h] = g[h] | 0;
  }
  return g;
}
function xhr(g, h, j, k, l) {
  $.ajax({
    type: g,
    url: h,
    crossdomain: true,
    data: j,
    success: function (m) {
      k(m, j);
    },
    error: l || function () {},
    dataType: "json"
  });
}
function renameFile(g) {
  if (animSize == 1) {
    return g;
  } else {
    return nameToHD(g);
  }
}
function nameToHD(g) {
  var h = g.substr(g.lastIndexOf("."));
  return g.split(h).join("-hd" + h);
}
function loadSnd(g, h, j, k) {
  var l = new XMLHttpRequest();
  l.open("GET", g, true);
  l.responseType = "arraybuffer";
  l.onload = function () {
    h.decodeAudioData(l.response, function (m) {
      j(m);
    }, function (m) {
      k();
    });
  };
  l.onerror = function () {
    k();
  };
  l.send();
}
function gotoAppUrl(g) {
  g = isnull(g) ? appBrowser ? "" : "index.html" : g;
  window.location.href = g;
}
function reloadPage() {
  (appBrowser ? window.top : window).location.reload();
}
function openURL(g, h) {
  var i = isIframe ? window.top : window;
  var h = isnull(h) ? "_blank" : h;
  var h = appBrowserDemo && isIOS ? "_self" : h;
  if (window.electron) {
    electron.ipc.openURL(g);
  } else if (window.cordova) {
    cordova.InAppBrowser.open(g, "_system", "hidden=yes,location=no");
  } else {
    i.open(g, h);
  }
}
function redirectTo(g) {
  var h = domainOnline + "url/" + g;
  var h = appCN ? h + "-cn" : h;
  openURL(h = window.cordova ? {
    facebook: "https://www.facebook.com/incredibox",
    twitter: "https://twitter.com/incredibox_",
    instagram: "https://www.instagram.com/incredibox.official/",
    youtube: "https://www.youtube.com/incredibox"
  }[g] || h : h);
}
function windowPopup(g, h, j, k) {
  var m = k ? screen.height / 2 - j / 2 : 0;
  var k = k ? screen.width / 2 - h / 2 : 0;
  window.open(g, "", "menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=" + h + ",height=" + j + ",top=" + m + ",left=" + k);
}
function getParameterByName(g) {
  var h = {};
  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (j, k, l) {
    h[k] = l;
  });
  var i = null;
  return i = g in h ? h[g] : i;
}
function getPageNameGA() {
  if (window.location.href.indexOf("app.html") != -1) {
    return "app.html?v=" + getParameterByName("v");
  } else {
    return "index.html";
  }
}
function secToText(g) {
  var i;
  var j = parseInt(g / 1000 % 60);
  var k = parseInt(g / 60000 % 60);
  i = parseInt(g / 3600000 % 24);
  return (k < 10 ? "0" + k : k) + ":" + (j < 10 ? "0" + j : j);
}
function getTime() {
  return new Date().getTime();
}
function getTimeAgo(g, h) {
  g = g.indexOf("/") == -1 ? g.split("-").join("/") : g;
  h = h.indexOf("/") == -1 ? h.split("-").join("/") : h;
  var i = new Date(g);
  var h = timeConversion(new Date(h).getTime() - i.getTime());
  if (h === false) {
    return getStringDate(g);
  } else {
    return h;
  }
}
function timeConversion(g) {
  var j = (g / 1000).toFixed(1);
  var k = (g / 60000).toFixed(1);
  var l = (g / 3600000).toFixed(1);
  var g = (g / 86400000).toFixed(1);
  var m = "";
  if (j < 60) {
    j = Math.round(j);
    m = j.toString() + " " + (j < 2 && notnull(STR("txt.time.tSec.one")) ? STR("txt.time.tSec.one") : STR("txt.time.tSec.other"));
  } else if (k < 60) {
    j = Math.round(k);
    m = j.toString() + " " + (j < 2 && notnull(STR("txt.time.tMin.one")) ? STR("txt.time.tMin.one") : STR("txt.time.tMin.other"));
  } else if (l < 23) {
    k = Math.round(l);
    m = k.toString() + " " + (k < 2 && notnull(STR("txt.time.tHou.one")) ? STR("txt.time.tHou.one") : STR("txt.time.tHou.other"));
  } else {
    if (!(g < 10)) {
      return false;
    }
    j = Math.round(g);
    m = j.toString() + " " + (j < 2 && notnull(STR("txt.time.tDay.one")) ? STR("txt.time.tDay.one") : STR("txt.time.tDay.other"));
  }
  return STR("txt.ago").split("%{date_time}").join(m);
}
function getDateNow() {
  var h = new Date();
  var j = h.getDate();
  var k = h.getMonth() + 1;
  var l = h.getFullYear();
  var m = h.getHours();
  var p = h.getMinutes();
  var h = h.getSeconds();
  var j = j < 10 ? String("0" + j) : String(j);
  var k = k < 10 ? String("0" + k) : String(k);
  var m = m < 10 ? String("0" + m) : String(m);
  var p = p < 10 ? String("0" + p) : String(p);
  var h = h < 10 ? String("0" + h) : String(h);
  return String(l + "-" + k + "-" + j + " " + m + ":" + p + ":" + h);
}
function jsonDecode(g) {
  if (isnull(g)) {
    return null;
  } else {
    g = g.split("\t").join("").split("\n").join("");
    return JSON.parse(g);
  }
}
function jsonEncode(g) {
  if (isnull(g)) {
    return null;
  } else {
    return JSON.stringify(g);
  }
}
function random(o) {
  var t = gE
  return Math[t(1067)](Math[t(1350)]() * o)
}
function random(g) {
  return Math.round(Math.random() * g);
}
function randomRangeInt(g, h) {
  g = Math.ceil(g);
  h = Math.floor(h);
  return Math.floor(Math.random() * (h - g + 1)) + g;
}
function decimal(g, h) {
  h = isnull(h) ? 2 : h;
  h = Math.pow(10, h);
  return Math.round(g * h) / h;
}
function numberSpaced(g) {
  var h;
  if (g) {
    g = g.toString();
    h = g.indexOf(".");
    return g.replace(/\d(?=(?:\d{3})+(?:\.|$))/g, function (i, j) {
      if (h < 0 || j < h) {
        return i + " ";
      } else {
        return i;
      }
    });
  } else {
    return 0;
  }
}
function trim(g) {
  if (isnull(g)) {
    return "";
  } else {
    return (g = (g = (g = g.split("\t").join("")).split("\n").join("")).split("\r").join("")).replace(/^\s+|\s+$|\s+(?=\s)/g, "");
  }
}
function cleanInputText(g) {
  return g = (g = trim(g = ucwords(g))).replace(regexList.max3letters, "");
}
function slugify(g) {
  return g.toString().toLowerCase().replace(/\s+/g, "-").replace(/&/g, "-and-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "");
}
function ucwords(g) {
  return (g = g.toLowerCase()).charAt(0).toUpperCase() + g.slice(1);
}
function uniqid(g) {
  g = g || "";
  function i() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return i() + g + i() + g + i() + g + i() + g + i();
}
function uniqid30() {
  function h() {
    return Math.floor((1 + Math.random()) * 65536).toString(16);
  }
  return h() + h() + h() + h() + h() + h();
}
function getUniqLink(g) {
  g = notnull(g) ? g.app : app.version;
  return uniqid() + "-v" + g;
}
function isnull(g) {
  return g == null || g === "undefined";
}
function notnull(g) {
  return g != null && g !== "undefined";
}function copyToClipboard(g) {
  var h = document.createElement("textarea");
  h.value = g;
  h.setAttribute("readonly", "");
  h.style = {
    position: "absolute",
    visibility: "hidden",
    pointerEvents: "none"
  };
  document.body.appendChild(h);
  h.select();
  document.execCommand("copy");
  document.body.removeChild(h);
}
function resetAnimationCSS(g) {
  g.style.animation = "none";
  g.offsetHeight;
  g.style.animation = null;
}
function transitionEndEventName() {
  var h;
  var i = document.createElement("div");
  var j = {
    transition: "transitionend",
    OTransition: "oTransitionEnd",
    MozTransition: "transitionend",
    WebkitTransition: "webkitTransitionEnd"
  };
  for (h in j) {
    if (j.hasOwnProperty(h) && i.style[h] !== undefined) {
      return j[h];
    }
  }
  return null;
}
function animationEndEventName() {
  var g;
  var h = document.createElement("div");
  var i = {
    animation: "animationend",
    OAnimation: "oanimationend",
    MozAnimation: "animationend",
    WebkitAnimation: "webkitAnimationEnd"
  };
  for (g in i) {
    if (i.hasOwnProperty(g) && h.style[g] !== undefined) {
      return i[g];
    }
  }
  return null;
}
function addTransition(g, h, j, k, l) {
  l = !!notnull(l) && l;
  g.off(transitionEnd).addClass(h).on(transitionEnd, {
    div: g,
    prop: j,
    func: k,
    log: l
  }, transitionComplete);
}
function removeTransition(g, h, j, k, l) {
  l = !!notnull(l) && l;
  g.off(transitionEnd).removeClass(h).on(transitionEnd, {
    div: g,
    prop: j,
    func: k,
    log: l
  }, transitionComplete);
}
function transitionComplete(g) {
  if (notnull(g.data) && notnull(g.data.func) && g.originalEvent.propertyName.replace("-webkit-", "") == g.data.prop && g.data.div.attr("id") == g.target.id) {
    notnull(g.data.log);
    g.data.div.off(transitionEnd);
    g.data.func();
  }
}
function stopProp(g) {
  if (notnull(g)) {
    g.stopPropagation();
  }
}
String.prototype.replaceAt = function (g, h) {
  return this.substr(0, g) + h + this.substr(g + h.length);
};
var drawMinTopY;
  drawMaxTopY;
  drawMaxRandPosY;
  drawMaxBounceY;
  drawPoloW;
  drawPoloH;
  drawEyeW;
  drawEyeH;
  drawAnimW;
  drawAnimH;
  drawEyeY;
  drawPupW;
  drawPup1X;
  drawPup1Y;
  drawPup2X;
  drawPup2Y;
  drawMaxPupMove;
  cropPoloW;
  cropPoloH;
  cropAnimW;
  cropAnimH;
  cropEyeW;
  cropEyeH;
  cropEyeX;
  cropEyeY;
  cropEyelidX;
  cropEyelid1Y;
  cropEyelid2Y;
  cropEyelid3Y;
  cropEyelid4Y;
  cropPupY;
  cropPupW;
  canvasBound;
  canvasScale;
  poloRatio;
  poloBlocW;
  poloOverlapW;
  poloBlocX;
  var sizes = {
  polo: {
    sprWidth: 164,
    sprHeight: 400,
    overlapW: 30,
    minTopY: 10,
    maxTopY: 380,
    maxRandomY: 30,
    maxBounceY: 25,
    sprAnimW: 164,
    sprAnimH: 380,
    eyesTopY: 97,
    sprEyesW: 164,
    sprEyesH: 40,
    sprEyesX: 492,
    sprEyesY: 0,
    sprEyelidX: 328,
    sprEyelid1Y: 0,
    sprEyelid2Y: 40,
    sprEyelid3Y: 80,
    sprEyelid4Y: 120,
    sprPupY: 450,
    sprPupW: 16,
    pup1X: 54,
    pup1Y: 110,
    pup2X: 95,
    pup2Y: 110,
    maxPupMove: 7
  },
    canvas: {
      baseW: 1028,
      baseH: 380,
      marge: 50,
      maxOverflow: 20,
    },
    video: {
      baseW: 1000,
      baseH: 400,
    },
  },
var bottomNeedSlide = false;
function getViewport() {
  var h = document.body.clientWidth;
  var i = document.body.clientHeight;
  if (h < i) {
    h = document.body.clientHeight;
    i = document.body.clientWidth;
  }
  return {
    w: h,
    h: i
  };
}
function resizeApp() {
  var k;
  var q;
  var w;
  var x;
  var y;
  var z;
  var A;
  var B;
  var C;
  var D;
  var E;
  var F;
  var G;
  var H;
  var I;
  var J;
  var K;
  var L;
  var M;
  if (pageApp) {
    if (miniPlayer) {
      sizes.canvas.marge = 15;
    }
    cropPoloW = sizes.polo.sprWidth * animSize;
    cropPoloH = sizes.polo.sprHeight * animSize;
    cropAnimW = sizes.polo.sprAnimW * animSize;
    cropAnimH = sizes.polo.sprAnimH * animSize;
    cropEyeW = sizes.polo.sprEyesW * animSize;
    cropEyeH = sizes.polo.sprEyesH * animSize;
    cropEyeX = sizes.polo.sprEyesX * animSize;
    cropEyeY = sizes.polo.sprEyesY * animSize;
    cropEyelidX = sizes.polo.sprEyelidX * animSize;
    cropEyelid1Y = sizes.polo.sprEyelid1Y * animSize;
    cropEyelid2Y = sizes.polo.sprEyelid2Y * animSize;
    cropEyelid3Y = sizes.polo.sprEyelid3Y * animSize;
    cropEyelid4Y = sizes.polo.sprEyelid4Y * animSize;
    cropPupY = sizes.polo.sprPupY * animSize;
    cropPupW = sizes.polo.sprPupW * animSize;
    k = document.querySelector("#game");
    q = document.querySelector("#box-top");
    w = document.querySelector("#box-stage");
    x = w.querySelector("#cnv-stage");
    y = w.querySelector("#box-polo");
    z = document.querySelector("#box-loader-polo");
    A = document.querySelector("#box-video");
    B = document.querySelector("#box-picto");
    C = A.querySelectorAll(".video");
    D = sizes.canvas.baseW / sizes.canvas.baseH;
    G = sizes.video.baseW / sizes.video.baseH;
    M = hasHBI ? 25 : 0;
    window.onresize = function () {
      if (C) {
        if (k.clientWidth / k.clientHeight < 1.6) {
          bottomNeedSlide = false;
          L = w.clientHeight;
          if (document.body.classList.contains("bottomSlide")) {
            document.body.classList.remove("bottomSlide");
          }
        } else {
          bottomNeedSlide = !miniPlayer;
          L = k.clientHeight - q.clientHeight - q.clientHeight / 2;
        }
        if ((H = (I = L) * G) < k.clientWidth) {
          H = Math.ceil(k.clientWidth);
          I = Math.ceil(H / G);
        }
        J = Math.round((H - A.clientWidth) / 2);
        K = Math.round((I - L) / 2);
        C.forEach(N => {
          N.style.width = H + "px";
          N.style.height = I + "px";
          N.style.transform = "translate(" + -J + "px, " + -K + "px)";
        });
      }
      if (x) {
        F = w.clientHeight + sizes.canvas.maxOverflow;
        if ((E = F * D) > w.clientWidth - sizes.canvas.marge * 2) {
          E = w.clientWidth - sizes.canvas.marge * 2;
          F = E / D;
        }
        if (appBrowser && E > sizes.canvas.baseW) {
          E = sizes.canvas.baseW;
          F = E / D;
        }
        x.style.width = E + "px";
        x.style.height = F + "px";
        y.style.width = E + "px";
        y.style.height = F + "px";
        z.style.width = E + "px";
        B.style.width = E * 0.92 - M * 2 + "px";
        x.width = x.clientWidth * cnvPXD;
        x.height = x.clientHeight * cnvPXD;
        canvasBound = x.getBoundingClientRect();
        canvasScale = x.clientHeight / sizes.canvas.baseH;
        poloOverlapW = canvasBound.width * sizes.polo.overlapW / sizes.canvas.baseW;
        poloBlocW = (canvasBound.width + poloOverlapW * (nbPoloMax - 1)) / nbPoloMax;
        poloBlocX = (canvasBound.width - poloBlocW) / (nbPoloMax - 1);
        poloRatio = poloBlocW / sizes.polo.sprWidth;
        drawMinTopY = sizes.polo.minTopY * canvasScale * cnvPXD;
        drawMaxTopY = sizes.polo.maxTopY * canvasScale * cnvPXD;
        drawMaxRandPosY = sizes.polo.maxRandomY * canvasScale * cnvPXD;
        drawMaxBounceY = sizes.polo.maxBounceY * canvasScale * cnvPXD;
        drawPoloW = sizes.polo.sprWidth * poloRatio * cnvPXD;
        drawPoloH = sizes.polo.sprHeight * poloRatio * cnvPXD;
        drawEyeW = sizes.polo.sprEyesW * poloRatio * cnvPXD;
        drawEyeH = sizes.polo.sprEyesH * poloRatio * cnvPXD;
        drawEyeY = sizes.polo.eyesTopY * poloRatio * cnvPXD;
        drawAnimW = sizes.polo.sprAnimW * poloRatio * cnvPXD;
        drawAnimH = sizes.polo.sprAnimH * poloRatio * cnvPXD;
        drawPupW = sizes.polo.sprPupW * poloRatio * cnvPXD;
        drawPup1X = sizes.polo.pup1X * poloRatio * cnvPXD;
        drawPup1Y = sizes.polo.pup1Y * poloRatio * cnvPXD;
        drawPup2X = sizes.polo.pup2X * poloRatio * cnvPXD;
        drawPup2Y = sizes.polo.pup2Y * poloRatio * cnvPXD;
        drawMaxPupMove = sizes.polo.maxPupMove * poloRatio * cnvPXD;
      }
      if (listPolo && listPolo.length) {
        listPolo.forEach(function (N, O) {
          N.resize();
          if (pause) {
            N.draw();
          }
        });
      }
    };
    window.onresize();
  }
}
  var pageExt;
  var appBrowser;
  var transitionEnd;
  var animationEnd;
  var iosVersion;
  var iosVersionNumber;
  var debugMute = getParameterByName("mute") || false;
  var debugGame = getParameterByName("game") || false;
  var debugScene = getParameterByName("scene") || false;
  var debugBonus = getParameterByName("bonus") || false;
  var build = {
    id: "9pdjpp8scs9k";
    store: "microsoft";
    platform: "desktop";
    os: "win";
    osMinimum: "";
    storeURL: "https://apps.microsoft.com/detail/9pdjpp8scs9k?hl=en-US&gl=US",
    version: "1.2.8";
    htmlExt: "html";
  },
  var domainOnline = "https://www.incredibox.com/";
  var appCN = false;
  var machine = {};
  var user = {};
  var hasNetwork = false;
  var sndExt = "ogg";
  var vidExt = "webm";
  var appBrowserDemo = false;
  var appBrowserSchool = false;
  var featureLocked = false;
  var isMouseDevice = checkMouseDevice();
  var isTouchDevice = checkTouchDevice();
  var isMobile = false,
  var trustAppMobile = window.cordova || false;
  var isIframe = inIframe();
  var pointerEventType = {};
  var isIOS = false;
  var isIOSMac = false;
  var isOSX = false;
  var isWin = false;
  var isAndroid = false;
  var isiPod = false;
  var isiPhone = false;
  var isiPad = false;
  var isiPadPro = false;
  var hasHBI = false;
  var animSize = 1;
  var cnvPXD = 2;
function checkSystem() {
  pageApp = window.location.href.includes("app.html") || window.location.href.includes("app.php") || getParameterByName("afs") == "1";
  pageExt = build.htmlExt;
  appBrowser = build.platform == "browser";
  appBrowserDemo = checkInPWA();
  appBrowserSchool = !!notnull(getParameterByName("afs"));
  featureLocked = (appBrowser || appBrowserDemo) && !appBrowserSchool;
  hasNetwork = networkState();
  machine = getDeviceInfo(true);
  user = getUserInfo();
  isAndroid = /android/i.test(machine.osName);
  isWin = /windows/i.test(machine.osName);
  isOSX = /mac os/i.test(machine.osName);
  isIOS = /ios/i.test(machine.osName);
  isIOSMac = !(!window.device || !window.device.isiOSAppOnMac) && window.device.isiOSAppOnMac;
  if (iosVersion = !(!window.device || !window.device.version) && window.device.version) {
    h = iosVersion.split(".");
    iosVersionNumber = Number(String(h[0]) + String(h[1])[0]);
  }
  isiPod = isIOS && /ipod/i.test(machine.osName);
  isiPhone = isIOS && /iphone/i.test(machine.osName);
  isiPad = isIOS && /ipad/i.test(machine.deviceModel);
  isiPadPro = isIOS && /ipadpro/i.test(machine.deviceModel);
  isRetina = checkRetina();
  isMobile = checkMobile();
  hasHBI = isIOS && checkHBI();
  animSize = document.body.clientWidth >= 1024 && document.body.clientHeight >= 768 ? 2 : 1;
  if (appBrowser) {
    animSize = 1;
    sndExt = checkAudioFormat("ogg") ? "ogg" : sndExt;
    vidExt = isAndroid || machine.browserName == "mozilla firefox" && machine.browserVersion <= 48 ? "webm" : "mp4";
  }
  pointerEventType = setPointerEvent();
  transitionEnd = transitionEndEventName();
  animationEnd = animationEndEventName();
  window.cordova;
  window.electron;
  var h = window.cordova ? document : window;
  h.addEventListener("online", networkOn, false);
  h.addEventListener("offline", networkOff, false);
  document.body.classList.remove("black");
  if (window.electron) {
    document.body.classList.add("electron");
  }
  if (!(pageApp || window.electron)) {
    document.getElementById("fade-all").classList.add("white");
  }
  if (pageApp) {
    document.body.classList.add("v" + appVersion);
    document.body.classList.add("darkback");
  }
  if (!(!appBrowser || appBrowserDemo || appBrowserSchool)) {
    document.body.classList.add("appBrowser");
  }
  if (appBrowserDemo) {
    document.body.classList.add("appBrowserDemo");
  }
  if (appBrowserSchool) {
    document.body.classList.add("afs");
  }
  if (featureLocked) {
    document.body.classList.add("featureLocked");
  }
  if (hasHBI) {
    document.body.classList.add("hasHBI");
  }
  if (miniPlayer) {
    document.body.classList.add("miniPlayer");
  }
  if (window.cordova && isAndroid) {
    document.addEventListener("backbutton", function (i) {
      i.preventDefault();
      clickAndroidBackButton();
    }, false);
  }
  if (window.cordova && pageApp && !isIOSMac && !window.electron) {
    document.addEventListener("pause", appOnPause, false);
    document.addEventListener("resume", appOnResume, false);
  }
  if (window.cordova && pageApp && isAndroid) {
    window.addEventListener("native.keyboardshow", VKBopen);
    window.addEventListener("native.keyboardhide", VKBclose);
  }
  if (pageApp && !window.cordova) {
    window.electron;
  }
  if (window.electron && build.store == "steam" && btoa(electron.vars.arg) != "YXJw") {
    new BoxDialog("#pop-dialog").open("Incredibox needs to run from<br>your Steam library.<br>Thanks for your support!", "&#129488;", [], true, true);
    throw new Error("Please connect to your Steam account");
  }
}
function checkHBI() {
  if (window.cordova) {
    var g = getComputedStyle(document.documentElement).getPropertyValue("--sab");
    if (g && g != "" && parseInt(g) > 0) {
      return true;
    }
  }
  return false;
}
function getListUUID() {
  var g;
  var h = [];
  h.push(machine.uuid);
  for (g in storage.getAllItem()) {
    if (g.indexOf("uuid-") != -1) {
      if (g.replace("uuid-", "") != "") {
        h.push(g.replace("uuid-", ""));
      } else {
        storage.removeItem(g);
      }
    }
  }
  return removeDupInArray(h, false);
}
function secureIframe() {}
function checkInBrowser() {
  return document.URL.indexOf("http://") > -1 || document.URL.indexOf("https://") > -1;
}
function checkInPWA() {
  return !(!window.navigator || window.navigator.standalone !== true) || !!window.matchMedia("(display-mode: standalone)").matches;
}
function checkMobile() {
  var g;
  return !(window.electron || isIOSMac || isiPad || (g = getViewport(), !(isiPod || isiPhone || g.h <= 500 && g.w <= 1000)));
}
function checkRetina() {
  var g;
  return !!window.matchMedia && ((g = window.matchMedia("only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)")) && g.matches || window.devicePixelRatio > 1);
}
function checkTouchDevice() {
  var g = false;
  try {
    document.createEvent("TouchEvent");
    g = true;
  } catch (h) {}
  if (window.hasOwnProperty("ontouchstart") || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) {
    g = true;
  }
  return g = window.matchMedia("(pointer: coarse)").matches ? true : g;
}
function checkMouseDevice() {
  return window.matchMedia("(hover: hover)").matches && window.matchMedia("(pointer: fine)").matches;
}
function getAppData() {
  return {
    build: build,
    machine: machine,
    user: user
  };
}
function checkMouseDevice() {
  var o = gE
  return (
    window[o(816)](o(613))[o(2693)] &&
    window.matchMedia('(pointer: fine)')[o(2693)]
  )
}
function checkAudioFormat(g) {
  g = g || "mp3";
  var h = document.createElement("audio");
  return !(!h.canPlayType || !h.canPlayType("audio/" + g + ";").replace(/no/, ""));
}
function checkSupported() {
  var h = window.hasOwnProperty("HTMLCanvasElement");
  var j = window.AudioContext || window.webkitAudioContext || false;
  var k = window.requestAnimationFrame || window.webkitRequestAnimationFrame || false;
  var l = typeof new XMLHttpRequest().responseType == "string";
  var m = !isnull(transitionEnd) && !isnull(animationEnd);
  window.AudioContext = j;
  window.requestAnimationFrame = k;
  if (h) {
    if (j) {
      if (l) {
        if (m) {
          if (k) {
            return "ok";
          } else {
            return "RAF";
          }
        } else {
          return "CSS3";
        }
      } else {
        return "XHR";
      }
    } else {
      return "Audio API";
    }
  } else {
    return "Canvas";
  }
}
function lockScreenEdges() {
  if (window.cordova && typeof ScreenEdgesPlugin == "object") {
    ScreenEdgesPlugin.setPreferredEdges(["top", "bottom"], function () {}, function (g) {});
  }
}
function unlockScreenEdges() {
  if (window.cordova && typeof ScreenEdgesPlugin == "object") {
    ScreenEdgesPlugin.setPreferredEdges([], function () {}, function (h) {});
  }
}
function converterCanRun() {
  var h = typeof window.Worker == "function";
  window.cordova;
  return h;
}
function setPointerEvent(g) {
  var i = window.hasOwnProperty("PointerEvent") ? "pointer" : window.hasOwnProperty("TouchEvent") ? "touch" : "mouse";
  var g = g || i;
  var i = {};
  if (g == "pointer") {
    i.down = "pointerdown";
    i.up = "pointerup";
    i.move = "pointermove";
    i.cancel = "pointercancel";
    i.leave = "pointerleave";
  } else if (g == "touch") {
    i.down = "touchstart";
    i.up = "touchend";
    i.move = "touchmove";
    i.cancel = "touchcancel";
    i.leave = "touchcancel";
  } else if (g == "mouse") {
    i.down = "mousedown";
    i.up = "mouseup";
    i.move = "mousemove";
    i.cancel = "mouseleave";
    i.leave = "mouseleave";
  }
  return i;
}
function initRightClick() {
  window.oncontextmenu = function () {
    return false;
  }
}
function networkOn() {
  hasNetwork = true;
  localMixObject.saveMixOffline();
  initAnalytics();
}
function networkOff() {
  hasNetwork = false;
}
function networkState() {
  var g = false;
  if (navigator.onLine) {
    g = navigator.onLine;
  } else if (navigator.network && navigator.network.connection && navigator.network.connection.type) {
    g = !(navigator.network.connection.type == Connection.NONE);
  }
  return g;
}
function keepAppAwake() {
  if (window.plugins && window.plugins.insomnia && !isIOSMac) {
    window.plugins.insomnia.keepAwake(function () {}, function () {});
  }
}
function stopKeepingAppAwake() {
  if (window.plugins && window.plugins.insomnia && !isIOSMac) {
    window.plugins.insomnia.allowSleepAgain(function () {}, function () {});
  }
}
function deleteUserInfo() {}
function getUserInfo() {
  return {
    guid: storage.getItem("user-guid") || "",
    djname: storage.getItem("user-djname") || "",
    lang: storage.getItem("user-lang") || ""
  };
}
function setUserInfo(g) {
  if (notnull(g.guid)) {
    g.guid = g.guid.length == 30 ? g.guid : "";
    user.guid = g.guid;
    storage.setItem("user-guid", user.guid, true);
  }
  if (notnull(g.djname)) {
    user.djname = g.djname;
    storage.setItem("user-djname", user.djname, true);
  }
  if (notnull(g.lang)) {
    user.lang = g.lang;
    storage.setItem("user-lang", user.lang, true);
  }
  user = getUserInfo();
}
function getDeviceInfo(g) {
  var j;
  var k;
  var q = navigator.userAgent || navigator.vendor || window.opera;
  var w = q.toLowerCase();
  var x = "(?)";
  if (/(fban|fbios|fbav|fbbv|fbid)/gi.test(w)) {
    x = "Facebook";
  } else if (/(twitter)/gi.test(w)) {
    x = "Twitter";
  }
  var y = "(?)";
  if (window.cordova && device) {
    y = device.platform;
  } else if (/(macintosh)/gi.test(w) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2 || /(iphone|ipad|ipod)/gi.test(w)) {
    y = "iOS";
  } else if (/(mac os x)/gi.test(w)) {
    y = "Mac OS X";
  } else if (/(macppc|macintel|mac_powerpc|macintosh)/gi.test(w)) {
    y = "Mac OS";
  } else if (/(windows|win16)/gi.test(w)) {
    y = "Windows";
  } else if (/(android)/gi.test(w)) {
    y = "Android";
  }
  var z = "(?)";
  var A = w;
  if (window.cordova && device) {
    A = device.model;
  }
  if (/(windows phone|windows phone)/gi.test(A)) {
    z = "Windows phone";
  } else if (/(windows|win16)/gi.test(A)) {
    z = "PC";
  } else if (/(android)/gi.test(A)) {
    z = "Android";
  } else if (/(macintosh)/gi.test(A) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && window.screen.width == 1024 && window.screen.height == 1366) {
    z = "iPadPro";
  } else if (/(macintosh)/gi.test(A) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2 || /(ipad)/gi.test(A)) {
    z = "iPad";
  } else if (/(iphone)/gi.test(A)) {
    z = "iPhone";
  } else if (/(ipod)/gi.test(A)) {
    z = "iPod";
  } else if (/(mac)/gi.test(A)) {
    z = "Mac";
  }
  if (window.cordova && device && appleModel[device.model] != null && /ipad pro/i.test(appleModel[device.model])) {
    A = "iPadPro";
  }
  var A = "(?)";
  if (window.cordova && device) {
    A = device.model;
  } else if (window.navigator != null && navigator.platform != null) {
    A = navigator.platform;
  }
  var B = "(?)";
  if (window.cordova && device) {
    B = device.version;
  } else if (y == "Windows") {
    if (/(windows 10.0|windows nt 10.0)/gi.test(w)) {
      B = "10";
    } else if (/(windows 8.1|windows nt 6.3)/gi.test(w)) {
      B = "8.1";
    } else if (/(windows 8|windows nt 6.2)/gi.test(w)) {
      B = "8";
    } else if (/(windows 7|windows nt 6.1)/gi.test(w)) {
      B = "7";
    } else if (/(windows nt 6.0)/gi.test(w)) {
      B = "Vista";
    } else if (/(windows nt 5.2)/gi.test(w)) {
      B = "Server 2003";
    } else if (/(windows nt 5.1|windows xp)/gi.test(w)) {
      B = "XP";
    } else if (/(windows nt 5.0|windows 2000)/gi.test(w)) {
      B = "2000";
    } else if (/(win 9x 4.90|windows me)/gi.test(w)) {
      B = "ME";
    } else if (/(windows 98|win98)/gi.test(w)) {
      B = "98";
    } else if (/(windows 95|win95|windows_95)/gi.test(w)) {
      B = "95";
    } else if (/(windows nt 4.0|winnt4.0|winnt|windows nt)/gi.test(w)) {
      B = "NT 4.0";
    } else if (/(windows ce)/gi.test(w)) {
      B = "CE";
    } else if (/(win16)/gi.test(w)) {
      B = "3.11";
    }
  } else if (y == "Android") {
    D = "Android";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = parseFloat(q.slice(E + D.length, E + D.length + 6));
    B = isNaN(C) ? B : C;
  } else if (y == "iOS") {
    D = "OS";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = q.slice(E + D.length, E + D.length + 6);
    C = parseFloat(C.replace("_", "."));
    B = isNaN(C) ? B : C;
  } else if (y.indexOf("Mac OS") != -1) {
    D = y.indexOf("Mac OS X") != -1 ? "Mac OS X" : "Mac OS";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = q.slice(E + D.length, E + D.length + 6);
    C = parseFloat(C.replace("_", "."));
    B = isNaN(C) ? B : C;
  }
  var w = 0;
  if (y == "iOS") {
    if (window.cordova && device) {
      if (appleModel[device.model] != null && z == "iPhone") {
        w = appleModel[device.model].replace("iPhone", "").split(" ")[0];
        w = /SE/i.test(w) ? 7 : /X/i.test(w) ? 10 : parseInt(w);
      }
    } else if (z == "iPhone" && (E = window.screen.width, D = window.screen.height, E == 320 && D == 480 ? w = 4 : E == 320 && D == 568 ? w = 5 : E == 375 && D == 667 || E == 414 && D == 736 ? w = 6 : (E == 375 && D == 812 || E == 414 && D == 896) && (w = 10), window.devicePixelRatio == 3) && (E == 812 && D == 375 || D == 896 && E == 414)) {
      w = 10;
    }
  }
  var C = "";
  if (window.cordova && device) {
    C = build.os;
  } else if (/mac os/i.test(y)) {
    C = "osx";
  } else if (/windows/i.test(y)) {
    C = "win";
  } else if (/android/i.test(y)) {
    C = "and";
  } else if (/ios/i.test(y)) {
    C = "ios";
  }
  var D = navigator.appName;
  var E = "" + parseFloat(navigator.appVersion);
  var F = parseInt(navigator.appVersion, 10);
  if ((j = q.indexOf("OPR/")) != -1) {
    D = "Opera";
    E = q.substring(j + 4);
  } else if ((j = q.indexOf("Opera")) != -1) {
    D = "Opera";
    E = q.substring(j + 6);
    if ((j = q.indexOf("Version")) != -1) {
      E = q.substring(j + 8);
    }
  } else if ((j = q.indexOf("Edge")) != -1) {
    D = "Microsoft Edge";
    E = q.substring(j + 5);
  } else if ((j = q.indexOf("MSIE")) != -1) {
    D = "Microsoft Internet Explorer";
    E = q.substring(j + 5);
  } else if ((j = q.indexOf("Trident")) != -1) {
    D = "Microsoft Internet Explorer";
    if ((j = q.indexOf("rv:")) != -1) {
      E = q.substring(j + 3);
    }
  } else if ((j = q.indexOf("CriOS")) != -1 && /iphone|ipod|ipad/i.test(q)) {
    D = "Google Chrome for IOS";
    E = q.substring(j + 6);
  } else if ((j = q.indexOf("Chrome")) != -1) {
    D = "Google Chrome";
    E = q.substring(j + 7);
  } else if ((j = q.indexOf("Safari")) != -1) {
    D = "Safari";
    E = q.substring(j + 7);
    if ((j = q.indexOf("Version")) != -1) {
      E = q.substring(j + 8);
    }
  } else if ((j = q.indexOf("Firefox")) != -1) {
    D = "Mozilla Firefox";
    E = q.substring(j + 8);
  } else if ((k = q.lastIndexOf(" ") + 1) < (j = q.lastIndexOf("/")) && (D = q.substring(k, j), E = q.substring(j + 1), D.toLowerCase() == D.toUpperCase())) {
    D = navigator.appName;
  }
  if ((k = (E = (k = E.indexOf(";")) != -1 ? E.substring(0, k) : E).indexOf(" ")) != -1) {
    E = E.substring(0, k);
  }
  F = parseInt("" + E, 10);
  if (isNaN(F)) {
    E = "" + parseFloat(navigator.appVersion);
    F = parseInt(navigator.appVersion, 10);
  }
  var q = "";
  if (window.device && window.device.uuid) {
    q = device.uuid.toUpperCase();
  } else if (window.electron && window.electron.vars.uuid) {
    q = window.electron.vars.uuid;
  } else if (notnull(storage.getItem("tmp-uuid"))) {
    q = storage.getItem("tmp-uuid");
  } else {
    q = "tmp-" + uniqid("-").toUpperCase();
    storage.setItem("tmp-uuid", q);
  }
  var G = {
    osName: y,
    osTiny: C,
    osVersion: B.toString(),
    deviceModel: z,
    deviceName: A,
    deviceNumber: w,
    browserName: D,
    browserVersion: F,
    browserFullVersion: E,
    browserAppName: navigator.appName,
    browserUserAgent: navigator.userAgent,
    language: navigator.language || "",
    webviewEmbed: x,
    uuid: q
  };
  var H = 0;
  if (g === true) {
    for (H in G) {
      if (typeof G[H] == "string") {
        G[H] = G[H].toLowerCase();
      }
    }
  }
  if (window.device) {
    for (H in device);
  }
  for (H in G);
  return G;
}
window.devicePixelRatio = window.devicePixelRatio || 1;
secureIframe();
var appleModel = {};
function initRulesCSS() {
  var g = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sal"));
  var h = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sar"));
  var g = Math.max(g, h, 20);
  var h = ":root {";
  if (pageApp) {
    h += "\n\t\t\t--app-v : " + appVersion + ";\n\t\t\t--colBck : " + app.colBck + ";\n\t\t\t--col0 : " + app.col0 + ";\n\t\t\t--col1 : " + app.col1 + ";\n\t\t\t--col2 : " + app.col2 + ";\n\t\t\t--col3 : " + app.col3 + ";\n\t\t\t--col4 : " + app.col4 + ";\n\t\t\t--url-img-home-screen : url(../asset-v" + appVersion + "/img/home-screen@2x.jpg);\n\t\t\t--url-img-home-titre : url(../asset-v" + appVersion + "/img/home-titre@2x.png);\n\t\t\t--url-img-home-version : url(../asset-v" + appVersion + "/img/home-version@2x.png);\n\t\t";
  }
  h = h + ("\n\t\t\t--fullfill-padding : " + g + "px;\n\t\t\t--url-img-bt-stores : url(" + domainOnline + "img/bt-stores-" + currentLanguage.split("-")[0] + ".png);\n\t\t") + "}";
  var g = document.head || document.getElementsByTagName("head")[0];
  var i = document.createElement("style");
  g.appendChild(i);
  i.type = "text/css";
  i.appendChild(document.createTextNode(h));
}
function BoxDialog(g) {
  var i = this;
  var j = $(g);
  function k(n) {
    n.preventDefault();
    stopProp(n);
    n.data.bt.addTouchAnimation();
    var q = true;
    if (n.data.func !== undefined) {
      if (n.data.func === l) {
        q = false;
      }
      n.data.func();
    }
    if (q) {
      l();
    }
  }
  function l() {
    if (!i.neverClose) {
      i.close();
    }
  }
  this.$div = j;
  this.$bck = j.find(".bac");
  this.$scale = j.find(".scale");
  this.$box = j.find(".box");
  this.$pop = j.find(".pop");
  this.$pop.$title = j.find(".title");
  this.$pop.$text = j.find(".text");
  this.$pop.$content = j.find(".content");
  this.opened = false;
  this.neverClose = false;
  this.isOpen = function () {
    return i.opened;
  };
  this.open = function (q, v, w, x, y, z, A) {
    if (i.isOpen()) {
      removeInFocusHistory("popup-dialog");
      deleteFocus();
      i.killall();
    }
    j.on(pointerEventType.down, stopProp);
    i.opened = true;
    i.neverClose = !isnull(z) && z;
    q = isnull(q) ? "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod" : q;
    v = isnull(v) ? "Info" : v;
    w = isnull(w) ? ["Close"] : w;
    x = isnull(x) ? [l] : x;
    y = !isnull(y) && y;
    if (notnull(A)) {
      j.attr("data-name", A);
    }
    j.addClass("show");
    i.clean();
    i.$pop.$title.html(v);
    i.$pop.$text.html(q);
    for (var B = 0, C = w.length; B < C; B++) {
      var D = w[B];
      var E = $("<div class=\"bt bt-light\" id=\"bt-mini" + B + "\"></div>");
      (E = new CustomButton(E)).html("<div class=\"bck\"><div class=\"txt\">" + D + "</div></div><div class=\"hitzone\"></div>");
      E.on(pointerEventType.down, {
        func: x[B],
        bt: E
      }, k);
      i.$pop.$content.append(E);
    }
    if (y) {
      j.css({
        "z-index": "9999"
      });
    }
    i.fadeInBck();
    i.$box.removeClass("open close").addClass("open");
    createFocus("popup-dialog");
  };
  this.close = function (n) {
    if (notnull(n)) {
      n.preventDefault();
    }
    i.fadeOutBck();
    i.$box.removeClass("open close").addClass("close").one(animationEnd, function (q) {
      $(q.target).removeClass("close");
      j.removeClass("show");
      j.removeAttr("data-name");
      j.off();
      i.clean();
      i.opened = false;
      removeInFocusHistory("popup-dialog");
      createFocusFromHistory();
    });
  };
  this.killall = function () {
    removeInFocusHistory("popup-dialog");
    j.off();
    j.removeAttr("data-name");
    j.removeClass("show");
    i.clean();
    i.$box.removeClass("open close");
    resetAnimationCSS(i.$box[0]);
    i.$bck.removeClass("animateFadeIn animateFadeOut");
    resetAnimationCSS(i.$bck[0]);
    i.opened = false;
  };
  this.fadeInBck = function (n) {
    if (n) {
      i.$bck.addClass("mini");
    } else {
      i.$bck.removeClass("mini");
    }
    i.$bck.addClass("animateFadeIn");
  };
  this.fadeOutBck = function () {
    i.$bck.addClass("animateFadeOut").one(animationEnd, function (n) {
      $(n.target).removeClass("animateFadeIn animateFadeOut");
    });
  };
  this.clean = function () {
    i.$pop.$content.find(".bt").off();
    i.$pop.$content.empty();
    i.$pop.$title.empty();
    i.$pop.$text.empty();
  };
  return this;
}
function Popup(g) {
  var j;
  var k = this;
  var q = $(g);
  var v = q.find(".bac");
  var w = q.find(".box");
  var x = q.find(".bt.icon");
  var y = q.find(".container");
  var z = q.find(".box-tab .tab").length > 0;
  var A = true;
  var B = true;
  function C() {
    A = true;
    v.removeClass("animateFadeIn animateFadeOut");
    k.closeComplete();
  }
  function D(F) {
    B = true;
    w.removeClass("slideUp slideDown").get(0).offsetHeight;
    j.onBoxCloseEnd();
    k.closeComplete();
    tryfunc(F);
  }
  function E() {
    if (notnull(k.onCloseTab)) {
      k.onCloseTab();
    }
    q.find(".tab.active").removeClass("active");
    q.find(".pop.active").removeClass("active");
    var F = $(this);
    var G = q.find(".pop#" + F.attr("id").replace("tab-", "pop-"));
    F.addClass("active");
    G.addClass("active");
    createFocus(G.attr("id"));
  }
  this.$popup = q;
  this.$icon = x;
  this.$container = y;
  this.objCustom = j;
  this.open = function (F) {
    if (!(notnull(j) && F.name == j.name)) {
      if (!q.hasClass("show")) {
        q.addClass("show");
      }
      if (!v.hasClass("animateFadeIn")) {
        k.showBck();
      }
      if (w.hasClass("slideUp")) {
        k.hideBox(function () {
          k.open(F);
        });
      } else {
        k.custom(F);
        k.showBox();
      }
    }
  };
  this.close = function (F) {
    k.hideBck(F);
    k.hideBox(null, F);
  };
  this.closeComplete = function () {
    if (A && B) {
      k.reinit();
      tryfunc(j.onCloseComplete);
      j = null;
    }
  };
  this.reinit = function () {
    if (!j.static) {
      y.empty();
    }
    q.removeClass("show mini info action action-back no-action");
    q.removeAttr("data-name");
    v.removeClass("animateFadeIn animateFadeOut");
    w.removeClass("slideUp slideDown").get(0).offsetHeight;
  };
  this.custom = function (F) {
    j = {
      static: F.static || false,
      bodyclose: F.bodyclose || false,
      bckclose: F.bckclose || false,
      name: F.name || "no-name",
      icntype: F.icntype || "",
      class: F.class || "",
      content: F.content || "",
      onBoxOpenStart: F.onBoxOpenStart || nada,
      onBoxOpenEnd: F.onBoxOpenEnd || nada,
      onBoxCloseStart: F.onBoxCloseStart || nada,
      onBoxCloseEnd: F.onBoxCloseEnd || nada,
      onCloseComplete: F.onCloseComplete || nada
    };
    q.removeClass("big column mini info action action-back no-action");
    q.addClass(j.class);
    q.attr("data-name", j.name);
    if (j.icntype != "") {
      q.addClass(j.icntype);
      x.find("svg use").attr("xlink:href", "#ic-" + (j.icntype == "action" ? "close" : j.icntype == "action-back" ? "navl" : "info"));
    }
    if (!j.static) {
      y.html(j.content);
    }
  };
  this.refresh = function () {
    if (notnull(j) && notnull(j.content)) {
      y.html(j.content);
    }
  };
  this.showBck = function () {
    A = false;
    v.addClass("animateFadeIn").one(animationEnd, function () {});
  };
  this.hideBck = function (F) {
    if (F === true) {
      C();
    } else {
      v.addClass("animateFadeOut").one(animationEnd, function () {
        C();
      });
    }
  };
  this.showBox = function () {
    B = false;
    j.onBoxOpenStart();
    if (z) {
      q.find(".box-tab .tab").first().trigger(pointerEventType.down.split(" ")[0]);
      deleteFocus();
    }
    w.addClass("slideUp").one(animationEnd, function () {
      if (j.bodyclose) {
        $body.on(pointerEventType.down, k.clickBck);
      }
      if (j.bckclose) {
        v.on(pointerEventType.down, k.close);
      }
      j.onBoxOpenEnd();
    });
  };
  this.hideBox = function (F, G) {
    if (j.bodyclose) {
      $body.off(pointerEventType.down, k.clickBck);
    }
    if (j.bckclose) {
      v.off(pointerEventType.down, k.close);
    }
    j.onBoxCloseStart();
    if (G === true) {
      D(F);
    } else {
      w.addClass("slideDown").one(animationEnd, function () {
        D(F);
      });
    }
  };
  this.clickBck = function (F) {
    F.preventDefault();
    if (!($(F.target).closest(g + " .box").length > 0)) {
      if (!z || (F = notnull((F = ~F.type.indexOf("touch") ? F.originalEvent : F).targetTouches) ? F.targetTouches[0] : F, Math.round(F.pageY) > 100)) {
        k.close();
      }
    }
  };
  this.isOpen = function () {
    return q.hasClass("show");
  };
  this.getName = function () {
    if (notnull(j) && notnull(j.name)) {
      return j.name;
    } else {
      return "";
    }
  };
  if (z) {
    q.find(".box-tab .tab").each(function (F) {
      $(this).on(pointerEventType.down, E);
    });
  }
  return this;
}
function checkIfPopupOpen() {
  if (notnull(boxPopup) && boxPopup.isOpen()) {
    boxPopup.close(true);
  }
}
function boxInfoCustom() {
  var h = boxInfo.$popup.find("#pop-tuto .slideshow");
  h.$box = h.find(".img-row");
  h.$btL = h.find(".bt").first();
  h.$btR = h.find(".bt").last();
  h.$nav = h.find(".pt-box");
  h.init = function () {
    for (var j, k = this, m = 0, p = 0, q = 0, v = 0, w = this.find(".bloc").length, x = 100 / w, y = 0, z = 0; z < w; z++) {
      k.$nav.append("<div class=\"pt\"></div>");
    }
    this.addListener = function () {
      document.body.addEventListener(pointerEventType.up, k.onRelease);
      document.body.addEventListener(pointerEventType.leave, k.onRelease);
      document.body.addEventListener(pointerEventType.move, k.onMove);
    };
    this.removeListener = function () {
      document.body.removeEventListener(pointerEventType.up, k.onRelease);
      document.body.removeEventListener(pointerEventType.leave, k.onRelease);
      document.body.removeEventListener(pointerEventType.move, k.onMove);
    };
    this.onPress = function (A) {
      A = "targetTouches" in A ? A.targetTouches[0] : A;
      m = A.pageX;
      k.$box.removeClass("slide");
      j = boxInfo.$popup.find(".slideshow")[0].clientWidth;
      k.removeListener();
      k.addListener();
    };
    this.onMove = function (A) {
      A = "targetTouches" in A ? A.targetTouches[0] : A;
      A = Math.round(m - A.pageX) * -1 * 100 / document.body.clientWidth;
      y = A * document.body.clientWidth / j;
      p = y / w * 0.6;
      k.$box.css({
        transform: "translate(" + (v + p) + "%,0)"
      });
    };
    this.onRelease = function () {
      k.removeListener();
      if (y < -15) {
        if (q != w - 1) {
          k.slide("left");
        } else {
          k.slide();
        }
      } else if (y > 15 && q !== 0) {
        k.slide("right");
      } else {
        k.slide();
      }
      y = p = m = 0;
    };
    this.slide = function (A) {
      k.removeListener();
      k.$box.addClass("slide");
      if (A === "left") {
        q++;
      } else if (A === "right") {
        q--;
      }
      v = -q * x;
      k.$box.css({
        transform: "translate(" + String(v) + "%,0)"
      });
      k.lightup();
    };
    this.clickLeft = function (A) {
      if (q !== 0) {
        k.slide("right");
      }
    };
    this.clickRight = function (A) {
      if (q != w - 1) {
        k.slide("left");
      }
    };
    this.lightup = function () {
      k.$nav.find(".pt").removeClass("active");
      k.$nav.find(".pt").eq(q).addClass("active");
      k.$btL.removeClass("disable");
      k.$btR.removeClass("disable");
      if (q === 0) {
        k.$btL.addClass("disable");
      }
      if (q == w - 1) {
        k.$btR.addClass("disable");
      }
    };
    this.desactive = function () {
      if (q > 0) {
        m = p = q = v = y = 0;
        k.slide();
      }
      k.$box[0].removeEventListener(pointerEventType.down, k.onPress);
      k.$btL[0].removeEventListener(pointerEventType.down, k.clickLeft);
      k.$btR[0].removeEventListener(pointerEventType.down, k.clickRight);
      k.removeListener();
    };
    this.active = function () {
      k.$box[0].addEventListener(pointerEventType.down, k.onPress);
      k.$btL[0].addEventListener(pointerEventType.down, k.clickLeft);
      k.$btR[0].addEventListener(pointerEventType.down, k.clickRight);
      k.lightup();
    };
  };
  h.init();
  return h;
}
function initPopup() {
  (boxInfo = new Popup(".box-popup#pop-info")).$slide = boxInfoCustom();
  boxParam = new Popup(".box-popup#pop-param");
  $("#pop-language .box-lang .bt").on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(function () {
      clickBtLang(h);
    });
  });
  $("#pop-follow .bt.color-facebook").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("facebook");
  });
  $("#pop-follow .bt.color-twitter").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("twitter");
  });
  $("#pop-follow .bt.color-instagram").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("instagram");
  });
  $("#pop-follow .bt.color-youtube").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("youtube");
  });
  $("#pop-follow .bt.color-tumblr").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("tumblr");
  });
  $("#pop-follow #img-shop").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("shop-all");
  });
  $("#pop-credit #bt-feedback").on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(sendFeedback);
  });
  $("#pop-credit #bt-rating").on(pointerEventType.down, function (h) {
    h.preventDefault();
    var i = isIOS || isOSX ? build.storeRateURL : build.storeURL;
    preventAction(function () {
      openURL(i);
    });
  });
  $("#pop-credit #bt-faq").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("faq");
  });
  $("#pop-credit #bt-privacy").on(pointerEventType.down, function (h) {
    h.preventDefault();
    showPP();
  });
}
function showPP(g) {}
function hidePP() {}
function refusePP() {}
function acceptPP(g) {}
function dialogGetApp(g, h) {
  if (notnull(g)) {
    g.preventDefault();
  }
  if (appBrowserDemo) {
    popupGetApp(h);
  } else if (appBrowser) {
    popupGetAppBrowser(h);
  } else {
    boxDialog.open("To access this feature you have to download the Incredibox app. Let's go? &#128273;", "&#128274; Locked", [STR("bt.sure"), STR("bt.later")], [], true);
  }
}
function popupGetApp(g) {
  var i = isIOS ? "<div class='bt-store' id='bt-getapp'><div class='bck appstore'></div></div>" : "<div class='bt with-icn' id='bt-getapp'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg><div class='txt'>Get app</div></div><div class='hitzone'></div></div>";
  var j = isIOS ? "appstore" : "store";
  i = isAndroid ? "<div class='bt-store' id='bt-getapp'><div class='bck playstore'></div></div>" : i;
  j = isAndroid ? "playstore" : j;
  boxPopup.open({
    name: "get-full-app",
    icntype: g === true ? "action-back" : "action",
    class: "big column",
    content: `
\t\t\t<div class='left'>
               <div class='img-box'></div>
            </div>
            <div class='right'>
               <div class='title'>` + STR("txt.lockedContent") + `</div>
               <div class='text'>
               \t` + STR("txt.wantAllFeature") + " " + STR("txt.easyDownload") + "<br><br>\n               \t" + STR("txt.catchyFeatures").replace("%{emoji}", "&#129321") + `
               </div>
               ` + i + "\n            </div>",
    onBoxOpenEnd: function () {
      if (g === true) {
        boxPopup.$icon.on(pointerEventType.down, popupRecok);
      } else {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      }
      boxPopup.$popup.find(".img-box").css({
        "background-image": "url(./img/demo-mockup.jpg)"
      }).addClass("fade");
      boxPopup.$popup.find("#bt-getapp").on(pointerEventType.down, function (k) {
        k.preventDefault();
        redirectTo(j);
      });
    },
    onBoxCloseStart: function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find("#bt-getapp").off();
    }
  });
}
function popupGetAppBrowser(g) {
  var j = g === true ? "action-back" : "action";
  var k = "App exclusivity";
  var l = "This feature is only available in the Incredibox App.<br>Choose your store below and access the full experience!";
  var m = "More info";
  var p = getParameterByName("lang") != null && getParameterByName("lang") != "en" ? getParameterByName("lang") + "/" : "";
  var q = domainOnline + p + "app";
  if (isIframe && window.top.i18n != null) {
    k = window.top.i18n.app_exclusivity;
    l = window.top.i18n.feature_only_inapp + "<br>" + window.top.i18n.access_full_xp;
    m = window.top.i18n.bt_more_info;
  }
  boxPopup.open({
    name: "get-full-app-browser",
    icntype: j,
    content: "\n\t\t\t<div class='title'>" + k + " &#128521;</div>\n\t\t\t<div class='text'>" + l + `</div>
\t\t\t<div class='box-bt-store'>
\t\t\t\t<a href="https://apps.apple.com/app/incredibox/id1093131935" target="_blank" class="bt-store"><div class="bck appstore"></div></a>
\t\t\t\t<a href="https://play.google.com/store/apps/details?id=com.sofarsogood.incredibox" target="_blank" class="bt-store"><div class="bck playstore"></div></a>
\t\t\t\t<a href="https://www.amazon.fr/So-Far-Good-Incredibox/dp/B07BKZCDHT/" target="_blank" class="bt-store"><div class="bck amazonstore"></div></a>
\t\t\t\t<a href="https://store.steampowered.com/app/1545450/Incredibox/" target="_blank" class="bt-store"><div class="bck steam"></div></a>
\t\t\t\t<a href="https://apps.apple.com/app/id1437906083" target="_blank" class="bt-store"><div class="bck macappstore"></div></a>
\t\t\t\t<a href="https://www.microsoft.com/fr-fr/p/incredibox/9pdjpp8scs9k?rtc=1&activetab=pivot:overviewtab" target="_blank" class="bt-store"><div class="bck windowsstore"></div></a>
\t\t\t\t<a href="https://www.incredibox.com/schools" target="_blank" class="bt-store"><div class="bck schools"></div></a>
\t\t\t</div>
\t\t\t<div id="bt-more-info" class="bt bt-light with-icn"><div class="bck"><div class="icn"><svg class="icn-svg"><use xlink:href="#ic-navr"></use></svg></div><div class="txt">` + m + "</div></div><div class=\"hitzone\"></div></div>",
    onBoxOpenEnd: function () {
      if (g === true) {
        boxPopup.$icon.on(pointerEventType.down, popupMixSaved);
      } else {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      }
      boxPopup.$popup.find("#bt-more-info").on(pointerEventType.down, function (u) {
        u.preventDefault();
        openURL(q, "_self");
      });
    },
    onBoxCloseStart: function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find("#bt-more-info").off();
    }
  });
}
function popupGeneralError(g) {
  var h = translateObj && translateObj.trad ? STR("pop.generalErrorText") : "Sorry, the app encountered a technical problem.";
  var j = translateObj && translateObj.trad ? STR("bt.ok") : "Ok";
  var k = g && g.error ? "<br>[ error: " + g.error + " ]" : "";
  var l = g && g.action ? g.action : "";
  var g = g && g.txt ? g.txt + k : h + k;
  if (l == "kill") {
    boxDialog.open(g, "&#128533;", [], [], true, true);
  } else if (l == "reload") {
    boxDialog.open(g, "&#128533;", ["Reload"], [reloadPage], true);
  } else {
    boxDialog.open(g, "&#128533;", [j], [], true);
  }
}
function popupStillHere() {
  if (boxDialog != null && boxDialog.$div.attr("data-name") != "dialogStillHere") {
    boxDialog.open(STR("pop.stillHere"), "&#128564;", [STR("bt.sure")], [clickPopupStillHere], true, false, "dialogStillHere");
  }
}
function popupInfo() {
  deleteFocus();
  boxInfo.open({
    static: true,
    bckclose: true,
    name: "popup-info",
    class: "big",
    onBoxOpenEnd: function () {
      boxInfo.$slide.active();
      createFocus("pop-tuto");
    },
    onBoxCloseStart: function () {
      deleteFocus();
      focusHistory = [];
    },
    onBoxCloseEnd: function () {
      boxInfo.$slide.desactive();
    },
    onCloseComplete: function () {
      createFocus(pageApp ? "home" : "index-select");
    }
  });
}
function popupParam() {
  deleteFocus();
  boxParam.open({
    static: true,
    bckclose: true,
    name: "popup-param",
    class: "big",
    onBoxOpenEnd: function () {
      createFocus("pop-language");
    },
    onBoxCloseStart: function () {
      deleteFocus();
      focusHistory = [];
    },
    onCloseComplete: function () {
      createFocus(pageApp ? "home" : "index-select");
    }
  });
}
function popupSwitch() {
  deleteFocus();
  boxSwitch.open({
    static: true,
    bckclose: true,
    name: "popup-switch",
    onBoxOpenEnd: function () {
      createFocus("popup-switch");
    },
    onBoxCloseStart: function () {
      deleteFocus();
      focusHistory = [];
    },
    onCloseComplete: function () {
      createFocus("home");
    }
  });
}
function popupDrag() {
  var h = STR(modeRecord ? "pop.dragDropText" : "txt.tuto1");
  boxPopup.open({
    name: "drag-and-drop",
    class: "mini",
    bodyclose: true,
    content: "<div class='title'>" + STR("pop.dragDropTitle") + "</div><div class='text'>" + h + "</div>",
    onBoxOpenStart: function () {
      boxPopup.$popup.find(".pop").append("<div id='pointe-box' class='bottom'><div id='pointe'></div></div>");
    },
    onBoxCloseEnd: function () {
      boxPopup.$popup.find("#pointe-box").remove();
      if (!modeRecord) {
        storage.setItem("popupDragViewed", "viewed");
      }
    }
  });
}
function popupShort() {
  boxPopup.open({
    name: "too-short",
    icntype: "info",
    class: "mini",
    bodyclose: true,
    content: "\n\t\t\t<div class='title'>" + STR("pop.toShortTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.toShortText").split("%{minimum_time}").join(app.recmintime) + "</div>"
  });
}
function popupBonusPlaying() {
  boxPopup.open({
    name: "bonus-playing",
    icntype: "info",
    class: "mini",
    bodyclose: true,
    content: "\n\t\t\t<div class='title'>" + STR("pop.bonusPlayingTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.bonusPlayingText") + "</div>"
  });
}
function popupFindPreviousBonus() {
  boxPopup.open({
    name: "find-previous-bonus",
    icntype: "info",
    class: "mini",
    bodyclose: true,
    content: "\n\t\t\t<div class='title'>" + STR("pop.bonusFindPreviousTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.bonusFindPreviousText") + "</div>"
  });
}
function popupBonusUnlocked(g) {
  var i;
  if ((!modeReplay && !modeRandom || g) && (i = "v" + appVersion + "-popup-bonus-unlock", isnull(storage.getItem(i)) || g)) {
    boxPopup.open({
      name: "bonus-unlocked",
      class: "mini",
      bodyclose: true,
      content: "\n\t\t\t\t\t<div class='title'>" + STR("pop.bonusUnlockTitle") + "</div>\n\t\t\t\t\t<div class='text'>" + STR("pop.bonusUnlockText") + "</div>\n\t\t\t\t",
      onBoxOpenStart: function () {
        boxPopup.$popup.find(".pop").append("<div id='pointe-box' class='top'><div id='pointe'></div></div>");
        calcPointePosX(1);
      },
      onBoxCloseEnd: function () {
        storage.setItem(i, "ok");
        boxPopup.$popup.find("#pointe-box").remove();
      }
    });
  }
}
function popupBonusFindNext(g) {
  var i;
  if ((!modeReplay && !modeRandom || g) && (i = "v" + appVersion + "-popup-bonus-next", isnull(storage.getItem(i)) || g)) {
    if (isToolbarOpen) {
      closeTool();
    }
    boxPopup.open({
      name: "find-next-bonus",
      class: "mini",
      bodyclose: true,
      content: "\n\t\t\t\t\t<div class='title'>" + STR("pop.bonusFindNextTitle") + "</div>\n\t\t\t\t\t<div class='text'>" + STR("pop.bonusFindNextText") + "</div>\n\t\t\t\t",
      onBoxOpenStart: function () {
        boxPopup.$popup.find(".pop").append("<div id='pointe-box'><div id='pointe'></div></div>");
      },
      onBoxCloseEnd: function () {
        storage.setItem(i, "ok");
        boxPopup.$popup.find("#pointe-box").remove();
      }
    });
  }
}
function calcPointePosX(g) {
  var i = document.querySelector("#pop-popup .pop").getBoundingClientRect();
  var g = document.querySelector("#bt-bonus-" + g).getBoundingClientRect();
  var g = g.left - i.left + g.width / 2;
  g = (g = g < 30 ? 30 : g) > i.width - 30 ? i.width - 30 : g;
  document.getElementById("pointe").style.left = g + "px";
}
function popupRecok() {
  checkTimeRecok = getTime();
  deleteFocus();
  var h = "\n\t\t<div class='bt bt-haut retry'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-reset'></use></svg></div><div class='txt'>" + STR("bt.retry") + "</div><div class='hitzone'></div></div>\n\t\t<div class='bt bt-haut replay'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='txt'>" + STR("bt.replay") + "</div><div class='hitzone'></div></div>\n\t\t<div class='bt bt-haut save'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-edit'></use></svg></div><div class='txt'>" + STR("bt.save") + "</div><div class='hitzone'></div></div>";
  if (appBrowserDemo) {
    h = "\n\t\t\t<div class='bt bt-haut replay'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='txt'>" + STR("bt.replay") + "</div><div class='hitzone'></div></div>\n\t\t\t<div class='bt bt-haut share'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='txt'>" + STR("bt.share") + "</div><div class='hitzone'></div></div>\n\t\t\t<div class='bt bt-haut download'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='txt'>Get MP3</div><div class='hitzone'></div></div>";
  }
  boxPopup.open({
    name: "record-complete",
    icntype: "action",
    content: "\n\t\t\t<div class='title'>" + STR("pop.recOkTitle") + `</div>
\t\t\t<div class='content'>
\t\t\t\t<div class='box-bt-haut'>
\t\t\t\t\t` + h + `
\t\t\t\t</div>\t
\t\t\t</div>`,
    onBoxOpenEnd: function () {
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      boxPopup.$popup.find(".bt.replay").on(pointerEventType.down, function (j) {
        j.preventDefault();
        preventAction(clickReplayMix);
      });
      if (appBrowserDemo) {
        boxPopup.$popup.find(".bt.share").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(function () {
            popupGetApp(true);
          });
        });
        boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(function () {
            popupGetApp(true);
          });
        });
      } else {
        boxPopup.$popup.find(".bt.retry").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(clickRetryMix);
        });
        boxPopup.$popup.find(".bt.save").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(clickSaveMix);
        });
      }
      createFocus("popup-record-complete");
      unlock();
    },
    onBoxCloseStart: function () {
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    onBoxCloseEnd: function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    onCloseComplete: function () {
      removeInFocusHistory("popup-record-complete");
      if (!modeReplay) {
        createFocus("toolbar");
      }
    }
  });
}
var checkTimeRecok = 0;
function canIclickRecok() {
  return getTime() - checkTimeRecok > 600;
}
function clickRetryMix() {
  if (canIclickRecok()) {
    boxPopup.close();
    callAd("next", "retry-mix", function () {
      TweenMax.delayedCall(0.2, startRecordMode);
    });
  }
}
function clickReplayMix() {
  if (canIclickRecok()) {
    boxPopup.close();
    prepareReplayMode();
    startReplayMode();
    saveGA("mix", "replay");
  }
}
function clickSaveMix() {
  popupForm();
}
function popupForm() {
  boxPopup.open({
    name: "save-form",
    icntype: "action-back",
    content: function () {
      var h = "\n\t\t\t<div class='title'>" + STR("pop.formTitle") + `</div>
\t\t\t<div class='content'>
\t\t\t\t<form action='javascript:validFormMix()' method='post' target='_self' autocomplete='off'>
\t\t\t\t\t<div class='formzone'>
\t\t\t\t\t\t<div class='formline ic-name'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-user-mini'></use></svg></div><input type='text' id='input-name' placeholder='` + STR("txt.inputName") + "' value='" + user.djname + "' maxlength='26' autocorrect='off' spellcheck='false'/></div>\n\t\t\t\t\t\t<div class='formline ic-title'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-note-mini'></use></svg></div><input type='text' id='input-title' placeholder='" + STR("txt.inputTitle") + "' value='' maxlength='26' autocorrect='off' spellcheck='false'/></div>\n\t\t\t\t\t\t<div class='formline ic-dedi'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div><input type='text' id='input-dedi' placeholder='" + STR("txt.dedicatedTo").split("%{name}").join("...") + "' value='' maxlength='26' autocorrect='off' spellcheck='false'/></div>";
      if (!appBrowser) {
        h += `<div class='formline ic-private'>
\t\t\t\t\t\t\t<div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div>
\t\t\t\t\t\t\t<div class='bt-onofftext active'>
\t\t\t\t\t\t\t\t<div class='slider'></div>
\t\t\t\t\t\t\t\t<div class='txtbox'>
\t\t\t\t\t\t\t\t\t<div class='label'>` + STR("bt.private") + "</div>\n\t\t\t\t\t\t\t\t\t<div class='label'>" + STR("bt.public") + `</div>
\t\t\t\t\t\t\t\t</div>
\t\t\t\t\t\t\t</div>
\t\t\t\t\t\t</div>`;
      }
      h += `</div>
\t\t\t\t\t<div class='btzone'>
\t\t\t\t\t\t<div class='bt bt-round bt-big valid'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-check'></use></svg></div><div class='hitzone'></div></div>
\t\t\t\t\t</div>
\t\t\t\t\t<input type='submit' style='visibility:hidden;position:absolute'/><div class='clear'></div>
\t\t\t\t</form>
\t\t\t</div>`;
      if (appBrowser && !appBrowser) {
        h += "<div style='margin-top: 25px; color:#777; font-size:14px; line-height:20px;'>" + STR("pop.dontUseName") + " &#128521;</div>";
      }
      return h;
    },
    onBoxOpenEnd: function () {
      var h;
      var i;
      createFocus("popup-save-form");
      boxPopup.$icon.on(pointerEventType.down, popupRecok);
      boxPopup.$popup.find(".bt.valid").on(pointerEventType.down, function (j) {
        j.preventDefault();
        preventAction(clickBtValidFormMix);
      });
      if (window.cordova && !isIOSMac) {
        boxPopup.$popup.find(".formline:not(.ic-private)").on(pointerEventType.down, function (j) {
          boxPopup.$popup.find(".formline").off(pointerEventType.down);
          Spinner.add($(this).find(".icn-box"));
        });
        boxPopup.$popup.find(".formline input").on("focus", function () {
          boxPopup.$popup.find(".formline input").off("focus");
          Spinner.reset();
        });
      }
      if (!(appBrowser || isSafeMode())) {
        h = boxPopup.$popup.find(".formline.ic-private .bt-onofftext");
        i = boxPopup.$popup.find(".formline.ic-private svg use");
        h.on(pointerEventType.down, function (j) {
          j.preventDefault();
          if (h.hasClass("active")) {
            h.removeClass("active");
            i.attr("xlink:href", "#ic-lock-mini");
          } else {
            h.addClass("active");
            i.attr("xlink:href", "#ic-view-mini");
          }
        });
      }
    },
    onBoxCloseStart: function () {
      removeInFocusHistory("popup-save-form");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
      boxPopup.$popup.find(".bt-onofftext").off();
      boxPopup.$popup.find(".formline").off();
      boxPopup.$popup.find(".formline input").off();
      boxPopup.$popup.find("input").off();
      if (window.cordova) {
        blurAll();
      }
    }
  });
}
var androidKB;
var translateObj;
var defaultLanguage;
var currentLanguage;
var formProcessing = false;
function clickBtValidFormMix() {
  validFormMix();
}
function validFormMix() {
  var h;
  var j;
  var k;
  var m;
  var q;
  var v;
  var w;
  var x;
  var y;
  var z;
  var A;
  function B() {
    TweenMax.delayedCall(1, function () {
      Spinner.reset();
      popupMixSaved();
    });
  }
  if (!(boxPopup.$popup.find(".formzone .formline input").hasClass("focused") || formProcessing)) {
    formProcessing = true;
    lock();
    h = appBrowser || isSafeMode() || !boxPopup.$popup.find(".formzone .bt-onofftext").hasClass("active");
    j = boxPopup.$popup.find(".formzone #input-name");
    k = boxPopup.$popup.find(".formzone #input-title");
    m = boxPopup.$popup.find(".formzone #input-dedi");
    q = j.val().substr(0, 26);
    v = k.val().substr(0, 26);
    w = m.val().substr(0, 26);
    q = cleanInputText(q);
    v = cleanInputText(v);
    w = cleanInputText(w);
    z = regexList.classic;
    x = q.replace(/ /g, "");
    y = v.replace(/ /g, "");
    A = w.replace(/ /g, "");
    if (z.test(x)) {
      invalidField(j);
    } else if (z.test(y)) {
      invalidField(k);
    } else if (z.test(A)) {
      invalidField(m);
    } else if (x === "") {
      invalidField(j);
    } else if (y === "") {
      invalidField(k);
    } else {
      deleteFocus();
      boxPopup.$popup.find(".formzone input").blur();
      z = {
        mymix: true,
        online: false,
        name: ucwords(q),
        title: ucwords(v),
        dedi: ucwords(w),
        app: app.version,
        datedb: getDateNow(),
        link: getUniqLink(),
        private: h ? 1 : 0,
        nbview: 0,
        nblike: 0,
        xml: trim(recordMix.getXML())
      };
      A = boxPopup.$popup.find(".bt.valid");
      Spinner.add(A);
      recordMix.setData(z);
      localMixObject.saveMix(z);
      mixToShare = z;
      setUserInfo({
        djname: ucwords(q)
      });
      delete XHRmemotime.mymix;
      if (hasNetwork) {
        callAd("next", "save-mix");
        if (appBrowser) {
          saveMixDB(z, B, function () {
            boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
            Spinner.reset();
            formProcessing = false;
            unlock();
          });
        } else {
          saveMixDB(z, B);
        }
      } else if (appBrowser) {
        Spinner.reset();
        formProcessing = false;
        unlock();
        boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], []);
      } else {
        B();
      }
    }
  }
}
function invalidField(g) {
  g.addClass("invalid").one(animationEnd, function (h) {
    $(h.target).removeClass("invalid");
  });
  formProcessing = false;
  unlock();
}
function VKBopen(g) {
  if (window.cordova && isAndroid && boxPopup.isOpen() && boxPopup.$popup.attr("data-name") == "save-form") {
    g = g.keyboardHeight || document.body.clientHeight * 0.7;
    (androidKB = new FocusKeyboardAndroid()).init(g);
  }
}
function VKBclose() {
  if (window.cordova && isAndroid && boxPopup.isOpen() && boxPopup.$popup.attr("data-name") == "save-form" && androidKB) {
    androidKB.kill();
    androidKB = null;
  }
}
function FocusKeyboardAndroid() {
  var h;
  var j;
  var k;
  function l(p) {
    m(p.target);
  }
  function m(p) {
    var p = p.getBoundingClientRect();
    var q = p.top;
    var p = p.height;
    var q = Math.round(j - (q + p / 2));
    TweenMax.to(boxPopup.$popup, 0.3, {
      scrollTo: {
        y: "-=" + q
      },
      ease: Quad.easeInOut,
      overwrite: true
    });
  }
  this.init = function (p) {
    h = p;
    j = (document.body.clientHeight - h) / 2;
    (k = document.querySelectorAll("#pop-popup[data-name=save-form] input[type=text]")).forEach(function (r) {
      r.addEventListener("focus", l);
      if (document.activeElement == r) {
        m(r);
      }
    });
    boxPopup.$popup.addClass("VKBopen");
    boxPopup.$popup.find(".bac").css({
      height: "calc(100% + " + h + "px)"
    });
    window.cordova;
  };
  this.kill = function () {
    k.forEach(function (p) {
      p.removeEventListener("focus", l);
    });
    TweenMax.to(boxPopup.$popup, 0, {
      scrollTo: {
        y: 0
      },
      overwrite: true
    });
    boxPopup.$popup.removeClass("VKBopen");
    boxPopup.$popup.find(".bac").css({
      height: "100%"
    });
    window.cordova;
  };
}
function blurAll() {
  if (notnull(document.activeElement)) {
    document.activeElement.blur();
  }
}
function listenFocus() {
  var g = false;
  if (isIOS) {
    document.addEventListener("focusin", function () {
      g = true;
    });
    document.addEventListener("focusout", function () {
      g = false;
      // TOLOOK
      setTimeout(function () {
        if (!g) {
          window.scrollTo(0, 0);
        }
      }, 250);
    });
  }
}
function popupConvertMix() {
  var h = "action";
  var i = appBrowserSchool && miniPlayer ? mixToWatch : mixToShare;
  if (!($mixlist.hasClass("show") || appBrowserSchool)) {
    h = "action-back";
  }
  boxPopup.open({
    name: "convert-mix",
    icntype: h,
    content: "\n\t\t\t<div class='title'>" + STR("pop.convertMixTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.convertMixText") + `</div>
\t\t\t<div class='content'>
\t\t\t\t<div id='convert-loader-box' class='progress-box'><div class='progress-bar'></div></div>
\t\t\t\t<a class='bt with-icn color download' id='bt-save-file'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg><div class='txt'>` + STR("bt.saveFile") + `</div></div><div class='hitzone'></div></a>
\t\t\t\t<div class='spinner-box spin'><svg class='icn-svg col-version'><use xlink:href='#ic-loader'></use></svg></div>
\t\t\t</div>`,
    onBoxOpenEnd: function () {
      createFocus("popup-convert-mix");
      boxPopup.$icon.on(pointerEventType.down, function () {
        if (h == "action") {
          boxPopup.close();
        } else {
          popupMixSaved();
        }
      });
      if (notnull(i) && converterCanRun()) {
        startConvert(i, boxPopup.$popup);
      } else {
        popupGeneralError({
          error: "converter mix"
        });
      }
    },
    onBoxCloseStart: function () {
      removeInFocusHistory("popup-convert-mix");
      removeInFocusHistory("popup-convert-mix-ready");
      createFocus("playlist-line-open");
      boxPopup.$icon.off();
      stopConvert();
    }
  });
}
function popupMixSaved() {
  formProcessing = false;
  boxPopup.open({
    name: "mix-saved",
    icntype: "action",
    content: function () {
      var h = appBrowser ? STR("pop.shareMixSaved") : STR("pop.shareMixSavedPlaylist") + "<br>" + STR("pop.shareShareTop50");
      var h = mixToShare.private == 1 ? h.split("<br>")[0] : h;
      var i = "";
      if (!appBrowserSchool) {
        i = (i += "<div class='bt bt-haut link'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='txt'>" + STR("bt.link") + "</div><div class='hitzone'></div></div>") + ("<div class='bt bt-haut share color-blue'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='txt'>" + STR("bt.share") + "</div><div class='hitzone'></div></div>");
      }
      if (converterCanRun()) {
        i += "<div class='bt bt-haut download hoverLocked'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='txt'>" + STR("bt.exportFile") + "</div><div class='ic-locked'><svg class='icn-svg'><use xlink:href='#ic-lock'></use></svg></div><div class='hitzone'></div></div>";
      }
      i += "<div class='bt bt-haut mixlist color hoverLocked'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-mixlist'></use></svg></div><div class='txt'>" + STR("bt.myMix") + "</div><div class='ic-locked'><svg class='icn-svg'><use xlink:href='#ic-lock'></use></svg></div><div class='hitzone'></div></div>";
      return "\n\t\t\t\t<div class='title'>" + STR("pop.shareTitle") + "</div>\n\t\t\t\t<div class='text'>" + h + `</div>
\t\t\t\t<div class='content'>
\t\t\t\t\t<div class='box-bt-haut'>` + i + "</div>\n\t\t\t\t</div>";
    },
    onBoxOpenEnd: function () {
      createFocus("popup-mix-saved");
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      if (boxPopup.$popup.find(".bt.link").length) {
        boxPopup.$popup.find(".bt.link").on(pointerEventType.down, function (h) {
          var i = $(this);
          preventAction(function () {
            clickBtCopyLink(i);
          });
        });
      }
      if (boxPopup.$popup.find(".bt.mixlist").length) {
        if (appBrowser && !appBrowserSchool) {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (h) {
            dialogGetApp(h, true);
          });
        } else if (appBrowser && appBrowserSchool) {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (h) {
            callParentWindow("clickBtMixlist");
          });
        } else {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (h) {
            preventAction(clickBtGoToMixlist);
          });
        }
      }
      if (boxPopup.$popup.find(".bt.download").length) {
        if (appBrowser && !appBrowserSchool) {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function (h) {
            dialogGetApp(h, true);
          });
        } else if (appBrowser && appBrowserSchool) {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function () {
            callParentWindow("exportMP3");
          });
        } else {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function () {
            preventAction(popupConvertMix);
          });
        }
      }
      boxPopup.$popup.find(".bt.share").on(pointerEventType.down, function (h) {
        var i = $(this);
        preventAction(function () {
          clickBtShareGlobal(i);
        });
      });
      unlock();
    },
    onBoxCloseStart: function () {
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    onCloseComplete: function () {
      if (onGame) {
        createFocus("toolbar");
      }
      mixToShare = {};
    }
  });
}
function popupGlobalShare() {
  var g = $mixlist.isOpen() ? "action" : "action-back";
  boxPopup.open({
    name: "global-share",
    icntype: g,
    class: miniPlayer ? "mini" : "",
    content: "\n\t\t\t<div class='title'>" + STR("bt.share") + `</div>
\t\t\t<div class='content'>
\t\t\t\t<div class='box-bt-haut'>
\t\t\t\t\t<div class='bt bt-haut mail'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-mail'></use></svg></div><div class='txt'>Mail</div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-haut color-facebook'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-facebook'></use></svg></div><div class='txt'>Facebook</div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-haut color-twitter color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-twitter'></use></svg></div><div class='txt'>Twitter</div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-haut link color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='txt'>` + STR("bt.link") + `</div><div class='hitzone'></div></div>
\t\t\t\t</div>
\t\t\t</div>`,
    onBoxOpenEnd: function () {
      createFocus("popup-global-share");
      boxPopup.$popup.find(".bt.mail").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(function () {
          shareMix("mail");
        });
      });
      boxPopup.$popup.find(".bt.color-facebook").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(function () {
          shareMix("facebook");
        });
      });
      boxPopup.$popup.find(".bt.color-twitter").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(function () {
          shareMix("twitter");
        });
      });
      boxPopup.$popup.find(".bt.link").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(function () {
          shareMix("clipboard");
        });
      });
      if (g == "action") {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      } else {
        boxPopup.$icon.on(pointerEventType.down, popupMixSaved);
      }
      unlock();
    },
    onBoxCloseStart: function () {
      removeInFocusHistory("popup-global-share");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    onBoxCloseEnd: function () {
      createFocusFromHistory();
      Spinner.reset();
    }
  });
}
function popupEmail() {
  boxPopup.open({
    name: "email-form",
    icntype: "action-back",
    class: miniPlayer ? "mini" : "",
    content: "\n\t\t\t<div class='title'>" + STR("pop.formEmailTitle") + `</div>
\t\t\t<div class='content'>
\t\t\t\t<form action='javascript:clickBtValidFormEmail()' method='post' target='_self' autocomplete='off'>
\t\t\t\t\t<div class='formzone'>
\t\t\t\t \t\t<div class="formline ic-name"><div class="icn-box"><svg class="icn-svg"><use xlink:href="#ic-user-mini"></use></svg></div><input type="text" id="input-name" placeholder="` + STR("txt.inputEmailSender") + "\" value=\"" + (notnull(user.djname) ? user.djname : "") + "\" maxlength=\"26\" autocorrect=\"off\" spellcheck=\"false\"/></div>\n\t\t\t\t\t\t<div class='formline ic-email'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-at-mini'></use></svg></div><input type='email' id='input-email' placeholder='" + STR("txt.inputEmailRecipient") + `' value='' maxlength='254' autocorrect='off' spellcheck='false'/></div>
\t\t\t\t\t</div>
\t\t\t\t\t<div class='btzone'>
\t\t\t\t\t\t<div class='bt bt-round bt-big valid'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-check'></use></svg></div><div class='hitzone'></div></div>
\t\t\t\t\t</div>
\t\t\t\t\t<input type='submit' style='visibility:hidden;position:absolute'/><div class='clear'></div>
\t\t\t\t</form>
\t\t\t</div>`,
    onBoxOpenEnd: function () {
      createFocus("popup-email-form");
      boxPopup.$icon.on(pointerEventType.down, popupGlobalShare);
      boxPopup.$popup.find(".bt.valid").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(clickBtValidFormEmail);
      });
    },
    onBoxCloseStart: function () {
      removeInFocusHistory("popup-email-form");
      deleteFocus();
      boxPopup.$icon.off();
      blurAll();
    },
    onBoxCloseEnd: function () {
      formProcessing = false;
    }
  });
}
function clickBtValidFormEmail() {
  var h;
  var j;
  var k;
  var m;
  var p;
  var q;
  var v;
  var w;
  var x;
  var y;
  if (!(boxPopup.$popup.find(".formzone .formline input").hasClass("focused") || (h = domainOnline + "mix/" + mixToShare.link, j = mixToShare.title, k = mixToShare.name, formProcessing))) {
    formProcessing = true;
    lock();
    m = boxPopup.$popup.find(".formzone #input-name");
    p = boxPopup.$popup.find(".formzone #input-email");
    q = m.val().substr(0, 26);
    v = p.val().substr(0, 254);
    q = cleanInputText(q, m);
    v = trim(v);
    y = q.split(" ").join("");
    w = v.toLowerCase();
    if (y == "" || regexList.classic.test(y)) {
      invalidField(m);
    } else if (w != "" && regexList.email.test(w)) {
      boxPopup.$popup.find(".formzone input").blur();
      blurAll();
      x = boxPopup.$popup.find(".bt.valid");
      Spinner.add(x);
      if (hasNetwork) {
        (y = {}).expediteur = q;
        y.email = v;
        y.type = "composition";
        y.djName = k;
        y.title = j;
        y.link = h;
        y.src = window.electron ? "electron" : window.cordova ? "cordova" : "browser";
        y.lang = currentLanguage.split("-")[0];
        xhr("POST", domainOnline + "ph3/send-mail.php", y, function (z) {
          if (z.state == "success") {
            Spinner.reset();
            x.addClass("success");
            TweenMax.delayedCall(0.6, function () {
              unlock();
              popupGlobalShare();
            });
          } else {
            boxDialog.open(STR("pop.shareErrorText"), STR("pop.shareErrorTitle"), [STR("bt.ok")], [function () {
              Spinner.reset();
            }]);
            formProcessing = false;
            unlock();
          }
        }, function (z) {
          formProcessing = false;
          boxDialog.open(STR("pop.shareErrorText"), STR("pop.shareErrorTitle"), [STR("bt.ok")], [function () {
            Spinner.reset();
          }]);
          unlock();
        });
      } else {
        formProcessing = false;
        boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
          Spinner.reset();
        }]);
        unlock();
      }
    } else {
      invalidField(p);
    }
  }
}
function saveMixDB(g, h, i) {
  var k = i || h;
  var i = getAppData();
  i.mix = g;
  $.ajax({
    type: "POST",
    url: domainOnline + "ph3/save-mix-db.php",
    data: i,
    dataType: "json",
    crossdomain: true,
    success: function (l) {
      if (l.state == "success") {
        g.online = true;
        g.link = l.link;
        g.id = l.id;
        g.datedb = l.datedb;
        localMixObject.saveMix(g);
        delete XHRmemotime.latest;
        if (h) {
          h();
        }
      } else {
        k();
        saveGA("mix", "save_db_failed");
      }
    },
    error: function (l) {
      k();
    }
  });
}
function clickBtShareGlobal(g) {
  checkIfMixSavedThenShare("global", g || $(this));
}
function clickBtCopyLink(g) {
  checkIfMixSavedThenShare("clipboard", g || $(this));
}
function clickBtGoToMixlist() {
  backToHome(function () {
    openPlaylist("mixlist", true, true);
  });
}
function checkIfMixSavedThenShare(g, h) {
  lock();
  deleteFocus();
  Spinner.add(h);
  if (hasNetwork) {
    if (mixToShare.mymix !== true || mixToShare.online) {
      shareMix(g);
    } else {
      saveMixDB(mixToShare, function () {
        $scrollbox.find(".line[data-key='mix-" + mixToShare.link + "']").removeClass("isoffline");
        shareMix(g);
      }, function (j) {
        boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")], []);
        Spinner.reset();
        unlock();
      });
    }
  } else {
    h = $mixlist.hasClass("show") ? STR("pop.noCoShareText") : STR("pop.noCoShareText") + " " + STR("pop.noCoShareText2");
    boxDialog.open(h, STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
    unlock();
  }
}
function shareMix(g, h) {
  if (h == null && window.cordova && window.plugins && window.plugins.socialsharing) {
    TweenMax.delayedCall(0.5, shareMix, [g, true]);
    return false;
  }
  if (g != "global") {
    Spinner.reset();
  }
  var h = mixToShare.name;
  var k = mixToShare.title;
  var q = domainOnline + "mix/" + mixToShare.link;
  var v = domainOnline + "img/share/share-v" + app.version + "-en@2x.png";
  var w = domainOnline + "img/share/share-v" + app.version + "-en.png";
  var x = STR("pop.shareSubject");
  var h = STR("pop.sharePresentMix").split("%{name}").join(h).split("%{title}").join(k);
  var k = STR("pop.shareTextLike");
  var y = STR("pop.shareTextBeCool");
  var z = h + "\n" + q + `

` + k + `

---------------------------

Download the app: https://www.incredibox.com/info/store`;
  var k = y + " #incredibox";
  var A = h + " " + y + " #incredibox";
  var B = "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(q);
  var C = "https://twitter.com/intent/tweet?text=" + encodeURIComponent(k) + "&url=" + encodeURIComponent(q) + "&hashtags=musicApp,beatbox,pumpItUp&related=incredibox_%3AThe%20Incredibox%20official%20Twitter%20account!";
  switch (g) {
    case "mail":
      if (window.cordova && window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareViaEmail(z, x, null, null, null, [w], E, F);
      } else {
        popupEmail();
      }
      break;
    case "facebook":
      if (window.electron) {
        openURL(B);
      } else {
        windowPopup(B, 560, 350, true);
      }
      break;
    case "twitter":
      if (window.electron) {
        openURL(C);
      } else {
        windowPopup(C, 560, 350, true);
      }
      break;
    case "clipboard":
      if (window.electron) {
        electron.ipc.clipboard(q).then(() => D()).catch(G => popupGeneralError({
          error: "clipboard"
        }));
      } else if (window.cordova && cordova.plugins && cordova.plugins.clipboard) {
        cordova.plugins.clipboard.copy(q, D, F);
      } else {
        copyToClipboard(q);
        D(q);
      }
      break;
    case "global":
      if (window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareWithOptions({
          message: A,
          subject: x,
          url: q,
          files: [v]
        }, G => {}, G => {
          F(G);
        });
        E();
      } else {
        popupGlobalShare();
        Spinner.reset();
      }
      break;
    case "download":
      openURL(domainOnline + "file/" + mixToShare.link);
      E();
  }
  function D(G) {
    var H;
    if (appBrowser) {
      G = "<div class='formline'><div class='selectarea'>" + G.replace("https://www.", "") + "</div></div>";
      H = isIOS ? "" : STR("pop.shareClipboard");
      boxDialog.open(G + H, STR("bt.link"), [STR("bt.ok")], [], false, false, "dialog-clipboard");
    } else {
      boxDialog.open(STR("pop.shareClipboard"), STR("pop.infoTitle"), [STR("bt.ok")], [], false, false, "dialog-clipboard");
    }
    E();
    unlock();
  }
  function E(G) {
    Spinner.reset();
    unlock();
  }
  function F(G) {
    popupGeneralError({
      txt: STR("pop.shareErrorText"),
      error: G
    });
    Spinner.reset();
    unlock();
  }
}
function sendFeedback() {
  var h = "feedback@incredibox.com";
  var i = "App feedback";
  var j = "<br><br>----------";
  if (window.cordova) {
    i += " - " + (appleModel[device.model] || device.model) + " " + device.platform + " " + device.version + (isIOSMac ? " (iOS on Mac)" : "");
  } else {
    i += " - " + machine.deviceModel + " " + machine.osName + " " + machine.osVersion;
  }
  j = (j = (j = (j = (j = (j = (j = (j = (j = (j = (j = (j += "<br>Store : " + build.store) + "<br>From : " + ucwords(build.platform) + " - " + (app !== undefined ? app.name + " - v" + app.version : "index")) + "<br>Version : " + build.version) + "<br>DJ Name : " + user.djname) + "<br>Ids : " + machine.uuid + " - " + user.guid + (trustAppMobile ? " - " + device.serial : "")) + "<br>Lang : " + user.lang + " (" + currentLanguage + ")") + "<br>Device : " + machine.deviceModel + " - " + document.body.clientWidth + "x" + document.body.clientHeight + " - " + (window.devicePixelRatio || 1)) + "<br>System : " + machine.osName + " - " + machine.osVersion + (isIOSMac ? " - iOS on Mac" : "")) + "<br>WV : " + machine.browserFullVersion) + "<br>Anime size " + animSize + " - cnv density " + cnvPXD + "<br>fileExt : " + sndExt + " " + vidExt) + "<br>Evt : " + pointerEventType.down) + "<br>SpRate : " + (window.audioCtx && window.audioCtx.sampleRate ? audioCtx.sampleRate : "") + " - " + (window.audioCtx && window.audioCtx.baseLatency ? audioCtx.baseLatency : "");
  if (window.cordova && window.plugins && window.plugins.socialsharing) {
    j = (j = (j += "<br>----------") + "<br>App.device : " + (appleModel[device.model] || device.model) + " - " + device.manufacturer) + "<br>App.system : " + device.platform + " - " + device.version;
    window.plugins.socialsharing.shareViaEmail("<br><br><br><i>" + j + "</i>", i, h, null, null, [], () => {}, k => {
      popupGeneralError({
        txt: STR("pop.shareErrorText"),
        error: k
      });
    });
  } else {
    j = j.replace(/<br>/g, "\r\n");
    h = "mailto:" + h + "?subject=" + i + "&body=" + encodeURIComponent(j);
    if (window.electron) {
      electron.ipc.openURL(h);
    } else {
      window.location.href = h;
    }
  }
}
var languageListe = {
  "en-US": "English",
  fr: "Français",
  es: "Español",
  "pt-BR": "Português",
  it: "Italiano",
  de: "Deutsch",
  no: "Norsk",
  pl: "Polski",
  ru: "Русский",
  ar: "العربية",
  tr: "Türkçe",
  ko: "한국어",
  ja: "日本語",
  "zh-CN": "简体中文",
  "zh-TW": "繁體中文",
  "hi-IN": "हिंदी",
  "bn-IN": "বাংলা",
  "ta-IN": "தமிழ்",
  "te-IN": "తెలుగు",
  th: "ไทย",
  vi: "Tiếng Việt",
  id: "Indonesia",
  ms: "Melayu"
};
function initLanguage() {
  currentLanguage = defaultLanguage = appCN ? "zh-CN" : "en-US";
  var g;
  var h = "";
  for (g in languageListe) {
    h += "<div class=\"bt bt-soft\" id=\"bt-lang-" + g + "\"><div class=\"bck\"><div class=\"txt\">" + languageListe[g] + "</div></div><div class=\"hitzone\"></div></div>";
  }
  $("#pop-language .box-lang").append(h);
}
function checkLanguageCode(g) {
  var i = g.toLowerCase();
  if (i.indexOf("en-") > -1) {
    return "en-US";
  } else if (i.indexOf("pt-") > -1) {
    return "pt-BR";
  } else if (i.indexOf("fr-") > -1) {
    return "fr";
  } else if (i.indexOf("es-") > -1) {
    return "es";
  } else if (i.indexOf("it-") > -1) {
    return "it";
  } else if (i.indexOf("de-") > -1) {
    return "de";
  } else if (i.indexOf("cn") > -1) {
    return "zh-CN";
  } else if (i == "zh-hant" || i == "zh-hk" || i == "zh-tw") {
    return "zh-TW";
  } else if (i == "zh-hans" || i == "zh-cn") {
    return "zh-CN";
  } else if (i == "en") {
    return "en-US";
  } else if (i == "pt") {
    return "pt-BR";
  } else if (i == "zh") {
    return "zh-CN";
  } else if (i == "hi") {
    return "hi-IN";
  } else if (i == "bn") {
    return "bn-IN";
  } else if (i == "ta") {
    return "ta-IN";
  } else if (i == "te") {
    return "te-IN";
  } else if (i == "nb" || i == "nn") {
    return "no";
  } else {
    return g;
  }
}
function debugLanguage() {}
function changeDomTxt() {
  var h;
  var i = translateObj.trad;
  $("#pop-info .tab#tab-tuto .txt").html(i.bt.tuto);
  $("#pop-info #bloc-tuto1 .txt span").html(i.txt.tuto1);
  $("#pop-info #bloc-tuto2 .txt span").html(i.txt.tuto2);
  $("#pop-info #bloc-tuto3 .txt span").html(i.txt.tuto3);
  $("#pop-info #bloc-tuto4 .txt span").html(i.txt.tuto4);
  $("#pop-info #bloc-tuto5 .txt span").html(i.txt.tuto5);
  $("#pop-info .tab#tab-credit .txt").html(i.bt.credit);
  $("#pop-info #pop-credit #copy").html(i.txt.copyright);
  $("#pop-info #pop-credit #team").html("<div class='box-team'>Allan Durand<br>Romain Delambily<br>Incredible Polo</div><div class='box-team'>" + i.txt.team + "</div>");
  $("#pop-info #pop-credit .title").html(i.txt.stayTuned);
  $("#pop-info #pop-credit #bt-feedback .txt").html(i.bt.feedback);
  $("#pop-info #pop-credit #bt-rating .txt").html(i.bt.rate);
  $("#pop-info #pop-credit #bt-privacy .txt").html(i.bt.privacy);
  $("#pop-info .tab#tab-follow .txt").html(i.bt.follow);
  $("#pop-info #pop-follow .title#git").html(i.bt.git);
  $("#pop-info #pop-follow .title#shop").html(i.txt.visitShop);
  $("#pop-param .tab#tab-language .txt").html(i.txt.language);
  $("#pop-param .tab#tab-setting .txt").html(i.bt.param);
  $("#pop-param #pop-setting #param-dark .label").html(i.txt.modeDark);
  $("#pop-param #pop-setting #param-safe .label").html(i.txt.modeSafe);
  $("#pop-param #pop-setting #param-reset .label").html(i.txt.resetBonus);
  $("#pop-param #pop-setting #param-reset .bt .txt").html(i.bt.reset);
  $("#pop-param #pop-setting #param-recover .label").html(i.txt.recoverAllMix);
  $("#pop-param #pop-setting #param-recover .bt .txt").html(i.bt.recover);
  $("#pp-box #bt-ppaccept .txt").html(i.bt.accept);
  $("#pp-box #bt-pprefuse .txt").html(i.bt.refuse);
  if (pageApp) {
    $("#mixlist .tab#tab-latest .txt").html(i.bt.latest);
    $("#mixlist .tab#tab-top50 .txt").html(i.bt.top50);
    $("#mixlist .tab#tab-search .txt").html(i.bt.search);
    $("#mixlist .tab#tab-mixlist .txt").html(i.bt.myMix);
    $("#mixlist #box-search #input-search").attr("placeholder", i.txt.inputSearch);
    $("#mixlist #box-search #input-search").val("");
    lastSearch = "";
    cleanListSearch();
    $("#mixlist .tab-filter #bt-name .txt").html(i.bt.djname);
    $("#mixlist .tab-filter #bt-title .txt").html(i.bt.mixtitle);
    $("#mixlist .tab-filter #bt-dedi .txt").html(i.txt.dedicatedTo.split("%{name}").join(""));
    $("#mixlist .tab-filter #bt-day .txt").html(i.bt.day);
    $("#mixlist .tab-filter #bt-week .txt").html(i.bt.week);
    $("#mixlist .tab-filter #bt-month .txt").html(i.bt.month);
    $("#mixlist .tab-filter #bt-year .txt").html(i.bt.year);
    $("#mixlist .scroll:not(#list-mymix) .infoListmix").html(i.txt.top50Info);
    if (mixDB.totalNbMix > 0) {
      $("#mixlist #latestbox .boxinfo").html(i.txt.latestMixInfo.replace("%{mix_total}", numberSpaced(mixDB.totalNbMix)).replace("%{version_name}", app.name));
    } else {
      $("#mixlist #latestbox .boxinfo").html(i.txt.latestMixInfo.split("<br>")[0]);
    }
    $("#mixlist #list-day .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-week .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-month .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-year .boxinfo").html(i.txt.top50Info);
    $("#mixlist .box-info .offline .txt").html(i.txt.offline);
    $("#watch-info #bt-save .txt").html(i.bt.save);
    $("#watch-info .offline .txt").html(i.txt.offline);
    if (notnull(localMixObject)) {
      h = localMixObject.getMixlist().length == 0 ? STR("txt.mixlistEmpty") : STR("txt.mixlistInfo");
      $("#list-mymix .boxinfo", $poplist).html(h);
    }
    $("#watch-info .date, .box-info .date").each(function () {
      var j;
      if ($(this).attr("data-date")) {
        j = $(this).attr("data-date");
        $(this).html(getStringDate(j));
      }
    });
    $("#pop-switch .title").html(i.txt.enjoyVersion);
    $("#game #box-bt1 #bt-stop .txt").html(i.bt.menuRestart);
    $("#game #box-bt1 #bt-random .txt").html(i.bt.menuRandom);
    $("#game #box-bt1 #bt-record .txt").html(i.bt.menuRecord);
  } else {
    $("#page-splash #sp-baseline").html(STR("txt.baseline"));
    $("#page-splash #sp-experience").html(STR("txt.sp-experience"));
    $("#page-splash #sp-choose").html(STR("txt.selectVersion"));
  }
  if (notnull(boxPopup) && boxPopup.isOpen()) {
    boxPopup.refresh();
  }
}
function loadLanguage(g) {
  var i = g && g.lang ? g.lang : null;
  var j = notnull(i) && notnull(languageListe[i]) ? i : notnull(user.lang) && user.lang != "" ? user.lang : machine.language != "" ? machine.language : defaultLanguage;
  if (appBrowser) {
    j = getParameterByName("lang") ? getParameterByName("lang") : machine.language;
  }
  if (window.electron && isnull(i) && user.lang == "" && notnull(electron.vars.lang)) {
    j = checkLanguageCode(electron.vars.lang);
  }
  j = checkLanguageCode(j);
  if (isnull(languageListe[j])) {
    j = defaultLanguage;
  }
  $("#pop-language .box-lang .bt-soft#bt-lang-" + j).addClass("active");
  if (notnull(translateObj)) {
    $("body").removeClass("lang-" + currentLanguage);
  }
  var i = new XMLHttpRequest();
  function k() {
    if (g && g.fail) {
      g.fail();
    } else {
      loadLanguageFailed();
    }
    return false;
  }
  i.addEventListener("load", function () {
    if (this.status != 200) {
      k();
      return false;
    }
    translateObj = jsonDecode(this.responseText);
    setUserInfo({
      lang: currentLanguage = j
    });
    $("body").addClass("lang-" + currentLanguage);
    if (g && g.cbck) {
      g.cbck();
    }
    saveGA("language", "load_success", currentLanguage);
  }, false);
  i.addEventListener("error", k, false);
  i.open("GET", "./lang/" + j + ".json");
  i.send();
}
function loadLanguageFailed() {
  setUserInfo({
    lang: defaultLanguage
  });
  boxDialog.open("Impossible to load language settings. Please reload or force to quit the app then retry.", "ERROR", ["Reload"], [gotoAppUrl], true);
}
function clickBtLang(g) {
  var g = $(g.currentTarget);
  var h = g.attr("id").replace("bt-lang-", "");
  if (!g.hasClass("active")) {
    $("#pop-language .box-lang .bt").removeClass("active");
    g.addClass("active");
    loadLanguage({
      cbck: changeDomTxt,
      lang: h
    });
  }
}
function STR(g) {
  for (var j = g.split("."), k = translateObj.trad, l = 0, m = j.length; l < m; l++) {
    var p = j[l];
    if (!(p in k)) {
      return;
    }
    k = k[p];
  }
  return k;
}
var tabBuffer;
var tabAnime;
var nbSound;
var nbSoundBonus;
var nbSoundTotal;
var nbBonus;
var nbAnime;
var nbData;
var cntTotalAsset;
var nbTotalAsset;
var tabToLoad;
var cntLoad;
var listImages = {};
function preparerArray() {
  frameTotal = app.totalframe;
  frameHalf = frameTotal / 2;
  tabBuffer = {};
  tabAnime = [];
  nbSound = app.animearray.length;
  nbSoundBonus = app.bonusarray.length;
  nbSoundTotal = nbSound * 2 + nbSoundBonus + 1;
  nbBonus = app.bonusarray.length;
  nbAnime = app.animearray.length;
  nbData = app.animearray.length;
  nbTotalAsset = nbSoundTotal + nbBonus + nbAnime + nbData + 2;
  tabToLoad = [];
  var h = cntLoad = cntTotalAsset = 0;
  var i = "";
  tabBuffer.sound = [];
  h = 0;
  for (; h < nbSound; h++) {
    tabBuffer.sound.push({
      sndA: 0,
      sndB: 0
    });
    tabAnime.push({
      imgSprite: null,
      ratio: null,
      width: null,
      height: null,
      headWidth: null,
      headHeight: null,
      totalFrames: null,
      imgData: null,
      color: app.animearray[h].color
    });
  }
  tabBuffer.bonus = [];
  h = 0;
  for (; h < nbSoundBonus; h++) {
    tabBuffer.bonus.push({
      snd: 0,
      aspire: 0
    });
  }
  tabBuffer.metro = [{
    snd: 0
  }];
  tabToLoad = [{
    func: loadImage,
    params: {
      keyname: "spritePolo",
	   "path": "./" + app.folder + (1 == animSize ? appBrowserSchool ? "img/polo-sprite-tshirt.png" : "img/polo-sprite.png" : nameToHD(appBrowserSchool ? "img/polo-sprite-tshirt.png" : "img/polo-sprite.png")) // bring back old format
 //     path: "./img/" + renameFile(appBrowserSchool ? "polo-sprite-tshirt.png" : "polo-sprite.png")
    }
  }, {
    func: loadImage,
    params: {
      keyname: "gameBck",
      path: "./" + app.folder + "img/game-bck@2x.jpg"
    }
  }, {
    func: loadImage,
    params: {
      keyname: "gamePicto",
      path: "./" + app.folder + "img/game-picto@2x.png"
    }
  }];
  if (miniPlayer && appVersion > 4) {
    tabToLoad.pop();
  }
  h = 0;
  for (; h < nbSound; h++) {
    if (app.animearray[h].uniqsnd) {
      tabToLoad.push({
        func: loadSound,
        params: ["sound", app.animearray[h].soundA, h, "sndA", true]
      });
      nbTotalAsset--;
    } else {
      tabToLoad.push({
        func: loadSound,
        params: ["sound", app.animearray[h].soundA, h, "sndA"]
      });
      tabToLoad.push({
        func: loadSound,
        params: ["sound", app.animearray[h].soundB, h, "sndB"]
      });
    }
  }
  for (h = 0; h < nbSoundBonus; h++) {
    tabToLoad.push({
      func: loadSound,
      params: ["bonus", app.bonusarray[h].sound, h, "snd"]
    });
    if (app.bonusarray[h].aspire) {
      tabToLoad.push({
        func: loadSound,
        params: ["bonus", app.bonusarray[h].aspire, h, "aspire"]
      });
    }
    i = renameFile(app.bonusarray[h].src);
    tabToLoad.push({
      func: loadVideoBonus,
      params: [i, h]
    });
  }
  for (h = 0; h < nbAnime; h++) {
    i = app.animearray[h].animeData;
    tabToLoad.push({
      func: loadAnimeData,
      params: [i, h]
    });
    i = renameFile(app.animearray[h].anime);
    tabToLoad.push({
      func: loadAnime,
      params: [i, h]
    });
  }
  checkTabToLoad();
}
function checkTabToLoad() {
  updatePreload();
  if (cntLoad < tabToLoad.length) {
    tabToLoad[cntLoad].func(tabToLoad[cntLoad].params);
    cntLoad++;
  }
}
function updatePreload() {
  cntTotalAsset++;
  var h = (h = Math.round(cntTotalAsset / nbTotalAsset * 100)) < 5 ? 5 : h;
  $homeLoadbar.css({
    width: String(h > 100 ? 100 : h) + "%"
  });
  if (cntTotalAsset == nbTotalAsset && (createGame(), hideHomeLoadbar(), isIframe)) {
    callParentWindow("appLoadingComplete");
  }
}
function loadSound(g) {
  var j = g[0];
  var k = g[1];
  var l = g[2];
  var m = g[3];
  var p = !isnull(g[4]) && g[4];
  var q = "./" + app.folder + "sound/" + sndExt + "/" + k + "." + sndExt;
  var u = new XMLHttpRequest();
  u.open("GET", q, true);
  u.responseType = "arraybuffer";
  u.onload = function () {
    audioCtx.decodeAudioData(u.response, function (v) {
      tabBuffer[j][l][m] = v;
      if (p) {
        tabBuffer[j][l].sndB = v;
      }
      checkTabToLoad();
    }, function (v) {
      popupGeneralError({
        error: "Decoding " + q.replace("./", ""),
        action: "reload"
      });
    });
  };
  u.onerror = function () {
    popupGeneralError({
      error: "XHR " + q.replace("./", ""),
      action: "reload"
    });
  };
  u.send();
}
function loadAnimeData(g) {
  var i = g[0];
  var j = g[1];
  var k = "./" + app.folder + "anime/" + i;
  var l = new XMLHttpRequest();
  l.open("GET", k, true);
  l.responseType = "json";
  l.onload = function () {
    for (var m = l.response, p = m.arrayFrame, q = p.length, u = [], v = 0; v < q; v++) {
      var w = p[v].prop.split(",");
      u.push([parseInt(w[0]), parseInt(w[1]), parseInt(w[2]), parseInt(w[3])]);
    }
    tabAnime[j].imgData = u;
    tabAnime[j].headHeight = m.headHeight;
    checkTabToLoad();
  };
  l.onerror = function () {
    popupGeneralError({
      error: "XHR " + k.replace("./", ""),
      action: "reload"
    });
  };
  l.send();
}
function loadAnime(g) {
  var j = g[0];
  var k = g[1];
  var l = "./" + app.folder + "anime/" + j;
  var m = new Image();
  m.onload = function () {
    tabAnime[k].imgSprite = m;
    checkTabToLoad();
  };
  m.onerror = function () {
    popupGeneralError({
      error: "Load " + l.replace("./", ""),
      action: "reload"
    });
  };
  m.src = l;
}
function loadVideoBonus(g) {
  var i = g[0];
  var j = "./" + app.folder + "video/" + i;
  var k = g[1] + 1;
  var g = new XMLHttpRequest();
  g.onload = function () {
    var m = this.response;
    var p = document.createElement("video");
    p.src = window.URL.createObjectURL(m);
    p.type = "video/" + vidExt;
    p.muted = true;
    p.setAttribute("playsinline", "playsinline");
    p.setAttribute("webkit-playsinline", "webkit-playsinline");
    p.setAttribute("muted", "");
    p.onerror = function (q) {
      popupGeneralError({
        error: "Video " + i
      });
    };
    p.oncanplaythrough = function (q) {
      p.oncanplaythrough = null;
      $boxVideo.prepend("<div class='video' id='video" + k + "'></div>");
      $boxVideo.find(".video#video" + k).append(p);
      checkTabToLoad();
    };
    p.load();
  };
  g.onerror = function () {
    popupGeneralError({
      error: "XHR " + j.replace("./", ""),
      action: "reload"
    });
  };
  g.open("GET", j);
  g.responseType = "blob";
  g.send();
}
function preloadImageForCSS(g) {
  var j = g.images.length;
  var k = 0;
  var l = {};
  function m() {
    var p = new Image();
    var q = g.images[k][0];
    var u = g.images[k][1];
    p.onload = function () {
      l[q] = this;
      k++;
      g.progress(Math.floor(k * 100 / j));
      if (k == j) {
        g.good(l);
      } else {
        m();
      }
    };
    p.onerror = function () {
      var v = u.split("/").pop();
      g.nope(v);
    };
    p.src = u;
  }
  m();
}
function loadImage(g) {
  var i = new Image();
  i.onload = function () {
    listImages[g.keyname] = this;
    checkTabToLoad();
  };
  i.onerror = function () {
    popupGeneralError({
      error: "Load " + g.path.replace("./", ""),
      action: "reload"
    });
  };
  i.src = g.path;
}
function CloudSync() {
  this.sync = function (g) {
    notnull(g);
  };
  this.save = nada;
  this.remove = nada;
  return this;
}
function LocalStorage() {
  var h = this;
  this.setItem = function (i, j, k) {
    window.localStorage.setItem(i, j);
    if (k) {
      cloud.save(i, j);
    }
  };
  this.getItem = function (i) {
    return window.localStorage.getItem(i);
  };
  this.getAllItem = function () {
    return window.localStorage;
  };
  this.removeItem = function (i, j) {
    window.localStorage.removeItem(i);
    if (j) {
      cloud.remove(i);
    }
  };
  this.clear = function () {
    window.localStorage.clear();
  };
  this.weight = function () {
    var j;
    var k;
    var l = window.localStorage;
    var m = 0;
    var p = "LS | --------------------------\n";
    for (k in l) {
      m += j = (l[k].length + k.length) * 2;
      p += "LS | " + k.substr(0, 50) + " = " + (j / 1024).toFixed(2) + " KB\n";
    }
    return p = p + ("LS | Total = " + (m / 1024).toFixed(2) + " KB\n") + "LS | --------------------------";
  };
  this.restoreMixFromDB = function (i) {
    var k = {};
    k.uuid = getListUUID();
    k.guid = getUserInfo().guid;
    k.mixids = localMixObject.getAllMixId();
    var l = i || nada;
    if (hasNetwork && (k.uuid.length || k.user.guid || k.mixids.length)) {
      $.ajax({
        type: "POST",
        url: domainOnline + "ph3/get-all-mix-db.php",
        data: k,
        dataType: "json",
        crossdomain: true,
        success: function (p) {
          var q;
          if (p.state == "success") {
            p.mixlist.forEach(function (r) {
              r.synced = true;
              r.online = true;
              r.mymix = true;
              localMixObject.saveMix(r);
              if (localMixObject.getMix("fav-" + r.link)) {
                localMixObject.saveMix(r, true);
              }
            });
            localMixObject.getAllMix().forEach(function (r) {
              if (r.mymix && r.online && !r.synced) {
                h.removeItem("mix-" + r.link);
                h.removeItem("fav-" + r.link);
                0;
              }
            });
            q = getListUUID();
            q.forEach(function (r) {
              if (!(r.toUpperCase() == machine.uuid.toUpperCase() || existInArray(p.uuidlist, r, false))) {
                h.removeItem("uuid-" + r, true);
                0;
              }
            });
            p.uuidlist.forEach(function (r) {
              h.setItem("uuid-" + r.toUpperCase(), "", true);
              0;
            });
            l({
              msg: "ok",
              nb: p.mixlist.length
            });
          } else {
            l({
              msg: "bug"
            });
          }
        },
        error: function (p) {
          l({
            msg: "error"
          });
        }
      });
    }
  };
  return this;
}
function LocalMixObject() {
  var h = this;
  this.saveMix = function (i, j) {
    var k;
    var j = !!notnull(j) && j;
    return !!notnull(i) && (k = i.link.indexOf("mix-") == -1 ? "mix-" + i.link : i.link, k = j ? k.replace("mix-", "fav-") : k, j = jsonEncode(i), storage.setItem(k, j), true);
  };
  this.deleteMix = function (i) {
    return !!notnull(storage.getItem(i)) && (storage.removeItem(i, true), true);
  };
  this.deleteMixById = function (i) {
    var j;
    var k = h.getAllMix(true);
    var l = h.getAllMix(true, true);
    for (j in k) {
      if (k[j].id == i) {
        h.deleteMix("mix-" + k[j].link);
        h.deleteMix("fav-" + k[j].link);
      }
    }
    for (j in l) {
      if (l[j].id == i) {
        h.deleteMix("fav-" + l[j].link);
        h.deleteMix("mix-" + l[j].link);
      }
    }
  };
  this.getMix = function (i) {
    return !!notnull(storage.getItem(i)) && jsonDecode(storage.getItem(i));
  };
  this.getAllMix = function (j, k) {
    var l;
    var m;
    var p = !!notnull(j) && j;
    var j = !!notnull(k) && k;
    var q = [];
    var u = storage.getAllItem();
    var v = j ? "fav-" : "mix-";
    for (l in u) {
      if (l.indexOf(v) != -1) {
        if (isnull((m = jsonDecode(u[l])).datedb)) {
          m.datedb = notnull(m.date) ? m.date : getDateNow();
        }
        if (!(p && l.indexOf("v" + app.version) == -1 && l.indexOf("-IOSV" + app.version) == -1)) {
          q.push(m);
        }
      }
    }
    return q;
  };
  this.saveMixOffline = function () {
    var i;
    var j = h.getAllMix();
    for (i in j) {
      var k = j[i];
      if (!k.online && k.mymix) {
        saveMixDB(k);
      }
    }
  };
  this.getAllMixId = function () {
    var i;
    var j = h.getAllMix(false);
    var k = [];
    for (i in j) {
      var l = j[i];
      if (l.id) {
        k.push(parseInt(l.id));
      }
    }
    return k;
  };
  this.getMixlist = function () {
    var i = h.getAllMix(true, false);
    return h.sortArrayMix(i);
  };
  this.getFavlist = function () {
    var i = h.getAllMix(true, true);
    return h.sortArrayMix(i);
  };
  this.sortArrayMix = function (i, j) {
    i.sort(function (k, l) {
      if (l.datedb > k.datedb) {
        return 1;
      } else if (l.datedb < k.datedb) {
        return -1;
      } else {
        return 0;
      }
    });
    return i = j === true ? i.reverse() : i;
  };
  this.getLastMix = function () {
    var i = h.getAllMix(false);
    var j = i.length;
    if (j > 0) {
      return i[j - 1];
    } else {
      return null;
    }
  };
  this.getLastDjName = function () {
    var i = h.getLastMix();
    if (notnull(i)) {
      return i.name;
    } else {
      return "";
    }
  };
  this.deleteAllMix = function () {
    for (var i in storage.getAllItem()) {
      if (!(i.indexOf("mix-") == -1 && i.indexOf("fav-") == -1)) {
        storage.removeItem(i);
      }
    }
  };
  this.getStatMixOnline = function (j) {
    var k = h.getAllMixId();
    if (k.length) {
      xhr("GET", domainOnline + "ph3/get-stat-mix.php", {
        id: k
      }, function (l) {
        if (l.state == "success") {
          XHRmemotime.mymix = new Date();
          var l = l.list;
          var m = [];
          l.forEach(function (q) {
            m.push(parseInt(q.id));
            var r = h.getMix("mix-" + q.link);
            r.id = q.id;
            r.newnbview = q.nbview;
            r.newnblike = q.nblike;
            h.saveMix(r);
          });
          if (m.length < k.length) {
            var p;
            var l = uniqueBetweenArray(m, k);
            for (p of l) {
              h.deleteMixById(p);
            }
          }
          if (j !== undefined) {
            j();
          }
        }
      }, function (l) {});
    } else if (j !== undefined) {
      j();
    }
  };
  this.getStatFavOnline = function (j) {
    var k = h.getFavlist();
    var l = [];
    k.forEach(function (m) {
      if (!(m.mymix && !m.online || !notnull(m.id))) {
        l.push(parseInt(m.id));
      }
    });
    if (l.length) {
      xhr("GET", domainOnline + "ph3/get-stat-mix.php", {
        id: l
      }, function (m) {
        if (m.state == "success") {
          XHRmemotime.myfav = new Date();
          var m = m.list;
          var p = [];
          m.forEach(function (r) {
            p.push(parseInt(r.id));
            var s = h.getMix("fav-" + r.link);
            s.id = r.id;
            s.nbview = r.nbview;
            s.nblike = r.nblike;
            h.saveMix(s, true);
          });
          if (p.length < l.length) {
            var q;
            var m = uniqueBetweenArray(p, l);
            for (q of m) {
              h.deleteMixById(q);
            }
          }
          if (j !== undefined) {
            j();
          }
        }
      }, function (m) {});
    } else if (j !== undefined) {
      j();
    }
  };
}
function BonusObject(j, q, z) {
  var B;
  var E = this;
  var F = j + 1;
  var G = $("#bt-bonus-" + F);
  var H = G.find(".quarter");
  var I = $(".circle", G);
  var J = $("#box-video .video#video" + F);
  var K = $("#box-video .video#video" + F + " video")[0];
  var L = false;
  var M = false;
  var N = new SoundObject("bonus" + F);
  var O = new SoundObject("aspire" + F);
  var P = z.snd;
  var Q = z.aspire;
  var R = numberArray(q.code.split(","));
  var S = R.length;
  var U = [];
  var V = 0;
  var W = 0;
  this.$div = J;
  this.tabSVG = U;
  this.video = K;
  this.found = false;
  this.unlock = false;
  E.cntCode = 0;
  E.nbLoop = q.loop;
  E.sound = N;
  this.init = function () {
    var a1 = storage.getItem("v" + appVersion + "-bonus-complete") || 0;
    if (E.getId() == 0 || E.getId() <= a1) {
      E.unlockme();
    } else {
      E.lockme();
    }
    for (var a2 = 0; a2 < S; a2++) {
      var a3 = {
        obj: $(".svg.q" + (a2 + 1), H),
        col: $(".svg.q" + (a2 + 1) + " svg", H).css("fill")
      };
      U.push(a3);
    }
    E.modeTouch();
  };
  this.reinit = function () {
    E.hideLoader();
    G.removeClass("inprogress found bounce");
    H.find(".svg").removeClass("directshow show hide");
    E.found = false;
    E.inprogress = false;
    E.cntCode = 0;
    E.modeTouch();
  };
  this.modeTouch = function () {
    G.off().on(pointerEventType.down, E.touchStart);
  };
  this.modeClick = function () {
    G.off().on(pointerEventType.down, E.launchVideo);
  };
  this.unlockme = function () {
    G.addClass("unlock");
    this.unlock = true;
  };
  this.lockme = function () {
    G.removeClass("unlock");
    this.unlock = false;
  };
  this.getId = function () {
    return F - 1;
  };
  this.getCode = function () {
    return R;
  };
  var j = G.find(".box-loader .zone");
  var X = j.find(".loader");
  var Y = j.find(".bar");
  var Z = false;
  this.showLoader = function () {
    Z = true;
    X.addClass("show");
    Y.css({
      "animation-duration": decimal(getRemainingTimeBeforeBonus() / 1000, 2) + "s"
    });
    Y.addClass("progress");
  };
  this.hideLoader = function () {
    if (Z) {
      Z = false;
      X.removeClass("show");
      Y.removeClass("progress");
    }
  };
  var a0 = new ClockObject("canvas-bt-bonus-" + F);
  a0.init(43, 43, 1, 35, 16);
  this.playAspiration = function (a1) {
    a1 = notnull(a1) ? a1 : 0;
    O.prepare(Q, 0);
    O.play(a1, true);
    M = true;
  };
  this.stopAspiration = function () {
    if (M) {
      O.stop(true);
      M = false;
    }
  };
  this.hasCode = function (a1) {
    return R.indexOf(a1) != -1;
  };
  this.checkCode = function (a1, a2) {
    a1 = R.indexOf(a1);
    if (a1 > -1) {
      if (a2) {
        E.showQuarter(a1);
      } else {
        E.hideQuarter(a1);
      }
    }
  };
  this.showQuarter = function (a1) {
    E.cntCode++;
    var a2 = U[a1].obj;
    var a1 = U[a1].col;
    if (E.cntCode == S && E.unlock) {
      E.hasBeenFound();
    }
    if (E.cntCode == 1) {
      E.inprogress = true;
      G.addClass("inprogress");
    }
    I.addClass("show").one(animationEnd, function (a4) {
      $(a4.target).removeClass("show");
    });
    I.css({
      "border-color": a1
    });
    a2.removeClass("hide").addClass("directshow show");
  };
  this.hideQuarter = function (a1) {
    a1 = U[a1].obj;
    if (E.unlock) {
      a1.addClass("hide").one(animationEnd, function (a3) {
        $(a3.target).removeClass("directshow show hide");
      });
    } else {
      a1.removeClass("directshow show hide");
    }
    if (E.cntCode == S) {
      cancelClickBtBonus();
      this.notFoundAnymore();
    }
    E.cntCode--;
    if (E.cntCode < 0) {
      E.cntCode = 0;
    }
    if (E.cntCode == 0) {
      E.inprogress = false;
      G.removeClass("inprogress");
    }
  };
  this.hideClock = function () {
    a0.stop(true);
  };
  this.render = function () {
    a0.render();
  };
  this.hasBeenFound = function () {
    if (!modeReplay) {
      G.addClass("found bounce");
      popupBonusUnlocked();
    }
    E.modeClick();
    E.found = true;
  };
  this.notFoundAnymore = function () {
    if (!modeReplay) {
      G.removeClass("found bounce");
    }
    E.found = false;
    E.hideClock();
    E.hideLoader();
    E.modeTouch();
  };
  this.touchStart = function (a1) {
    a1.preventDefault();
    if (E.unlock) {
      if (!bonusPlaying) {
        (B = ~a1.type.indexOf("touch") ? G : $body).on(pointerEventType.up, E.touchEnd);
        V = getTime();
        showPoloAndPictoInCombo(F);
      }
    } else {
      popupFindPreviousBonus();
    }
  };
  this.touchEnd = function (a1) {
    a1.preventDefault();
    B.off(pointerEventType.up, E.touchEnd);
    stopShowingPoloInArray(V);
  };
  this.launchVideo = function () {
    var a1;
    if (!(bonusWaiting || bonusPlaying || (a1 = !app.bonusloopA || boucleA, !modeWatch && getRemainingTime() < 500 && a1))) {
      E.modeTouch();
      E.showLoader();
      recordMix.xmlAction("bonus", E);
      clickBtBonus(F);
      G.removeClass("bounce");
      I.addClass("showCircle").one(animationEnd, function (a2) {
        $(a2.target).removeClass("showCircle");
      });
      E.prepareVideo(1);
    }
  };
  this.prepareVideo = function (a1) {
    if (K.error) {
      K.load();
    }
    W = app.looptime * (a1 - 1) / 1000;
    K.currentTime = W;
  };
  this.videoPlaying = function () {};
  this.videoEnded = function () {};
  this.play = function () {
    M = !(L = true);
    G.addClass("playing");
    E.hideLoader();
    a0.start(loopDuration * E.nbLoop, false);
    N.prepare(P);
    N.play(W);
    J.addClass("show");
    K.play().then(() => {}).catch(a1 => {
      throw new Error(a1);
    });
  };
  this.stop = function () {
    G.removeClass("playing");
    if (loopOn && E.found) {
      E.modeClick();
    }
    if (L) {
      N.stop(true);
      a0.stop(true);
    }
    E.stopAspiration();
    L = false;
    J.removeClass("show");
    K.pause();
  };
  this.pause = function () {
    if (L) {
      K.pause();
    }
    a0.pause();
  };
  this.resume = function () {
    if (L) {
      K.play();
    }
    a0.resume();
  };
  this.init();
}
function ClockObject(j) {
  var q;
  var w;
  var x;
  var y;
  var z;
  var A;
  var B;
  var C;
  var D;
  var E;
  var F;
  var G = this;
  var H = $("#" + j)[0].getContext("2d");
  var I = Math.PI * 2;
  var J = Math.PI / 2;
  var K = false;
  var L = false;
  var M = 0;
  this.start = function (N, O) {
    C = isDarkMode() ? "#CCCCCC" : "#5A5A5A";
    H.strokeStyle = C;
    L = !(K = true);
    F = O;
    E = 100 / N;
    D = getTime();
  };
  this.stop = function (N) {
    K = false;
    if (N) {
      G.clear();
    } else {
      L = true;
      q = F ? 0 : 1;
    }
  };
  this.pause = function () {
    M = getTime();
  };
  this.resume = function () {
    var N = getTime() - M;
    D += N;
  };
  this.render = function () {
    var N;
    var O;
    if (K || L) {
      if (K) {
        N = getTime() - D;
        w = N * E / 100;
      } else if (L) {
        w += (q - w) * 0.2;
      }
      if ((w = w < 0.001 ? 0.001 : w) > 0.999) {
        w = 0.999;
      }
      N = F ? -J : I * w - J;
      O = F ? I * w - J : -J;
      G.clear();
      H.beginPath();
      H.arc(x, y, A, N, O, false);
      H.stroke();
      if (!(!L || w != 0.001 && w != 0.999)) {
        L = false;
        G.clear();
      }
    }
  };
  this.clear = function () {
    H.clearRect(x - A - B / 2, y - A - B / 2, A * 2 + B, A * 2 + B);
  };
  this.init = function (N, O, P, Q, R, S) {
    x = N == null ? 0 : N;
    y = O == null ? 0 : O;
    z = P == null ? 1 : P;
    A = Q == null ? 18 : Q;
    B = R == null ? 6 : R;
    C = S == null ? "#FFFFFF" : S;
    H.lineWidth = B;
    H.strokeStyle = C;
    H.globalAlpha = z;
  };
}
function ReadingBar(g, h, j) {
  var q;
  var w = this;
  var x = $(g);
  var y = $("#reading-buffer", x);
  var z = $cntRecord.find("#t-spent");
  var A = $cntRecord.find("#t-duration");
  var B = "00:00";
  var C = false;
  var D = 0;
  var E = "record";
  var F = secToText(app.looptime * app.recmaxloop);
  var G = 0;
  var H = 0;
  this.minLoop = h;
  this.maxLoop = j;
  this.maxTime = 0;
  this.cntLoop = 0;
  this.bonusList = [];
  this.onLoopsFinished = nada;
  this.onLooping = nada;
  this.isFinished = function () {
    return this.cntLoop == this.maxLoop;
  };
  this.isLastLoop = function () {
    return this.cntLoop + 1 == this.maxLoop;
  };
  this.open = function (I, J) {
    E = I;
    w.createRecordBlock(J);
    w.cntLoop = 0;
    w.maxTime = E == "record" ? F : secToText(w.maxLoop * app.looptime);
    y.css({
      transform: "scaleX(0)"
    });
    B = "00:00";
    z.text(B);
    A.text(" / " + w.maxTime);
    G = 0;
    H = 100 / readingBar.maxLoop;
    x.addClass("open");
    $cntRecord.addClass("fadeIn");
    callParentWindow("replayTime", {
      state: "open",
      spent: B,
      duration: w.maxTime
    });
    return w;
  };
  this.close = function () {
    w.onLoopsFinished = nada;
    w.onLooping = nada;
    removeTransition(x, "open", "transform", function () {
      y.removeClass("progress");
      $("#reading-marker").empty();
      $("#reading-marker-bonus").empty();
      w.bonusList = [];
    });
    $cntRecord.removeClass("fadeIn cssdelay");
    return w;
  };
  this.start = function () {
    C = true;
    w.cntLoop = 0;
    D = 0;
    w.render();
    G = Math.floor(D + q) / w.maxLoop;
    y.css({
      transform: "scaleX(" + G / 100 + ")",
      "animation-duration": decimal(w.maxLoop * app.looptime / 1000, 2) + "s"
    });
    y.addClass("progress");
    callParentWindow("replayTime", {
      state: "start",
      spent: B,
      duration: w.maxTime
    });
    return w;
  };
  this.stop = function () {
    C = false;
    callParentWindow("replayTime", {
      state: "stop",
      spent: B,
      duration: w.maxTime
    });
    return w;
  };
  this.froze = function () {
    y.addClass("froze");
  };
  this.seek = function (I) {
    w.cntLoop = I;
    y.removeClass("progress");
    resetAnimationCSS(y[0]);
    y.css({
      transform: "scaleX(" + H * w.cntLoop / 100 + ")"
    });
    w.render();
  };
  this.unfroze = function () {
    y.css({
      transform: "scaleX(" + H * w.cntLoop / 100 + ")",
      "animation-duration": decimal((w.maxLoop - w.cntLoop) * app.looptime / 1000, 2) + "s"
    });
    y.removeClass("froze").addClass("progress");
  };
  this.openBig = function () {
    x.addClass("seeking");
  };
  this.openNormal = function () {
    x.removeClass("seeking");
  };
  this.loop = function () {
    w.cntLoop++;
    D += q;
    if (w.isFinished()) {
      if (w.onLoopsFinished) {
        w.onLoopsFinished();
      }
    } else if (w.onLooping) {
      w.onLooping();
    }
    return w;
  };
  this.render = function () {
    var I;
    if (C && (q = pctMetronome, I = secToText(getTimeSpent() + loopDuration * w.cntLoop), B != I)) {
      B = I;
      z.text(B);
      callParentWindow("replayTime", {
        state: "render",
        spent: B,
        duration: w.maxTime
      });
    }
  };
  this.createRecordBlock = function (I) {
    var J = E == "record" ? "#D20A0A" : miniPlayer ? "#2C86FE" : "#36B460";
    var K = E == "record" ? decimal(w.minLoop / w.maxLoop, 2) : 0;
    $("#reading-block", x).css({
      transform: "scale(" + K + ", 1)"
    });
    $($cntRecord).css({
      color: J
    });
    y.css({
      "background-color": J
    });
    if (I === true) {
      for (var L = "", M = 100 / w.maxLoop, N = 0, N = 0; N < w.maxLoop; N++) {
        L += "<div class='marker' style='left:" + M * N + "%'></div>";
      }
      $("#reading-marker").html(L);
      L = "";
      N = 0;
      for (; N < w.bonusList.length; N++) {
        L += "<div class='marker' style='left:" + M * w.bonusList[N].loopIndex + "%; width:" + M + "%'></div>";
      }
      $("#reading-marker-bonus").html(L);
    }
  };
  this.createRecordBlock();
}
function RenderRAF(g) {
  var j;
  var k = g || nada;
  var l = false;
  function m(p) {
    k();
    j = requestAnimationFrame(m);
  }
  this.start = function () {
    if (!l) {
      l = true;
      m();
    }
  };
  this.stop = function () {
    if (l) {
      l = false;
      cancelAnimationFrame(j);
    }
  };
}
var Spinner = {
  $bt: null,
  $svg: null,
  xlink: "",
  add: function (g) {
    if (notnull(g)) {
      this.$bt = g;
      this.$svg = this.$bt.find("svg use");
      if (this.$svg.length > 0) {
        this.xlink = this.$svg.attr("xlink:href");
        this.$svg.attr("xlink:href", "#ic-loader");
      }
      this.$bt.addClass("spin");
    }
  },
  reset: function () {
    if (notnull(this.$bt)) {
      this.$bt.removeClass("spin");
    }
    if (notnull(this.$svg) && this.$svg.length > 0) {
      this.$svg.attr("xlink:href", this.xlink);
    }
    this.$bt = null;
    this.$svg = null;
    this.xlink = "";
  }
};
function CustomButton(g) {
  var j = g;
  var k = j.find("svg");
  var l = k.find("use");
  var m = l.attr("xlink:href");
  var p = false;
  var q = false;
  j.addSpinner = function () {
    if (!p) {
      p = true;
      l.attr("xlink:href", "#ic-loader");
      k.addClass("spin");
    }
    return j;
  };
  j.removeSpinner = function () {
    if (p) {
      p = false;
      l.attr("xlink:href", m);
      k.removeClass("spin");
    }
    return j;
  };
  j.addTouchAnimation = function () {
    if (q) {
      j.removeClass("ontouch").get(0).offsetHeight;
    }
    q = true;
    j.addClass("ontouch").one(animationEnd, function (r) {
      j.removeClass("ontouch");
      q = false;
    });
    return j;
  };
  return j;
}
function CanvasObj(g) {
  var h;
  var i = this;
  this.id = g;
  this.div = document.getElementById(g);
  this.context = this.div.getContext("2d");
  this.saveImage = function () {
    h = i.context.getImageData(0, 0, i.div.width, i.div.height);
  };
  this.showImage = function () {
    i.clear();
    i.context.putImageData(h, 0, 0);
  };
  this.clear = function () {
    i.context.clearRect(0, 0, i.div.width, i.div.height);
  };
  return this;
}
var $focused;
var focusList = [];
var focusPos = -1;
var focusHistory = [];
function initFocusEvent() {
  killFocusEvent();
  document.addEventListener("keydown", keyDown, false);
  $(document).on(pointerEventType.down, g => {
    if (g.isTrigger != 3) {
      removeFocus(g);
    }
  });
}
function killFocusEvent() {
  document.removeEventListener("keydown", keyDown, false);
  $(document).off(pointerEventType.down, removeFocus);
}
function keyDown(g) {
  var i = g.key.toLowerCase();
  if (!(g.shiftKey && g.keyCode == 9)) {
    if (g.keyCode == 9) {
      g.preventDefault();
    }
    if (g.keyCode == 27) {
      g.preventDefault();
    }
    if (g.keyCode == 38) {
      g.preventDefault();
    }
    if (g.keyCode == 40) {
      g.preventDefault();
    }
    if (!$("input").is(":focus")) {
      if (g.keyCode == 13) {
        g.preventDefault();
      }
      if (g.keyCode == 37) {
        g.preventDefault();
      }
      if (g.keyCode == 39) {
        g.preventDefault();
      }
    }
    hitKey(i);
  }
}
function nextFocus() {
  var h;
  var i;
  focusPos = ++focusPos > focusList.length - 1 ? focusList.length - 1 : focusPos;
  if (focusHistory[focusHistory.length - 1] == "playlist-all" && (i = $scrollbox.find(".boxline .line.focused")).length && (h = i.index()) > 0) {
    i = i.height();
    $scrollbox[0].scroll({
      top: h * i,
      left: 0,
      behavior: "smooth"
    });
  }
  addFocus();
}
function prevFocus() {
  var h;
  var i;
  focusPos = --focusPos < 0 ? 0 : focusPos;
  if (focusHistory[focusHistory.length - 1] == "playlist-all" && (i = $scrollbox.find(".boxline .line.focused")).length && (h = i.index()) > 0) {
    i = i.height();
    $scrollbox[0].scroll({
      top: h * i - i * 2,
      left: 0,
      behavior: "smooth"
    });
  }
  addFocus();
}
function addFocus() {
  if (notnull($focused)) {
    $focused.removeClass("focused");
    $focused = null;
  }
  if (focusList.length > 0) {
    ($focused = focusList[focusPos].toFocus).addClass("focused");
  }
}
function removeFocus() {
  if (notnull($focused)) {
    $focused.removeClass("focused");
    $focused = null;
    focusPos = -1;
  }
}
function enterFocus() {
  var h;
  if (notnull($focused)) {
    if (notnull(focusList[focusPos].onEnter)) {
      focusList[focusPos].onEnter();
    } else {
      h = focusList[focusPos].toClick || focusList[focusPos].toFocus;
      if ($._data(h, "events") != null) {
        h.trigger(pointerEventType.down);
      } else {
        h[0].dispatchEvent(new Event(pointerEventType.down));
      }
    }
  }
}
function deleteFocus() {
  if (focusHistory[focusHistory.length - 1] == "popup-menu-exit") {
    return false;
  }
  if (notnull($focused)) {
    $focused.removeClass("focused");
    $focused = null;
  }
  focusList = [];
  focusPos = -1;
}
function hitKey(g) {
  switch (g) {
    case "tab":
      if ($("input").is(":focus")) {
        blurAll();
      }
      nextFocus();
      break;
    case "enter":
      if (isnull($focused) && focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[10].toFocus.trigger(pointerEventType.down);
        return false;
      }
      if ($("input").hasClass("focused") && $("input").is(":focus")) {
        blurAll();
        nextFocus();
      }
      enterFocus();
      break;
    case "escape":
      if ($("input").is(":focus")) {
        blurAll();
        return false;
      }
      if (notnull($focused)) {
        removeFocus();
      }
      if (pageApp && pause) {
        return false;
      }
      if (boxDialog.isOpen()) {
        return false;
      }
      if (pageApp && $lockAll.hasClass("show")) {
        return false;
      }
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        boxPopup.close();
        return false;
      }
      if (focusHistory[focusHistory.length - 1] == "popup-news") {
        boxPopup.close();
        return false;
      }
      if (focusHistory[focusHistory.length - 1] == "popup-switch") {
        boxSwitch.close();
        return false;
      }
      if (boxInfo.isOpen()) {
        boxInfo.close();
        return false;
      }
      if (boxParam.isOpen()) {
        boxParam.close();
        return false;
      }
      if (pageApp && boxPopup.isOpen()) {
        if (boxPopup.$popup.hasClass("action") || boxPopup.$popup.hasClass("action-back")) {
          boxPopup.$icon.trigger(pointerEventType.down);
        } else {
          boxPopup.close();
        }
        return false;
      }
      if (pageApp && $mixlist.isOpen()) {
        if (focusHistory[focusHistory.length - 1] == "playlist-line-open") {
          $lineOpened.trigger(pointerEventType.down).trigger(pointerEventType.up);
          return false;
        }
        if (focusHistory[focusHistory.length - 1] == "playlist-all") {
          closePlaylist();
          return false;
        }
      }
      if ((window.cordova || window.electron) && $focused == null) {
        removeFocus();
        if (boxMenu.isOpen()) {
          boxMenu.close();
        } else {
          popupMenuExit();
        }
        return false;
      }
      break;
    case " ":
      if (!(!(pageApp && onGame && loopOn) || $lockAll.hasClass("show") || boxMenu !== undefined && boxMenu.isOpen())) {
        $btClock.trigger(pointerEventType.down);
      }
      break;
    case "arrowright":
      if (!$("input").is(":focus")) {
        nextFocus();
      }
      break;
    case "arrowleft":
      if (!$("input").is(":focus")) {
        prevFocus();
      }
      break;
    case "arrowdown":
      if (!$("input").is(":focus")) {
        nextFocus();
      }
      break;
    case "arrowup":
      if (!$("input").is(":focus")) {
        prevFocus();
      }
      break;
    case "1":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[0].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "2":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[1].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "3":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[2].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "4":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[3].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "5":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[4].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "6":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[5].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "7":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[6].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "8":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[7].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "9":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[8].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "0":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        focusList[9].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "backspace":
      if (focusHistory[focusHistory.length - 1] == "pop-safe-code") {
        boxPopup.$popup.find(".text").text("_ _ _ _");
      }
  }
}
function createFocus(g, h) {
  if (boxMenu && boxMenu.isOpen() && g != "popup-menu-exit") {
    removeInArray("popup-menu-exit", focusHistory);
    focusHistory.push(g);
    focusHistory.push("popup-menu-exit");
    return false;
  }
  if (boxDialog && boxDialog.isOpen() && g != "popup-dialog") {
    removeInArray("popup-dialog", focusHistory);
    focusHistory.push(g);
    focusHistory.push("popup-dialog");
    return false;
  }
  focusList = [];
  focusPos = -1;
  if (g == "popup-menu-exit") {
    boxMenu.$popup.find(".bt:not(.icon)").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: boxMenu.$icon
    });
  }
  if (pageApp && g == "home") {
    if ($homeBtNews && $homeBtNews.length > 0) {
      focusList.push({
        toFocus: $homeBtNews.find(".bck"),
        toClick: $homeBtNews
      });
    }
    focusList.push({
      toFocus: $homeBtInfo
    });
    focusList.push({
      toFocus: $homeBtParam
    });
    if ($("#home-bt-fs").is(":visible")) {
      focusList.push({
        toFocus: $("#home-bt-fs")
      });
    }
    focusList.push({
      toFocus: $homeBtSwitch
    });
    focusList.push({
      toFocus: $homeBtPlay
    });
    focusList.push({
      toFocus: $homeBtList
    });
  }
  if (g == "popup-news") {
    focusList.push({
      toFocus: boxPopup.$popup.find(".bt:not(.icon)")
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (!(g != "pop-tuto" && g != "pop-credit" && g != "pop-follow")) {
    $("#pop-info .box-tab .tab").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-tuto") {
    $("#pop-info #pop-tuto .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-credit") {
    $("#pop-info #pop-credit .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-follow") {
    $("#pop-info #pop-follow .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: $("#pop-info #pop-follow #img-shop")
    });
  }
  if (!(g != "pop-language" && g != "pop-setting")) {
    $("#pop-param .box-tab .tab").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-language") {
    $("#pop-param #pop-language .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-setting") {
    $("#pop-param #pop-setting .bt-onoff, #pop-param #pop-setting .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "pop-safe-code") {
    boxPopup.$popup.find(".bt:not(.icon)").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "index-select") {
    if ($homeBtNews && $homeBtNews.length > 0) {
      focusList.push({
        toFocus: $homeBtNews.find(".bck"),
        toClick: $homeBtNews
      });
    }
    if ($("#home-bt-fs").is(":visible")) {
      focusList.push({
        toFocus: $("#home-bt-fs")
      });
    }
    focusList.push({
      toFocus: $("#home-bt-info")
    });
    focusList.push({
      toFocus: $("#home-bt-param")
    });
    $("#sp-select .vicon:not(.open)").each(function (v) {
      focusList.push({
        toFocus: $(this).find(".img"),
        onEnter: () => {
          $(this).trigger(pointerEventType.up);
        }
      });
    });
  }
  if (g == "popup-switch") {
    $("#sp-select .vicon:not(.open)").each(function (v) {
      focusList.push({
        toFocus: $(this).find(".img"),
        onEnter: () => {
          $(this).trigger(pointerEventType.up);
        }
      });
    });
  }
  if (g == "toolbar") {
    focusList.push({
      toFocus: $btTool
    });
    focusList.push({
      toFocus: $btClock
    });
  }
  if (g == "toolbar-open") {
    $("#game #box-bt1 .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "game-paused") {
    if ($lockPause.css("visibility") == "visible") {
      focusList.push({
        toFocus: $btClock,
        toClick: $lockPause
      });
    } else {
      focusList.push({
        toFocus: $btClock
      });
    }
  }
  if (g == "mode-replay") {
    focusList.push({
      toFocus: $btTool
    });
    focusList.push({
      toFocus: $btClock
    });
    focusList.push({
      toFocus: $btSave
    });
    focusList.push({
      toFocus: $btLike
    });
  }
  if (g == "popup-record-complete") {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-save-form") {
    boxPopup.$popup.find(".formzone .formline:visible input").each(function (v) {
      var w = $(this);
      focusList.push({
        toFocus: w,
        onEnter: function () {
          var x = w.val().length;
          w.focus();
          w[0].setSelectionRange(x, x);
        }
      });
    });
    focusList.push({
      toFocus: boxPopup.$popup.find(".bt-onofftext")
    });
    focusList.push({
      toFocus: boxPopup.$popup.find(".bt.valid")
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-mix-saved") {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-global-share") {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-email-form") {
    boxPopup.$popup.find(".formzone .formline input").each(function (v) {
      var w = $(this);
      focusList.push({
        toFocus: w,
        onEnter: function () {
          var x = w.val().length;
          w.focus();
          w[0].setSelectionRange(x, x);
        }
      });
    });
    focusList.push({
      toFocus: boxPopup.$popup.find(".bt.valid")
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-convert-mix") {
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-convert-mix-ready") {
    k = boxPopup.$popup.find("#bt-save-file");
    focusList.push({
      toFocus: k,
      onEnter: function () {
        k[0].click();
      }
    });
    focusList.push({
      toFocus: boxPopup.$icon
    });
  }
  if (g == "popup-dialog") {
    $("#pop-dialog .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  if (g == "playlist-all") {
    $("#mixlist .tabbox .tab").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    (l = $("#mixlist .pagebox.show")).find(".tab-filter:visible").find(".bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
    if (l.attr("id") == "box-search") {
      focusList.push({
        toFocus: l.find(".formline input"),
        onEnter: function () {
          l.find(".formline input").focus();
        }
      });
      focusList.push({
        toFocus: l.find(".bt.search")
      });
    }
    $scrollbox.find(".boxline .line").each(function (v) {
      var w = $(this);
      focusList.push({
        toFocus: w,
        onEnter: function () {
          w.trigger(pointerEventType.down).trigger(pointerEventType.up);
        }
      });
    });
  }
  if (g == "playlist-line-open" && $lineOpened) {
    $lineOpened.find(".box-action .bt").each(function (v) {
      focusList.push({
        toFocus: $(this)
      });
    });
  }
  var k;
  var l;
  var m;
  var p = [];
  for (m in focusList) {
    if (isVisible(focusList[m])) {
      p.push(focusList[m]);
    }
  }
  focusList = p;
  if (g != focusHistory[focusHistory.length - 1]) {
    focusHistory.push(g);
  }
  if (focusHistory.length > 5) {
    focusHistory.shift();
  }
  if (notnull(h)) {
    for (var q = 0, u = focusList.length; q < u; q++) {
      if (focusList[q].toFocus && focusList[q].toFocus[0] === h[0]) {
        focusPos = q;
        break;
      }
    }
  }
}
function removeInFocusHistory(g) {
  removeInArray(g, focusHistory);
}
function createFocusFromHistory() {
  if (focusHistory.length) {
    createFocus(focusHistory[focusHistory.length - 1]);
  }
}
function isVisible(g) {
  return !!notnull(g) && !!(g = notnull(g.toClick) ? g.toClick : g.toFocus).length && g.css("visibility") != "hidden" && g.css("display") != "none";
}
function initParam() {
  if (appBrowser && isIOS) {
    $("#home-bt-fs").hide();
  }
  if (isDarkMode()) {
    $("body").addClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").addClass("active");
  }
  if (isSafeMode()) {
    $("body").addClass("safemode");
    $("#pop-setting #param-safe .bt-onoff").addClass("active");
  }
  $("#pop-setting #param-reset .bt").on(pointerEventType.down, clickbtParamReset).parent().find(".ic-info").on(pointerEventType.down, clickbtParamResetInfo);
  $("#pop-setting #param-dark .bt-onoff").on(pointerEventType.down, clickbtParamDark);
  $("#pop-setting #param-safe .bt-onoff").on(pointerEventType.down, clickbtParamSafe).parent().find(".ic-info").on(pointerEventType.down, clickbtParamSafeInfo);
}
function isDarkMode() {
  return storage.getItem("param-dark") != null && storage.getItem("param-dark") == "true";
}
function isSafeMode() {
  return storage.getItem("param-safe") != null;
}
function clickbtParamReset(g) {
  g.preventDefault();
  storage.removeItem("popupDragViewed");
  storage.removeItem("popup-bonus-next");
  storage.removeItem("popup-bonus-unlock");
  for (var i = 1; i <= versions.total; i++) {
    storage.removeItem("v" + i + "-popup-bonus-next");
    storage.removeItem("v" + i + "-popup-bonus-unlock");
    storage.removeItem("v" + i + "-bonus-complete");
  }
  if (pageApp) {
    addTransition($("#fade-all"), "fadeIn", "opacity", function () {
      window.location.href = appNumberVersion !== undefined ? "?v=" + appNumberVersion : "";
    });
  } else {
    $(g.currentTarget).addClass("disable");
  }
}
function clickbtParamResetInfo(g) {
  g.preventDefault();
  boxDialog.open(STR("pop.paramResetInfoText"), "", [STR("bt.gotit")], []);
}
function unlockAllBonus() {
  for (var h = 1; h <= versions.total; h++) {
    storage.setItem("v" + h + "-popup-bonus-next", "ok");
    storage.setItem("v" + h + "-popup-bonus-unlock", "ok");
    storage.setItem("v" + h + "-bonus-complete", "2");
  }
  addTransition($("#fade-all"), "fadeIn", "opacity", function () {
    window.location.href = appNumberVersion !== undefined ? "?v=" + appNumberVersion : "";
  });
}
function clickbtParamDark(g) {
  g.preventDefault();
  if (isDarkMode()) {
    storage.setItem("param-dark", false);
    $body.removeClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").removeClass("active");
  } else {
    storage.setItem("param-dark", true);
    $body.addClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").addClass("active");
  }
}
var $homeBtNews;
var paramsafecode = "";
function clickbtParamSafe(g) {
  g.preventDefault();
  deleteFocus();
  popupCode();
}
function turnOnSafeMode(g) {
  storage.setItem("param-safe", g);
  $body.addClass("safemode");
  $("#pop-setting #param-safe .bt-onoff").addClass("active");
}
function turnOffSafeMode() {
  storage.removeItem("param-safe");
  $body.removeClass("safemode");
  $("#pop-setting #param-safe .bt-onoff").removeClass("active");
}
function popupCode() {
  boxPopup.open({
    name: "safe-code",
    icntype: "action",
    content: function () {
      return "<div class='title'>" + (isSafeMode() ? STR("txt.codeEnter") : STR("txt.codeChoose")) + `</div>
\t\t\t\t<div class='text'>_ _ _ _</div>
\t\t\t\t<div class='content'>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>1</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>2</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>3</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>4</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>5</div></div><div class='hitzone'></div></div><br>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>6</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>7</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>8</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>9</div></div><div class='hitzone'></div></div>
\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>0</div></div><div class='hitzone'></div></div><br>
\t\t\t\t\t<br>
\t\t\t\t\t<div class='bt bt-light' id='bt-valid-code'><div class='bck'><div class='txt'>` + STR("bt.ok") + "</div></div><div class='hitzone'></div></div>\n\t\t\t\t</div>";
    },
    onBoxOpenEnd: function () {
      createFocus("pop-safe-code");
      isSafeMode();
      paramsafecode = "";
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      boxPopup.$popup.find(".bt-number").on(pointerEventType.down, function (i) {
        i.preventDefault();
        var i = boxPopup.$popup.find(".text");
        var j = i.text();
        var k = j.indexOf("_");
        if (k > -1) {
          i.text(j.replaceAt(k, $(this).text()));
        }
        if (!(!isSafeMode() || (paramsafecode += $(this).text()) != "15092009" && i.text().replace(/ /g, "") != storage.getItem("param-safe"))) {
          turnOffSafeMode();
          boxPopup.close();
        }
        if ($(this).hasClass("ontouch")) {
          $(this).removeClass("ontouch").get(0).offsetHeight;
        }
        $(this).addClass("ontouch").one(animationEnd, function (l) {
          $(l.target).removeClass("ontouch");
        });
      });
      boxPopup.$popup.find("#bt-valid-code").on(pointerEventType.down, function (i) {
        var j = boxPopup.$popup.find(".text").text().replace(/ /g, "");
        if (j.indexOf("_") == -1) {
          if (isSafeMode()) {
            if (j == storage.getItem("param-safe")) {
              turnOffSafeMode();
              boxPopup.close();
            } else {
              boxPopup.$popup.find(".text").addClass("shake").one(animationEnd, function (k) {
                paramsafecode = "";
                $(k.target).text("_ _ _ _").removeClass("shake");
              });
            }
          } else {
            turnOnSafeMode(j.replace(/ /g, ""));
            boxPopup.close();
          }
        } else {
          boxPopup.$popup.find(".text").addClass("shake").one(animationEnd, function (k) {
            $(k.target).removeClass("shake");
          });
        }
      });
    },
    onBoxCloseStart: function () {
      removeInFocusHistory("pop-safe-code");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    onCloseComplete: function () {
      createFocusFromHistory();
    }
  });
}
function clickbtParamSafeInfo(g) {
  g.preventDefault();
  boxDialog.open(STR("pop.paramSafeInfoText"), "", [STR("bt.gotit")], []);
}
function clickbtParamRecover(g) {}
function clickbtParamRecoverInfo(g) {}
var hasNews = false;
function initNews() {
  if (!isSafeMode() && hasNetwork) {
    checkNews();
  }
}
function activeBtNews() {
  if (hasNews) {
    ($homeBtNews = $("#home-bt-news")).on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(popupNews);
    }).addClass("animate");
  }
}
function checkNews() {
  var h = getAppData();
  var i = JSON.parse(localStorage.getItem("news")) || {
    id: "",
    lang: ""
  };
  var i = {
    id: i.id,
    lang: i.lang
  };
  h.news = i;
  $.ajax({
    type: "POST",
    url: domainOnline + "ph3/check-news.php",
    data: h,
    dataType: "json",
    crossdomain: true,
    success: function (j) {
      if (j.nada != null) {
        localStorage.removeItem("news");
      }
      if (j.deja != null) {
        hasNews = true;
      }
      if (j.news != null) {
        localStorage.setItem("news", JSON.stringify(j.news));
        hasNews = true;
      }
    },
    error: function (j) {}
  });
}
var newsImageLoaded = false;
function popupNews() {
  var g;
  var h;
  var i;
  if (localStorage.getItem("news") != null) {
    g = JSON.parse(localStorage.getItem("news"));
    i = (h = g.bt != null) ? "<div class=\"bt bt-light\"><div class=\"bck\"><div class=\"txt\">" + g.bt + "</div></div><div class=\"hitzone\"></div></div>" : "";
    boxPopup.open({
      name: "popup-news",
      icntype: "action",
      bodyclose: true,
      class: "big column",
      content: `
            <div class='left'>
               <div class='img-box'></div>
               <div class='icn-box' class='spin'><svg class='icn-svg icn-gray'><use xlink:href='#ic-loader'></use></svg></div>
            </div>
            <div class='right'>
               <div class='title'>` + g.title + "</div>\n               <div class='text'>" + g.text + "</div>\n               " + i + "\n            </div>",
      onBoxOpenEnd: function () {
        function k() {
          boxPopup.$popup.find(".icn-box").remove();
          boxPopup.$popup.find(".img-box").css({
            "background-image": "url(" + g.img + ")"
          }).addClass("fade");
        }
        var l;
        createFocus("popup-news");
        if (newsImageLoaded) {
          k();
        } else {
          (l = new Image()).src = g.img;
          l.onload = function () {
            newsImageLoaded = true;
            k();
          };
        }
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
        if (h) {
          boxPopup.$container.find(".bt").on(pointerEventType.down, function (m) {
            m.preventDefault();
            openURL(g.link);
          });
        }
      },
      onBoxCloseStart: function () {
        boxPopup.$icon.off();
        if (h) {
          boxPopup.$container.find(".bt").off();
        }
      },
      onCloseComplete: function () {
        removeInFocusHistory("popup-news");
        createFocusFromHistory();
      }
    });
  }
}
var isFullScreenable = window.electron && window.electron.vars.isFullScreenable;
var isMinimizable = window.electron && window.electron.vars.isMinimizable;
function popupMenuExit() {
  boxMenu.open({
    name: "menu-exit",
    icntype: "action",
    content: function () {
      var h = isFullScreen() ? STR("bt.fullscreenOff") : STR("bt.fullscreenOn");
      var i = `
\t\t\t\t<div class='title'>Menu</div>
\t\t\t\t<div class='content'>`;
      if (isFullScreenable) {
        i += "<div class=\"bt bt-light\" id=\"bt-exit-fullscreen\"><div class=\"bck\"><div class=\"txt\">" + h + "</div></div><div class=\"hitzone\"></div></div>";
      }
      if (isMinimizable) {
        i += "<div class=\"bt bt-light\" id=\"bt-minimize\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.minimizeWindow") + "</div></div><div class=\"hitzone\"></div></div>";
      }
      i = (i += "<div class=\"bt bt-light\" id=\"bt-open-settings\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.param") + "</div></div><div class=\"hitzone\"></div></div>") + ("<div class=\"bt bt-light\" id=\"bt-open-help\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.tuto") + "</div></div><div class=\"hitzone\"></div></div>");
      if (window.cordova || window.electron) {
        i += "<div class=\"bt bt-light\" id=\"bt-exit-app\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.quitApp") + "</div></div><div class=\"hitzone\"></div></div>";
      }
      return i += "</div>";
    },
    onBoxOpenStart: function () {
      createFocus("popup-menu-exit");
    },
    onBoxOpenEnd: function () {
      if (isFullScreenable) {
        boxMenu.$popup.find("#bt-exit-fullscreen").on(pointerEventType.down, switchFullscreen);
      }
      if (isMinimizable) {
        boxMenu.$popup.find("#bt-minimize").on(pointerEventType.down, minimizeWindow);
      }
      if (window.cordova || window.electron) {
        boxMenu.$popup.find("#bt-exit-app").on(pointerEventType.down, exitApp);
      }
      boxMenu.$popup.find("#bt-open-help").on(pointerEventType.down, openHelp);
      boxMenu.$popup.find("#bt-open-settings").on(pointerEventType.down, openSettings);
      boxMenu.$icon.on(pointerEventType.down, boxMenu.close);
    },
    onBoxCloseStart: function () {
      boxMenu.$icon.off();
      boxMenu.$popup.find(".bt").off();
    },
    onCloseComplete: function () {
      removeInFocusHistory("popup-menu-exit");
      createFocusFromHistory();
    }
  });
}
function isFullScreen() {}
function switchFullscreen(g) {}
function minimizeWindow(g) {}
function exitApp(g) {
  if (notnull(g)) {
    g.preventDefault();
  }
  if (window.electron) {
    electron.ipc.close();
  } else if (window.cordova) {
    boxDialog.open(STR("txt.quitAppConfirm"), "", [STR("bt.yes"), STR("bt.no")], [() => {
      navigator.app.exitApp();
    }]);
  }
  boxMenu.close();
}
function openSettings() {
  boxMenu.close();
  if (boxInfo.isOpen()) {
    boxInfo.close();
  }
  popupParam();
}
function openHelp() {
  boxMenu.close();
  if (boxParam.isOpen()) {
    boxParam.close();
  }
  popupInfo();
}
var storage;
var cloud;
var $body;
var $incredibox;
var $bckGlobal;
var $lockAll;
var $lockPause;
var $fadeAll;
var $watchInfo;
var $mixlist;
var $poplist;
var $tabLatest;
var $tabTop50;
var $tabSearch;
var $tabMixlist;
var $home;
var $homeVersion;
var $homeTitre;
var $homeLoadbox;
var $homeLoadbar;
var $homeBtPlay;
var $homeBtList;
var $homeBtSwitch;
var $homeBtInfo;
var $homeBtParam;
var $homeBtFs;
var $homeBck;
var $boxStage;
var $boxVideo;
var $fadeVideo;
var $boxTop;
var $boxBtBonus;
var $boxBottom;
var $boxPicto;
var $boxLoaderPolo;
var $btTool;
var $boxBt;
var $btBack;
var $btHome;
var $btSave;
var $btLike;
var $btHelp;
var $btSwitch;
var $btStop;
var $btRecord;
var $btRandom;
var $btClock;
var $cntRecord;
var boxDialog;
var boxMenu;
var boxPopup;
var boxInfo;
var boxParam;
var boxSwitch;
var pageApp = false;
function pageLoadComplete() {
  cloud = new CloudSync();
  storage = new LocalStorage();
  localMixObject = new LocalMixObject();
  checkSystem();
  initAnalytics();
  initLanguage();
  resizeApp();
  localMixObject.saveMixOffline();
  $(document).ready(function () {
    if (isIframe && appBrowser) {
      callParentWindow("appIsReady");
    } else {
      documentReady();
    }
  });
}
function documentReady() {
  $body = $("body");
  boxMenu = new Popup(".box-popup#pop-menu-exit");
  boxDialog = new BoxDialog("#pop-dialog");
  boxPopup = new Popup(".box-popup#pop-popup");
  if (checkSupported() != "ok") {
    removeFadeAll();
    popupGeneralError({
      error: checkSupported(),
      action: "kill"
    });
    return false;
  }
  loadLanguage({
    cbck: function () {
      pageCanRun();
    },
    fail: function () {
      removeFadeAll();
      popupGeneralError({
        error: "no language found",
        action: "reload"
      });
    }
  });
}
function pageCanRun() {
  if (pageApp) {
    initVersions();
  }
  initJqueryVar();
  initRulesCSS();
  initFocusEvent();
  initParam();
  initPopup();
  initNews();
  changeDomTxt();
  (pageApp ? pageAppReady : pageIndexReady)();
}
function switchVersion(g) {
  var i = $(this).attr("id").split("icon").join("");
  var j = "app." + pageExt + "?v=" + i;
  var j = (j += getParameterByName("lang") != null ? "&l=" + getParameterByName("lang") : "") + (getParameterByName("afs") != null ? "&afs=" + getParameterByName("afs") : "");
  if (featureLocked && parseInt(i) > 4) {
    dialogGetApp();
  } else if (i != appVersion) {
    lock();
    focusHistory = [];
    deleteFocus();
    if (pageApp) {
      $(".box-popup#pop-switch #icon" + appVersion).addClass("close");
    }
    $(this).addClass("open clicked").one(animationEnd, function () {
      addTransition($fadeAll, "fadeIn", "opacity", function () {
        gotoAppUrl(j);
      });
    });
  }
}
function initJqueryVar() {
  $body = $("body");
  $fadeAll = $("#fade-all");
  $lockAll = $("#lock-all").on(pointerEventType.down, stopProp);
  $bckGlobal = $("#bck-global");
  $homeBtInfo = $("#home-bt-info");
  $homeBtParam = $("#home-bt-param");
  $homeBtFs = $("#home-bt-fs");
  if (pageApp) {
    $incredibox = $("#app-incredibox");
    $lockPause = $("#lock-pause").on(pointerEventType.down, function (h) {
      h.preventDefault();
      if (h.pageY - $incredibox[0].getBoundingClientRect().y < $incredibox[0].getBoundingClientRect().height * 0.7) {
        preventAction(clickBtClock);
      }
    });
    ($mixlist = $("#mixlist")).isOpen = function () {
      return $mixlist.hasClass("show");
    };
    $tabLatest = $("#tab-latest");
    $tabTop50 = $("#tab-top50");
    $tabSearch = $("#tab-search");
    $tabMixlist = $("#tab-mixlist");
    $home = $("#home");
    $homeBck = $("#home #img-bck");
    $homeVersion = $("#home #img-version");
    $homeTitre = $("#home #img-titre");
    $homeLoadbox = $("#home #load-box");
    $homeLoadbar = $("#home #load-box #load-bar");
    $homeBtPlay = new CustomButton($("#home #home-bt-play"));
    $homeBtList = new CustomButton($("#home #home-bt-list"));
    $homeBtSwitch = $("#home #home-bt-switch");
    $boxBt = $("#box-bt");
    $btBack = $("#bt-back");
    ($btTool = $("#bt-tool")).$bck = $("#bt-tool .bck");
    $btTool.$svg = $btTool.$bck.find("svg use");
    $btTool.bounce = function () {
      this.addClass("animateBounce").one(animationEnd, function (h) {
        $(h.target).removeClass("animateBounce");
      });
    };
    $btStop = $("#bt-stop");
    $btRandom = $("#bt-random");
    $btRecord = $("#bt-record");
    $btHome = $("#bt-home");
    $btHelp = $("#bt-help");
    $btSwitch = $("#bt-switch");
    $btClock = $("#bt-clock");
    $cntRecord = $("#cnt-record");
    $btSave = $("#bt-save");
    $btLike = $("#bt-like");
    $boxStage = $("#box-stage");
    $boxVideo = $("#box-video");
    $fadeVideo = $("#fade-video");
    $boxTop = $("#box-top");
    $boxBtBonus = $("#box-bt-bonus");
    $boxBottom = $("#box-bottom");
    $boxPicto = $("#box-picto");
    $boxLoaderPolo = $("#box-loader-polo");
    ($watchInfo = $("#watch-info")).$title = $("#watch-info .title");
    $watchInfo.$name = $("#watch-info .name");
    $watchInfo.$dedi = $("#watch-info .dedi");
    $watchInfo.$date = $("#watch-info .date");
    boxSwitch = new Popup(".box-popup#pop-switch");
    $(".box-popup#pop-switch #icon" + appVersion).addClass("open");
    $(".box-popup#pop-switch .vicon").on(pointerEventType.up, switchVersion);
  }
}
function removeFadeAll() {
  if (($fadeAll = isnull($fadeAll) ? $("#fade-all") : $fadeAll).hasClass("fadeIn")) {
    $fadeAll.removeClass("fadeIn");
  }
}
function clickAndroidBackButton() {
  if (pageApp) {
    if (onGame && loopOn && !pause) {
      stopAllStage();
    } else {
      gotoAppUrl("index.html?back=1");
    }
  } else {
    exitApp();
  }
}
function pageIndexReady() {
  cloud.sync(storage.restoreMixFromDB);
  removeTransition($("#fade-all"), "fadeIn", "opacity", function () {
    if (window.cordova) {
      $("#fade-all").removeClass("white");
    }
  });
  if (getParameterByName("skipintro")) {
    introComplete();
    return false;
  }
  afterPP();
}
function afterPP() {
  checkRatingModul(function () {
    // TOLOOK
    setTimeout(launchIntro, 2000);
  });
}
function launchIntro() {
  $("#page-splash #sp-title").addClass("titleTweenUp");
  $("#page-splash #sp-baseline").addClass("baselineTweenUp");
  $("#page-splash #sp-experience").html(STR("txt.useHeadphones")).addClass("experienceTweenUp");
  $("#page-splash #sp-headphone").addClass("headphoneTweenUp");
  // TOLOOK
  setTimeout(function () {
    $("#page-splash #sp-title").addClass("titleTweenUpHide");
    $("#page-splash #sp-experience").addClass("experienceTweenUpHide");
    $("#page-splash #sp-choose").html(STR("txt.selectVersion")).addClass("chooseTweenUp");
    $("#page-splash #sp-headphone").addClass("headphoneTweenUpHide").one(animationEnd, introComplete);
  }, 2500);
}
function introComplete() {
  $homeBtInfo.on(pointerEventType.down, popupInfo).addClass("animate");
  $homeBtParam.on(pointerEventType.down, popupParam).addClass("animate");
  $homeBtFs.on(pointerEventType.down, function () {
    callParentWindow("openFullscreen");
  }).addClass("animate");
  activeBtNews();
  $("#page-splash").addClass("enabled");
  $("#page-splash #sp-select .vicon").addClass("iconTweenUp").on(pointerEventType.up, switchVersion);
  createFocus("index-select");
}
document.addEventListener(window.cordova ? "deviceready" : "DOMContentLoaded", pageLoadComplete, false);
var rateShown = false;
function checkRatingModul(g) {
  var h = {
    IyZcm: "false:0",
    TjfgQ: function (q, r) {
      return q(r);
    },
    XrFYO: "QUFpk",
    XPBdo: "steam"
  };
  var j;
  var k;
  var l = 0;
  var m = "ratemsg";
  function p(q) {
    if (q == 1) {
      storage.setItem(m, h.IyZcm);
    } else if (q == 2) {
      storage.removeItem(m);
    } else {
      storage.removeItem(m);
      h.TjfgQ(openURL, isIOS || window.electron && isOSX ? build.storeRateURL : build.storeURL);
    }
    g();
  }
  if (!((window.cordova || window.electron) && hasNetwork && !isSafeMode() && h.XPBdo != build.store && (isnull(storage.getItem(m)) && storage.setItem(m, "true:0"), h.TjfgQ(isnull, j = storage.getItem(m)) || (j = String(j).split(":"), k = Boolean(j[0] == "true"), l = Number(j[1]), k && (++l >= 5 ? (rateShown = true, boxDialog.open(STR("pop.rateText"), STR("pop.rateTitle"), [STR("bt.nope"), STR("bt.later"), STR("bt.sure")], [function () {
    p(1);
  }, function () {
    if (h.XrFYO !== "lDtel") {
      p(2);
    } else {
      return h;
    }
  }, function () {
    p(3);
  }])) : storage.setItem(m, "true:" + String(l)))), rateShown))) {
    g();
  }
}
function reinitRatingModul() {
  storage.setItem("ratemsg", "true:0");
}
function showPopupPP(g) {
  g();
}
var app;
var clock;
var mainCanvas;
var contextCanvas;
var localMixObject;
var mixlink = getParameterByName("mix");
var miniPlayer = mixlink != null || getParameterByName("replay") == "1";
var appNumberVersion = miniPlayer && mixlink ? mixlink.slice(-1) : getParameterByName("v");
var appVersion = pageApp && (isnull(appNumberVersion) || isNaN(appNumberVersion) || appNumberVersion.length != 1) ? 4 : appNumberVersion;
var appVersion = pageApp && miniPlayer && mixlink && mixlink.indexOf("-") == -1 && mixlink.length == 13 ? 2 : appVersion;
var appLoaded = false;
var appViewed = false;
var modeWatch = false;
var isBackToHome = false;
var delayassist = 500;
var onGame = false;
var loopOn = false;
var pause = false;
function pageAppReady() {
  initRightClick();
  initSilentMode();
  listenFocus();
  initAd();
  contextCanvas = $("#cnv-stage")[0].getContext("2d");
  initAudioContext();
  initAudioRoute();
  if (bugBluetoothLatency()) {
    return false;
  }
  $home.addClass("animate");
  $home[0].onanimationend = () => {
    $home.removeClass("animate");
  };
  removeTransition($fadeAll, "fadeIn", "opacity", function () {
    (miniPlayer ? displayHomeReplay : (initMixlist(), showHome))();
  });
}
var loopDuration;
var nbPoloMax;
var mixToWatchLoaded = false;
var displayHomeReplayWaiting = false;
function tryToLoadMix() {
  xhr("GET", domainOnline + "ph3/get-mix-db.php", {
    id: mixlink
  }, function (h) {
    mixToWatchLoaded = !(mixToWatch = null);
    if (h.state == "success") {
      mixToWatch = h.mixlist[0];
    } else {
      popupGeneralError({
        error: "load mix",
        action: "kill"
      });
    }
    if (displayHomeReplayWaiting) {
      displayHomeReplay();
    }
  }, function (h) {
    popupGeneralError({
      error: "mix not found",
      action: "kill"
    });
    mixToWatchLoaded = true;
  });
}
function prepareMixReplay(g) {
  mixToWatchLoaded = true;
  mixToWatch = g;
}
function displayHomeReplay() {
  if (mixToWatchLoaded) {
    if (mixToWatch.dedi && mixToWatch.dedi != "") {
      $("#home #home-dedicated").html(STR("txt.dedicatedTo").replace("%{name}", mixToWatch.dedi));
      $("#home #home-dedicated").addClass("animate");
    }
    $fadeAll.removeClass("fadeIn");
    if (!isnull(mixToWatch)) {
      parseXmlAndCheckAssets();
      showHomeLoadbar();
    }
  } else {
    displayHomeReplayWaiting = true;
    if (!isIframe) {
      tryToLoadMix();
    }
  }
}
function showHome() {
  unlock();
  unlockScreenEdges();
  $fadeAll.removeClass("fadeIn");
  $homeTitre.addClass("animate");
  $homeVersion.addClass("animate");
  if (!(appViewed = miniPlayer && appBrowserSchool ? true : appViewed)) {
    appViewed = true;
    (appLoaded ? showBtHome : showHomeLoadbar)();
    $homeBtSwitch.on(pointerEventType.down, function (h) {
      preventAction(popupSwitch);
    }).addClass("animate");
    $homeBtInfo.on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(popupInfo);
    }).addClass("animate");
    $homeBtParam.on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(popupParam);
    }).addClass("animate");
    $homeBtFs.on(pointerEventType.down, function (h) {
      h.preventDefault();
      callParentWindow("openFullscreen");
    }).addClass("animate");
    activeBtNews();
  }
}
function showHomeLoadbar() {
  $homeLoadbox.addClass("animate");
  preparerArray();
}
function hideHomeLoadbar() {
  $homeLoadbox.removeClass("animate");
  if (miniPlayer) {
    if (appBrowserSchool) {
      callParentWindow("replayIsReady", {
        func: function () {
          if (loopOn) {
            clickBtClock();
          } else {
            forceUserGesture(function () {
              clickBtWatch(mixToWatch);
            });
          }
        }
      });
    } else {
      showBtPlayListen();
    }
  } else {
    showBtHome(true);
  }
}
function showBtPlayListen() {
  $homeBtPlay.on(pointerEventType.down, function () {
    $homeBtPlay.addSpinner();
    forceUserGesture(function () {
      clickBtWatch(mixToWatch);
      callParentWindow("replayStart", mixToWatch);
    });
  });
  $homeBtPlay.addClass("animate");
  var h = 0;
  $body.on(pointerEventType.down, function (i) {
    h = window.top.scrollY;
  });
  $body.on(pointerEventType.up, function (i) {
    if (window.top.scrollY == h && loopOn) {
      clickBtClock();
    }
  });
  $lockPause.off();
}
function showBtHome(g) {
  if (g) {
    createFocus("home");
  }
  $homeBtPlay.addClass("animate");
  $homeBtList.addClass("animate");
  $homeBtPlay.on(pointerEventType.down, function () {
    lock();
    $homeBtPlay.addSpinner();
    forceUserGesture(clickHomeBtPlay);
  });
  $homeBtList.on(pointerEventType.down, function () {
    if (appBrowser) {
      dialogGetApp();
    } else {
      lock();
      $homeBtList.addSpinner();
      forceUserGesture(clickHomeBtPlaylist);
    }
  });
  if (debugGame) {
    clickHomeBtPlay();
  }
}
function clickHomeBtPlaylist() {
  deleteFocus();
  lock();
  TweenMax.delayedCall(0.5, function () {
    unlock();
    openPlaylist();
  });
}
function clickHomeBtPlay() {
  if (appBrowserSchool && !miniPlayer) {
    callParentWindow("clickBtPlay");
  }
  deleteFocus();
  addTransition($fadeAll, "fadeIn", "opacity", function () {
    callAd("start", "new-game", hideHome);
  });
}
function hideHome() {
  lock();
  lockScreenEdges();
  detectSilentMode();
  onGame = !(isBackToHome = false);
  $home.hide();
  $incredibox.addClass("show");
  document.body.classList.remove("darkback");
  $homeBtPlay.removeSpinner();
  renderRAF.start();
  if (modeWatch) {
    prepareReplayMode();
    afficherAllPolo(true);
  } else {
    showDiv($boxBtBonus);
    showDiv($boxPicto);
    showDiv($boxLoaderPolo);
    baisserAllPolo();
  }
  removeTransition($fadeAll, "fadeIn", "opacity", lancerApp);
}
function backToHome(g) {
  deleteFocus();
  lock();
  isBackToHome = true;
  pictoForceOnDrop();
  addTransition($fadeAll, "fadeIn", "opacity", function () {
    hideGame();
    if (g) {
      g();
    }
  });
}
function hideGame() {
  document.body.classList.add("darkback");
  onGame = false;
  stopAllStage();
  renderRAF.stop();
  closeTool();
  checkIfPopupOpen();
  $home.show();
  $incredibox.removeClass("show");
  removeTransition($fadeAll, "fadeIn", "opacity", showHome);
  if (modeWatch) {
    reinitModeWatch();
    createFocusFromHistory();
  } else {
    focusHistory = [];
    createFocus("home");
  }
}
function lancerApp() {
  $fadeAll.removeClass("fadeIn");
  if (modeWatch) {
    startReplayMode();
  } else {
    unlock();
    afficherAllPolo();
    createFocus("toolbar");
    if (isnull(storage.getItem("popupDragViewed"))) {
      // TOLOOK
      setTimeout(popupDrag, 600);
    }
  }
  saveGA("game", "launch");
}
var listPolo;
var listPicto;
var readingBar;
var randomMix;
var recordMix;
var replayMix;
var listBonus = [];
var listPoloDrop = [];
var listPoloToRemove = [];
var listPoloToSolo = [];
var poloAllVisible = false;
var modeRandom = false;
var modeRecord = false;
var modeReplay = false;
var waitForRecording = false;
var mouseX = 0;
var mouseY = 0;
function createGame() {
  appLoaded = true;
  loopDuration = app.looptime;
  nbPoloMax = app.nbpolo;
  stepAnimation = frameHalf / loopDuration;
  stepPercent = 100 / loopDuration;
  tabBuffer.metro[0].snd = audioCtx.createBuffer(2, globalSampleRate * (app.looptime / 1000), globalSampleRate);
  (sndMetronome = new SoundObject("metronome")).setSilence();
  (clock = new ClockObject("cnv-clock")).init(76, 76, 1, 68, 16);
  renderRAF = new RenderRAF(renderLoop);
  mainCanvas = new CanvasObj("cnv-stage");
  if (miniPlayer) {
    (recordMix = function () {}).xmlAction = function () {};
    randomMix = function () {};
  } else {
    randomMix = new RandomMix();
    recordMix = new RecordMix();
  }
  replayMix = new ReplayMix();
  readingBar = new ReadingBar("#reading-bar", app.recminloop, app.recmaxloop);
  listPolo = createBoxPolo();
  majListPoloDrop();
  listPicto = createBoxPicto();
  createBtBonus();
  listBonus = createBoxBonus();
  document.getElementById("box-stage-bck").style.backgroundImage = "url(" + listImages.gameBck.src + ")";
  if (!miniPlayer) {
    document.querySelectorAll(".picto .bck").forEach(h => {
      h.style.backgroundImage = "url(" + listImages.gamePicto.src + ")";
    });
  }
  enableBtGame();
  resizeApp();
}
function createBoxPicto() {
  for (var g = [], h = "", j = "", k = 0, k = 0; k < nbSound; k++) {
    var l = "<div class=\"picto\" id=\"picto" + k + "\" data-picto-num=\"" + k + "\"><div class=\"bck\"></div><div class=\"hitzone\"></div></div>";
    if (k < 10) {
      h += l;
    } else {
      j += l;
    }
  }
  $boxPicto.find(".pictoline.top").html(h);
  $boxPicto.find(".pictoline.bot").html(j);
  k = 0;
  for (; k < nbSound; k++) {
    g.push(new PictoObject(k, $boxPicto));
  }
  return g;
}
function createBoxPolo() {
  for (var g = [], h = "", i = "", j = 0, j = 0; j < nbPoloMax; j++) {
    h += "\n\t\t\t<div class=\"polo\" data-polo-id=\"" + j + `">
\t\t\t\t<div class="ctrl">
\t\t\t\t\t<div class="cbt icon-game-bt-mute"><svg class="icn-svg"><use xlink:href="#ic-mute"></use></svg></div>
\t\t\t\t\t<div class="cbt icon-game-bt-solo"><svg class="icn-svg"><use xlink:href="#ic-solo"></use></svg></div>
\t\t\t\t\t<div class="cbt icon-game-bt-delete"><svg class="icn-svg"><use xlink:href="#ic-close"></use></svg></div>
\t\t\t\t</div>
\t\t\t</div>`;
    i += "\n\t\t\t<div class=\"zone\" data-polo-id=\"" + j + `">
\t\t\t\t<div class="loader">
\t\t\t\t\t<div class="bar"></div>
\t\t\t\t</div>
\t\t\t</div>`;
  }
  document.querySelector("#box-polo").innerHTML = h;
  document.querySelector("#box-loader-polo").innerHTML = i;
  j = 0;
  for (; j < nbPoloMax; j++) {
    g.push(new PoloObject(j, contextCanvas));
  }
  return g;
}
function createBoxBonus() {
  for (var h = [], j = 0; j < nbBonus; j++) {
    for (var k = app.bonusarray[j], l = k.code.split(","), m = $("#bt-bonus-" + (j + 1)), p = 0, q = l.length; p < q; p++) {
      var u = app.animearray[l[p] - 1].color;
      $(".svg.q" + (p + 1) + " svg", m).css({
        fill: "#" + u
      });
    }
    if (!tabBuffer.bonus[j].aspire) {
      tabBuffer.bonus[j].aspire = audioCtx.createBuffer(2, globalSampleRate * (app.looptime / 1000), globalSampleRate);
    }
    k = new BonusObject(j, k, tabBuffer.bonus[j]);
    h.push(k);
  }
  return h;
}
function createBtBonus() {
  for (var g = "", h = 1; h <= nbBonus; h++) {
    g += "\n\t\t\t<div class=\"bt-bonus\" id=\"bt-bonus-" + h + `">
\t\t\t\t<div class="circle"></div>
\t\t\t\t<div class="quarter">
\t\t\t\t\t<div class="svg q0"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M83.88,29.72A42.83,42.83,0,1,0,86,43,43,43,0,0,0,83.88,29.72ZM43,58.64A15.69,15.69,0,0,1,27.36,43,15.64,15.64,0,1,1,52.18,55.64,15.52,15.52,0,0,1,43,58.64Z"/></svg></div>
\t\t\t\t\t<div class="svg q1"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M57.87,38.17l26-8.45A43,43,0,0,0,43,0V27.36A15.65,15.65,0,0,1,57.87,38.17Z"/></svg></div>
\t\t\t\t\t<div class="svg q2"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M83.88,29.72l-26,8.45a15.58,15.58,0,0,1-5.69,17.47L68.25,77.75a42.83,42.83,0,0,0,15.63-48Z"/></svg></div>
\t\t\t\t\t<div class="svg q3"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M52.18,55.64a15.55,15.55,0,0,1-18.36,0L17.75,77.75a42.77,42.77,0,0,0,50.5,0Z"/></svg></div>
\t\t\t\t\t<div class="svg q4"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M27.36,43a15.71,15.71,0,0,1,.77-4.83l-26-8.45a42.88,42.88,0,0,0,15.64,48L33.82,55.64A15.61,15.61,0,0,1,27.36,43Z"/></svg></div>
\t\t\t\t\t<div class="svg q5"><svg x="0px" y="0px" width="86px" height="86px" viewBox="0 0 86 86"><path d="M43,27.36V0A43,43,0,0,0,2.11,29.72l26,8.45A15.65,15.65,0,0,1,43,27.36Z"/></svg></div>
\t\t\t\t</div>
\t\t\t\t<canvas id="canvas-bt-bonus-` + h + `" width="86" height="86"></canvas>
\t\t\t\t<div class="icon">
\t\t\t\t\t<div class="icn-bck"></div>
\t\t\t\t</div>
\t\t\t\t<div class="hitzone"></div>
\t\t\t\t<div class="box-loader">
\t\t\t\t\t<div class="zone"><div class="loader"><div class="bar"></div></div></div>
\t\t\t\t</div>
\t\t\t</div>`;
  }
  $boxBtBonus.append(g);
}
var isToolbarOpen = false;
var isToolbarMove = false;
function enableBtGame() {
  $btBack.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickTool);
    }
  });
  $btStop.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove && loopOn) {
      preventAction(clickBtStop);
    }
  });
  $btRandom.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtRandom);
    }
  });
  $btRecord.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtRecord);
    }
  });
  $btHome.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtHome);
    }
  });
  $btHelp.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtHelp);
    }
  });
  $btSwitch.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtSwitch);
    }
  });
  enableBtTool();
  enablePictoDraggable();
}
function enableBtTool() {
  $btTool.on(pointerEventType.down, function (g) {
    g.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickTool);
    }
  });
}
function clickTool() {
  isToolbarMove = true;
  (isToolbarOpen ? closeTool : openTool)();
}
function openTool() {
  deleteFocus();
  document.body.addEventListener(pointerEventType.down, clickStage);
  addTransition($boxBt, "open", "transform", endToolMove, true);
  isToolbarOpen = true;
}
function closeTool() {
  deleteFocus();
  document.body.removeEventListener(pointerEventType.down, clickStage);
  removeTransition($boxBt, "open", "transform", endToolMove);
  isToolbarOpen = false;
}
function endToolMove() {
  isToolbarMove = false;
  if (onGame) {
    createFocus(isToolbarOpen ? "toolbar-open" : "toolbar");
  }
}
function clickStage(g) {
  if (!$boxBt[0].contains(g.target)) {
    clickTool();
  }
}
function clickBtStop() {
  stopAllStage();
}
function clickBtHome() {
  backToHome();
}
function clickBtRandom() {
  startRandomMode();
}
function clickBtRecord() {
  startRecordMode();
}
function clickBtHelp() {
  backToHome(popupInfo);
}
function clickBtSwitch() {
  backToHome(popupSwitch);
}
function baisserAllPolo() {
  if (poloAllVisible) {
    poloAllVisible = false;
    for (var g = 0; g < nbPoloMax; g++) {
      listPolo[g].baisser();
    }
  }
}
function afficherAllPolo(g) {
  if (!poloAllVisible) {
    poloAllVisible = true;
    for (var h = 0; h < nbPoloMax; h++) {
      listPolo[h].remonte(h * 0.03, false, g);
    }
  }
}
function habillerPolo(g, h, j, k) {
  j = isnull(j) ? 0 : j;
  var m = h.id;
  var m = tabAnime[m];
  g.habiller(h, cntBoucle, m, j, k);
  if (loopOn) {
    g.showLoader();
    g.activerClick();
  } else if (!waitingFirstLoop) {
    waitingFirstLoop = true;
    checkAudioCanRun().then(() => {
      startFirstLoop();
    }).catch(p => {
      rebuildAudioContext().then(() => {
        startFirstLoop();
      }).catch(() => {
        stopAllStage();
        popupGeneralError({
          error: "Audio",
          action: "reload"
        });
      });
    });
  }
}
function startFirstLoop() {
  waitingFirstLoop = false;
  globalVolumeFadeIn();
  enableClickFirstPolos();
  startLoop();
  if (waitForRecording) {
    startRecording();
  }
  enableBtClock();
}
function enableClickFirstPolos() {
  for (var g = 0; g < nbPoloMax; g++) {
    var h = listPolo[g];
    if (h.getBusy()) {
      h.activerClick();
    }
  }
}
function clickPolo(g) {
  if (!(bonusPlaying || modeRandom || ((g = g).desactiverClick(), getRemainingTime() < delayassist ? listPoloToRemove.push(g) : removePolo(g), (g = getListPoloBusy().length) !== 0 && g != listPoloToRemove.length))) {
    stopLoop();
  }
}
function mutePolo(g) {
  g.mute();
}
function unmutePolo(g) {
  g.unmute();
}
function soloPolo() {
  for (var g = getListPoloBusy(), h = g.length, i = 0; i < h; i++) {
    var j = g[i];
    if (j.getSolo()) {
      j.unmute();
    } else {
      j.mute();
    }
  }
}
function muteAll(g) {
  for (var h = getListPoloBusy(), j = h.length, k = 0; k < j; k++) {
    var l = h[k];
    if (l.id != g.id) {
      l.setSolo(false);
      l.mute();
    } else {
      l.setSolo(true);
      l.unmute();
    }
  }
}
function unmuteAll() {
  for (var h = getListPoloBusy(), i = h.length, j = 0; j < i; j++) {
    var k = h[j];
    k.setSolo(false);
    listPoloToSolo.push(k);
  }
  if (getRemainingTime() > delayassist) {
    checkPoloToSolo();
  }
}
function checkPoloToSolo() {
  for (var g = 0, h = listPoloToSolo.length; g < h; g++) {
    listPoloToSolo[g].unmute();
  }
  listPoloToSolo = [];
}
function getTotalSolo() {
  for (var g = getListPoloBusy(), h = g.length, i = 0, j = 0; j < h; j++) {
    if (g[j].getSolo()) {
      i++;
    }
  }
  return i;
}
function stopSoloPolo() {
  for (var g = getListPoloBusy(), h = g.length, i = 0; i < h; i++) {
    var j = g[i];
    listPoloToSolo.push(j);
  }
  if (getRemainingTime() > delayassist) {
    checkPoloToSolo();
  }
}
function stopOtherSolo() {
  for (var g = getListPoloBusy(), h = g.length, i = 0; i < h; i++) {
    g[i].setSolo(false);
  }
}
function removePolo(g, h, i) {
  checkerCodeBonus(g.getPicto(), false);
  if (getTotalSolo() == 1 && g.getSolo()) {
    g.setSolo(false);
    stopSoloPolo();
  }
  g.deshabiller(h, bonusPlaying);
  g.desactiverClick();
  g.stopSound(i);
  h = getListPoloBusy();
  if (h.length == 1 && (g = h[0]).getSolo() && isMouseDevice && !isTouchDevice) {
    g.setSolo(false);
  }
}
function checkPoloToRemove(g) {
  for (var h = listPoloToRemove.length, j = bonusPlaying ? 0.01 : 0.03, k = 0, l = h - 1; k < h; k++, l--) {
    removePolo(listPoloToRemove[k], l * j, g);
  }
  listPoloToRemove = [];
}
function poloStartWatchPicto() {
  for (var g = 0, h = listPoloDrop.length; g < h; g++) {
    if (listPoloDrop[g].state != "hover") {
      listPoloDrop[g].mode("regarde");
    }
  }
}
function poloStopWatchPicto() {
  for (var h = 0, i = listPoloDrop.length; h < i; h++) {
    listPoloDrop[h].mode("normal");
  }
}
function checkPictoHoverPolo(g) {
  for (var h = 0, i = listPoloDrop.length; h < i; h++) {
    var j = listPoloDrop[h];
    if (j.hitTestPicto(g)) {
      j.rollover();
      j.pictoHoverId = g.id;
    } else if (j.pictoHoverId == g.id) {
      j.rollout();
      j.pictoHoverId = null;
    }
  }
}
function pictoOnDrop(g, h) {
  var j;
  var k = 0;
  var h = !!notnull(h) && h;
  var l = listPoloDrop.length;
  var m = false;
  if (!h && !isBackToHome) {
    for (k = 0; k < l; k++) {
      if (!m) {
        if ((j = listPoloDrop[k]).hitTestPicto(g)) {
          m = true;
          pictoTouchePolo(j, g);
        }
      }
    }
  }
  if (m) {
    majListPoloDrop();
    listPoloDrop.length;
  } else {
    g.replacer();
  }
}
function pictoTouchePolo(g, h, i, j) {
  h.absorber(g);
  checkerCodeBonus(h, true);
  habillerPolo(g, h, i, j);
  if (getTotalSolo() > 0) {
    g.mute();
  }
}
function majListPoloDrop() {
  listPoloDrop = [];
  for (var h = 0; h < nbPoloMax; h++) {
    var i = listPolo[h];
    if (!i.getBusy()) {
      listPoloDrop.push(i);
    }
  }
}
var btClockClickedAt = 0;
function clickBtClock() {
  if (getTime() - btClockClickedAt > 350) {
    pauseGame();
    btClockClickedAt = getTime();
  }
}
function enableBtClock() {
  $btClock.off().on(pointerEventType.down, function (g) {
    g.preventDefault();
    preventAction(clickBtClock);
  }).addClass("enable");
}
function disableBtClock() {
  $btClock.off().removeClass("enable");
}
var curBonus = null;
function clickBtBonus(g) {
  bonusWaiting = true;
  curBonus = listBonus[(bonusQueue = g) - 1];
  checkSndAspiration(true);
  g = decimal(getRemainingTimeBeforeBonus() / 1000, 2);
  g = (g = g - 0.5) < 0.5 ? 0 : g;
  TweenMax.delayedCall(g, showBlackFadeAtStart);
}
function cancelClickBtBonus() {
  if (bonusWaiting) {
    stopBonusVideo();
  }
}
function showBlackFadeAtStart() {
  $boxVideo.addClass("visible");
  $fadeVideo[0].offsetHeight;
  $fadeVideo.addClass("animateFadeIn");
  if (!(modeReplay || modeRandom || miniPlayer)) {
    hideDiv($boxPicto, true);
    hideDiv($boxLoaderPolo, true);
  }
}
function blackFadeRemoved() {
  $boxVideo.removeClass();
  $fadeVideo.removeClass();
  if (!(modeReplay || modeRandom || miniPlayer)) {
    $boxStage.removeClass("pointerlock");
    showDiv($boxPicto, true);
    showDiv($boxLoaderPolo, true);
  }
}
function videoSlideDown() {
  if (bottomNeedSlide && !miniPlayer) {
    $body.addClass("bottomSlide");
  }
}
function launchBonusVideo() {
  $boxVideo.addClass("visible");
  $boxStage.addClass("pointerlock");
  $fadeVideo.removeClass();
  pictoForceOnDrop();
  videoSlideDown();
  curBonus.play();
  bonusPlaying = !(bonusWaiting = false);
}
function stopBonusVideo() {
  killTransitionBonus();
  if (curBonus) {
    curBonus.stop();
  }
  videoFadeOut();
  bonusPlaying = bonusWaiting = false;
  cntBoucleBonus = bonusQueue = 0;
  curBonus = null;
}
function videoFadeOut() {
  if ($boxVideo.hasClass("visible")) {
    $fadeVideo.removeClass().addClass("show");
    $fadeVideo[0].offsetHeight;
    if ($body.hasClass("bottomSlide")) {
      $body.removeClass("bottomSlide");
      $boxVideo.one(transitionEnd, function () {
        $fadeVideo.addClass("animateFadeOut").one(animationEnd, blackFadeRemoved);
      });
    } else {
      $fadeVideo.addClass("animateFadeOut").one(animationEnd, blackFadeRemoved);
    }
  } else {
    blackFadeRemoved();
  }
}
function killTransitionBonus() {
  TweenMax.killTweensOf(showBlackFadeAtStart);
}
function checkerCodeBonus(g, h) {
  for (var i = g.id + 1, j = 0; j < nbBonus; j++) {
    listBonus[j].checkCode(i, h);
  }
}
function checkUnlockNextBonus() {
  var g;
  var h;
  if (!(modeReplay || modeRandom)) {
    g = curBonus.getId();
    h = "v" + appVersion + "-bonus-complete";
    if ((storage.getItem(h) || 0) <= g && g < nbBonus - 1) {
      storage.setItem(h, h = g + 1);
      listBonus[h].unlockme();
      popupBonusFindNext();
    }
  }
}
function showDiv(g, h, i) {
  if (h) {
    addTransition(g, "fade", "opacity", i);
  } else {
    g.removeClass("fade");
  }
  g.removeClass("hide");
}
function hideDiv(g, h, i) {
  if (h) {
    addTransition(g, "fade", "opacity", i);
  } else {
    g.removeClass("fade");
  }
  g.addClass("hide");
}
var timenow;
var timespent;
var renderRAF;
var sndMetronome;
var waitingFirstLoop = false;
var bonusPlaying = false;
var bonusWaiting = false;
var shouldImmediatePlayBonus = false;
var bonusQueue = 0;
var leaveApp = false;
var boucleA = true;
var cntBoucle = 0;
var cntBoucleBonus = 0;
var timeremain = 0;
var pctMetronome = 0;
var pctMetronomeBoucleA = 0;
var frame = 0;
var frameTotal = 0;
var frameHalf = 0;
var framePart2 = 0;
var stepAnimation = 0;
var stepPercent = 0;
var currentSndPart = 0;
var startboucle = 0;
var pausedAt = 0;
function loopFinished() {
  checkPoloToRemove();
  checkPoloToSolo();
  if (modeRandom) {
    randomMix.loop();
  }
  if (modeReplay) {
    if (replayMix.waitForReloop && cntBoucleBonus == curBonus.nbLoop) {
      replayMix.waitForReloop = false;
      replayMix.reloop = true;
    }
    readingBar.loop();
  }
  if (loopOn) {
    startLoop();
  }
  if (modeRecord) {
    readingBar.loop();
  }
}
function startLoop() {
  if (bonusPlaying && cntBoucleBonus == curBonus.nbLoop && app.bonusendloopA && !boucleA) {
    boucleA = true;
  }
  if (cntBoucle == 0) {
    keepAppAwake();
  }
  startboucle = getTime();
  loopOn = true;
  frame = 0;
  currentSndPart = boucleA ? framePart2 = 0 : (framePart2 = frameHalf, 1);
  clock.start(loopDuration, boucleA);
  sndMetronome.prepare(tabBuffer.metro[0].snd);
  if (modeReplay && readingBar.isLastLoop()) {
    sndMetronome.onComplete(readingBar.loop);
  } else {
    sndMetronome.onComplete(loopFinished);
  }
  if (bonusWaiting || bonusPlaying) {
    playBonus();
  }
  if (!bonusPlaying) {
    playSounds();
  }
  checkSndAspiration();
  sndMetronome.play();
  cntBoucle++;
  boucleA = !boucleA;
}
function checkSndAspiration(g) {
  if (bonusWaiting) {
    if (g) {
      if ((boucleA || !app.bonusloopA) && getRemainingTime() > 600) {
        curBonus.playAspiration(decimal(getTimeSpent() / 1000, 2));
      }
    } else if (!boucleA) {
      curBonus.playAspiration(0);
    }
  }
}
function stopLoop() {
  boucleA = !(loopOn = false);
  currentSndPart = cntBoucle = 0;
  clock.stop();
  stopBonusVideo();
  checkPoloToRemove(bonusPlaying);
  sndMetronome.stop();
  disableBtClock();
  if (modeRecord) {
    stopRecordMode();
  }
  if (modeReplay) {
    stopReplayMode();
  }
  stopKeepingAppAwake();
}
function playBonus() {
  var g = !app.bonusloopA || boucleA;
  if ((g = modeReplay ? !!replayMix.waitForReloop || g : g) && !bonusPlaying) {
    launchBonusVideo();
    hidePoloLoader();
  }
  if (bonusPlaying && ++cntBoucleBonus > curBonus.nbLoop) {
    checkUnlockNextBonus();
    stopBonusVideo();
  }
}
function playSounds() {
  for (var g = 0; g < nbPoloMax; g++) {
    var h = listPolo[g];
    if (h.getBusy()) {
      if (h.waitOneLoop) {
        h.showLoader();
        h.waitOneLoop = false;
      } else {
        playSoundPolo(h);
      }
    }
  }
}
function playSoundPolo(g) {
  var h = currentSndPart == 0 ? "sndA" : "sndB";
  g.sound.prepare(tabBuffer.sound[g.getAssetId()][h]);
  g.hideLoader();
  if (!(g.getMute() || g.getHide())) {
    g.mode("anime");
  }
  g.playSound();
}
function renderLoop() {
  timenow = getTime();
  timespent = getTimeSpent();
  timeremain = getTimeRemain();
  pctMetronome = timespent * stepPercent;
  pctMetronomeBoucleA = app.bonusloopA ? decimal(100 - (pctMetronomeBoucleA = getRemainingTime(!boucleA) * stepPercent) / 2, 2) : pctMetronome;
  frame = Math.floor(timespent * stepAnimation);
  clock.render();
  readingBar.render();
  if (!isnull(curBonus)) {
    if (bonusPlaying) {
      curBonus.render();
    }
  }
  if (!bonusPlaying) {
    mainCanvas.clear();
    for (var g = 0; g < nbPoloMax; g++) {
      listPolo[g].draw();
    }
  }
}
function stopAllStage() {
  if (modeRandom) {
    stopRandomMode();
  }
  pictoForceOnDrop();
  for (var h = getListPoloBusy(), i = 0, j = h.length; i < j; i++) {
    var k = h[i];
    listPoloToRemove.push(k);
  }
  i = 0;
  j = listBonus.length;
  for (; i < j; i++) {
    listBonus[i].reinit();
  }
  globalVolumeFadeOut(stopLoop);
}
function hidePoloLoader() {
  for (var g = getListPoloBusy(), h = 0, i = g.length; h < i; h++) {
    g[h].hideLoader();
  }
}
var gamePausedByUser = false;
function pauseGame() {
  (pause ? (gamePausedByUser = false, pauseOff) : (gamePausedByUser = true, pauseOn))();
}
function pauseOn() {
  if (!pause) {
    pause = true;
    pausedAt = getTime();
    $body.addClass("pause");
    pauseAudioContext();
    if (onGame) {
      if (isToolbarOpen) {
        closeTool();
      }
      if (loopOn && !froze && (clock.pause(), TweenMax.pauseAll(), curBonus)) {
        curBonus.pause();
      }
      if (froze) {
        clearTimeout(controlTimeout);
      }
      renderRAF.stop();
      pictoForceOnDrop();
      createFocus("game-paused");
    }
  }
}
function pauseOff() {
  if (pause && (pause = false, startboucle += getTime() - pausedAt, $body.removeClass("pause"), resumeAudioContext(), onGame)) {
    if (loopOn && !froze && (clock.resume(), TweenMax.resumeAll(), curBonus)) {
      curBonus.resume();
    }
    if (froze) {
      controlTimeoutComplete();
    }
    renderRAF.start();
    removeInFocusHistory("game-paused");
    createFocusFromHistory();
  }
}
function appOnPause() {
  pauseOn();
  leaveApp = true;
  lock();
  TweenMax.killTweensOf(appOnResumeComplete);
}
function appOnResume() {
  needToforceUserGesture = !(leaveApp = false);
  TweenMax.killTweensOf(appOnResumeComplete);
  TweenMax.delayedCall(0.25, appOnResumeComplete);
}
function appOnResumeComplete() {
  unlock();
  popupStillHere();
}
function clickPopupStillHere() {
  lock();
  forceUserGesture(function () {
    if (!gamePausedByUser) {
      pauseOff();
    }
    unlock();
  });
}
function pauseAudioContext() {
  globalVolumeFadeOut(() => {
    audioCtx.suspend().then(() => {}).catch(g => {});
  });
}
function resumeAudioContext() {
  audioCtx.resume().then(() => {
    checkAudioCanRun().then(() => {
      globalVolumeFadeIn();
    }).catch(h => {
      stopAllStage();
    });
  }).catch(h => {
    stopAllStage();
  });
}
var audioCtx;
var froze = false;
function frozeScene() {
  if (!(pause || froze)) {
    loopOn = !(froze = true);
    sndMetronome.stop();
    immediateKillAllPolo();
    replayMix.stop();
    readingBar.froze();
    renderRAF.stop();
    clock.stop(true);
    mainCanvas.saveImage();
    mainCanvas.showImage();
    if (notnull(curBonus)) {
      if (bonusWaiting) {
        stopBonusVideo();
      } else if (bonusPlaying) {
        killTransitionBonus();
        curBonus.sound.stop();
        curBonus.pause();
        bonusPlaying = false;
      }
    }
  }
}
function unfrozeScene(g) {
  var h;
  var i;
  if (!pause && froze) {
    h = curBonus;
    i = froze = false;
    replayMix.loop(g);
    renderRAF.start();
    readingBar.unfroze();
    if (h) {
      if (shouldImmediatePlayBonus) {
        if (curBonus.getId() != h.getId()) {
          h.stop();
        } else {
          i = true;
        }
      } else {
        stopBonusVideo();
      }
    }
    if (shouldImmediatePlayBonus) {
      shouldImmediatePlayBonus = false;
      replayMix.waitForReloop = true;
      startLoop();
      if (!i) {
        $fadeVideo[0].offsetHeight;
        $fadeVideo.removeClass().addClass("show animateFadeOut");
      }
    } else {
      mainCanvas.showImage();
    }
  }
}
function immediateKillAllPolo() {
  for (var g = getListPoloBusy(), h = 0, i = g.length; h < i; h++) {
    checkerCodeBonus(g[h].getPicto(), false);
    g[h].stopSound();
    g[h].deshabiller(0, true);
    g[h].desactiverClick();
  }
}
function immediatePlayBonus(g, h) {
  bonusWaiting = shouldImmediatePlayBonus = true;
  (curBonus = listBonus[bonusQueue = g]).prepareVideo(h);
  cntBoucleBonus = h - 1;
}
function showPoloAndPictoInCombo(g) {
  for (var h = getListPoloBusy(), j = listBonus[g - 1], k = [], l = 0, m = h.length; l < m; l++) {
    var p = h[l].getPicto().id;
    if (j.hasCode(p + 1)) {
      k.push(h[l].id);
    }
  }
  showPoloInArray(k);
  showPictoInCombo(g);
}
function showPoloInArray(g) {
  TweenMax.killTweensOf(stopShowPoloInArray);
  var j = getListPoloBusy();
  if (j.length > 1) {
    for (var k = 0, l = j.length; k < l; k++) {
      var m = j[k];
      if (existInArray(g, m.id)) {
        if (m.getHide()) {
          m.stopHidingYourself();
        }
      } else {
        m.hideYourself();
      }
    }
  }
}
function stopShowingPoloInArray(g) {
  var h = getListPoloHidden();
  var g = g || 0;
  var g = decimal((getTime() - g) / 1000, 2);
  TweenMax.delayedCall(g < 1 ? 1 : 0.1, stopShowPoloInArray, [h]);
}
function stopShowPoloInArray(g) {
  for (var h = 0, i = g.length; h < i; h++) {
    g[h].stopHidingYourself();
  }
  stopShowPictoInCombo();
}
function showPictoInCombo(g) {
  stopShowPictoInCombo();
  for (var h = listBonus[g - 1].getCode(), j = h.length, k = 0, l = listPicto.length; k < l; k++) {
    for (var m = listPicto[k], p = 0; p < j; p++) {
      if (!existInArray(h, m.id + 1)) {
        m.hideYourself();
      }
    }
  }
}
function stopShowPictoInCombo() {
  for (var g = 0, h = listPicto.length; g < h; g++) {
    listPicto[g].stopHiddingYourself();
  }
}
function getStringDate(g, h) {
  g = g.indexOf("/") == -1 ? g.split("-").join("/") : g;
  var j;
  var k;
  var g = new Date(g);
  if (h) {
    h = g.getHours();
    j = g.getMinutes();
    k = g.getSeconds();
    h = h < 10 ? String("0" + h) : String(h);
    j = j < 10 ? String("0" + j) : String(j);
    k = k < 10 ? String("0" + k) : String(k);
    return String(h + ":" + j + ":" + k);
  } else {
    h = g.getDate();
    j = g.getMonth();
    k = g.getFullYear();
    g = h + " " + STR("txt.months")[j] + " " + k;
    if (currentLanguage.toLowerCase() != "zh-cn" && currentLanguage.toLowerCase() != "zh-tw") {
      return g;
    } else {
      return k + " 年 " + (j + 1) + " 月 " + h + " 日";
    }
  }
}
function getTimeSpent(g) {
  if (loopOn || g) {
    return timenow - startboucle;
  } else {
    return 0;
  }
}
function getTimeRemain() {
  return loopDuration - getTimeSpent();
}
function getRemainingTime(g) {
  if (g = g !== undefined && g) {
    return loopDuration * 2 - (getTime() - startboucle);
  } else {
    return loopDuration - (getTime() - startboucle);
  }
}
function getRemainingTimeBeforeBonus() {
  return getRemainingTime(!!app.bonusloopA && !boucleA);
}
function getRandomObject(g) {
  var h = Math.floor(Math.random() * g.length);
  return g.splice(h, 1)[0];
}
function getListPoloBusy() {
  for (var g = [], h = 0; h < nbPoloMax; h++) {
    var i = listPolo[h];
    if (i.getBusy()) {
      g.push(i);
    }
  }
  return g;
}
function getListPoloUnmute() {
  for (var g = [], h = getListPoloBusy(), j = 0, k = h.length; j < k; j++) {
    var l = h[j];
    if (!l.getMute()) {
      g.push(l);
    }
  }
  return g;
}
function getListPoloFree() {
  for (var g = [], h = 0; h < nbPoloMax; h++) {
    var i = listPolo[h];
    if (!i.getBusy()) {
      g.push(i);
    }
  }
  return g;
}
function getListPictoBusy() {
  for (var g = [], h = 0; h < nbSound; h++) {
    var i = listPicto[h];
    if (i.used) {
      g.push(i);
    }
  }
  return g;
}
function getListPictoFree() {
  for (var g = [], h = 0; h < nbSound; h++) {
    var i = listPicto[h];
    if (!i.used) {
      g.push(i);
    }
  }
  return g;
}
function getListPoloHidden() {
  for (var g = [], h = getListPoloBusy(), j = 0, k = h.length; j < k; j++) {
    var l = h[j];
    if (l.getHide()) {
      g.push(l);
    }
  }
  return g;
}
function lock() {
  $lockAll.addClass("show");
  pictoForceOnDrop();
}
function unlock() {
  $lockAll.removeClass("show");
}
var globalGain;
var globalFilter;
var audioPort = "";
var globalSampleRate = 44100;
var globalVolumeMax = 1;
var globalVolumeMin = 0;
var globalFadeSpeed = 0.015;
function rebuildAudioContext() {
  return new Promise(function (h, i) {
    killAudioContext();
    initAudioContext();
    audioCtx.resume().then(() => {
      h();
    }).catch(j => {
      i(j);
    });
  });
}
function initAudioContext() {
  (audioCtx = new AudioContext()).onstatechange = checkStateAudioCtx;
  audioCtx.hasOwnProperty("sampleRate");
  audioCtx.hasOwnProperty("baseLatency");
  (globalGain = audioCtx.createGain()).connect(audioCtx.destination);
  globalGain.gain.value = globalVolumeMin;
}
function killAudioContext() {
  var g;
  var h;
  if (audioCtx) {
    g = audioCtx.createBuffer(2, globalSampleRate / 2, globalSampleRate);
    (h = audioCtx.createBufferSource()).buffer = g;
    h.connect(audioCtx.destination);
    h.start(0);
    h.disconnect();
    audioCtx.close();
    audioCtx = null;
  }
}
function globalVolumeFadeOut(g) {
  globalGain.gain.cancelScheduledValues(audioCtx.currentTime);
  globalGain.gain.setTargetAtTime(globalVolumeMin, audioCtx.currentTime, globalFadeSpeed);
  // TOLOOK
  setTimeout(() => {
    globalGain.gain.value = globalVolumeMin;
    if (g) {
      g();
    }
  }, globalFadeSpeed * 6000);
}
function globalVolumeFadeIn(g) {
  globalGain.gain.cancelScheduledValues(audioCtx.currentTime);
  globalGain.gain.setTargetAtTime(globalVolumeMax, audioCtx.currentTime, globalFadeSpeed);
  // TOLOOK
  setTimeout(() => {
    globalGain.gain.value = globalVolumeMax;
    if (g) {
      g();
    }
  }, globalFadeSpeed * 6000);
}
function checkStateAudioCtx() {
  if (audioCtx && audioCtx.state != "running" && onGame && loopOn && !pause && !leaveApp) {
    appOnPause();
    appOnResume();
  }
}
function checkAudioCanRun() {
  return new Promise(function (h, i) {
    var j;
    if (audioCtx && audioCtx.currentTime) {
      j = audioCtx.currentTime;
      // TOLOOK
      setTimeout(() => {
        if (j == audioCtx.currentTime) {
          i(new Error("audioCtx.currentTime is stuck"));
        } else {
          h();
        }
      }, 150);
    } else {
      i(new Error("audioCtx or audioCtx.currentTime is null"));
    }
  });
}
var needToforceUserGesture = true;
function forceUserGesture(g) {
  if (!needToforceUserGesture) {
    if (g) {
      g();
    }
    return false;
  }
  needToforceUserGesture = false;
  var i;
  var j = new SoundObject();
  j.setSilence();
  j.prepare(tabBuffer.sound[0].sndA);
  j.play();
  j.stop();
  if (listBonus.length) {
    i = 0;
    listBonus.forEach(function (k) {
      var l = k.video.currentTime;
      k.video.play().then(function () {
        k.video.pause();
        k.video.currentTime = l;
        if (++i == listBonus.length && g) {
          g();
        }
      }).catch(function (m) {
        popupGeneralError({
          error: "force video play"
        });
        throw new Error(m);
      });
    });
  } else if (g) {
    g();
  }
}
function initAudioRoute() {}
function initSilentMode() {}
function detectSilentMode() {}
function bugBluetoothLatency() {
  return false;
}
function SoundObject(g) {
  if (typeof audioCtx != "object" || !audioCtx) {
    throw new Error("Aucun AudioContxt n'a été déclaré");
  }
  var j = this;
  var k = null;
  var m = null;
  var p = null;
  var q = 0;
  var v = false;
  var w = false;
  var x = false;
  this.getMute = function () {
    return v;
  };
  this.getDuration = function () {
    if (m != null) {
      return m.duration;
    } else {
      return 0;
    }
  };
  this.getCurrentTime = function () {
    if (k != null && k.context != null) {
      return k.context.currentTime;
    } else {
      return 0;
    }
  };
  this.setSilence = function () {
    x = true;
  };
  this.setVolume = function (y) {
    p.gain.setValueAtTime(y, audioCtx.currentTime);
  };
  this.onComplete = function (y) {
    k.onended = y;
    0;
  };
  this.prepare = function (y, z) {
    m = y;
    p = audioCtx.createGain();
    (k = audioCtx.createBufferSource()).buffer = m;
    y = z == 0 || v || x ? globalVolumeMin : globalVolumeMax;
    j.setVolume(y);
    k.connect(p);
    p.connect(globalGain);
    globalGain.connect(audioCtx.destination);
  };
  this.play = function (y, z) {
    w = true;
    q = (q = (q = decimal(y, 3) || 0) > j.getDuration() ? decimal(j.getDuration(), 2) - 0.01 : q) < 0 ? 0 : q;
    k.start(0, q);
    if (!(z !== true || v || x)) {
      j.fadeIn();
    }
  };
  this.stop = function (y) {
    if (y || k == null || !w || x || v) {
      j.stopSource();
    } else {
      j.fadeOut(true);
    }
  };
  this.stopSource = function () {
    if (k != null && w) {
      k.stop(0);
      k.onended = null;
    }
    q = 0;
    p = k = null;
    w = v = false;
  };
  this.fadeOut = function (y) {
    p.gain.setTargetAtTime(globalVolumeMin, audioCtx.currentTime, globalFadeSpeed);
    if (y) {
      k.stop(audioCtx.currentTime + globalFadeSpeed * 6);
      k.onended = j.stopSource;
    }
  };
  this.fadeIn = function () {
    p.gain.setTargetAtTime(globalVolumeMax, audioCtx.currentTime, globalFadeSpeed);
  };
  this.mute = function () {
    if (k && !x) {
      j.fadeOut();
    }
    v = true;
  };
  this.unmute = function () {
    if (k && !x) {
      j.fadeIn();
    }
    v = false;
  };
}
var pointerList = [];
function enablePictoDraggable() {
  document.body.addEventListener(pointerEventType.down, pictoPointerDown);
  document.body.addEventListener(pointerEventType.up, pictoPointerUp);
  document.body.addEventListener(pointerEventType.cancel, pictoPointerUp);
  document.body.addEventListener(pointerEventType.leave, pictoPointerUp);
  document.body.addEventListener(pointerEventType.move, pictoPointerMove);
}
function pictoPointerDown(g) {
  var h;
  var i;
  var j;
  if (isPictoDiv(g)) {
    i = (h = "targetTouches" in g ? g.targetTouches[0] : g).target.parentNode.dataset.pictoNum;
    if (!((j = listPicto[i]).locked || (mouseX = h.pageX, mouseY = h.pageY, j.onDrag) || getIndexFromPointerList("pictoNum", i) != -1)) {
      g = {
        event: g,
        uniqueId: "identifier" in h ? h.identifier : h.pointerId,
        picto: j,
        pictoNum: i,
        dropForced: false
      };
      if (j.used) {
        j.usedTouchStart();
      } else {
        j.startDrag();
        j.moveDrag(h.pageX, h.pageY);
        poloStartWatchPicto();
      }
      pointerList.push(g);
    }
  }
}
function pictoPointerUp(g) {
  var i;
  if (pointerList.length && (g = getIndexFromPointerList("uniqueId", (g = "changedTouches" in g ? g.changedTouches[0] : g)["identifier" in g ? "identifier" : "pointerId"])) >= 0) {
    if ((i = pointerList[g].picto).used) {
      i.usedTouchEnd();
    } else {
      i.stopDrag();
      pictoOnDrop(i, pointerList[g].dropForced);
    }
    if (pointerList.length == 1) {
      poloStopWatchPicto();
    }
    pointerList.splice(g, 1);
  }
}
function pictoForceOnDrop() {
  for (; pointerList.length;) {
    var g = pointerList[0];
    g.dropForced = true;
    pictoPointerUp(g.event);
  }
}
function pictoPointerMove(g) {
  var h;
  if (pointerList.length && (h = getIndexFromPointerList("uniqueId", (g = "targetTouches" in g ? g.targetTouches[0] : g)["identifier" in g ? "identifier" : "pointerId"])) >= 0 && (h = pointerList[h].picto).onDrag) {
    h.moveDrag(g.pageX, g.pageY);
    checkPictoHoverPolo(h);
    mouseX = pointerList[pointerList.length - 1].picto.pointerAxis.px;
    mouseY = pointerList[pointerList.length - 1].picto.pointerAxis.py;
  }
}
function isPictoDiv(g) {
  return g.target.classList.contains("hitzone") && g.target.parentNode.classList.contains("picto");
}
function getIndexFromPointerList(g, h) {
  return pointerList.findIndex(i => i[g] == h);
}
var $activeTab;
var $activeFilter;
var $activePage;
var $scrollbox;
var $boxline;
var $boxinfo;
function PictoObject(g, h) {
  var k;
  var l = this;
  var m = h.find("#picto" + g);
  var p = 0;
  var q = isMobile ? 1.1 : 1.2;
  this.id = g;
  this.used = false;
  this.locked = false;
  this.onDrag = false;
  this.polo = null;
  this.pointerAxis = {
    px: 0,
    py: 0
  };
  this.startDrag = function () {
    k = m[0].getBoundingClientRect();
    l.onDrag = true;
    m.removeClass("flashme");
    m.addClass("drag");
  };
  this.moveDrag = function (r, u) {
    l.setTranslation(r, u);
  };
  this.stopDrag = function () {
    l.onDrag = false;
    m.removeClass("drag");
  };
  this.replacer = function () {
    l.locked = true;
    m.addClass("replacer").one(animationEnd, l.replacerFini);
  };
  this.absorber = function (r) {
    m.css({
      transform: "translate3d(0px, 0px, 0px)"
    });
    m.removeClass("replacer");
    m.addClass("griser");
    l.used = true;
    l.polo = r;
  };
  this.reactiver = function (r) {
    l.locked = true;
    r = !!notnull(r) && r;
    m.removeClass("griser");
    l.polo = null;
    if (!r || modeRandom || modeReplay) {
      l.replacerFini();
    } else {
      m.addClass("flashme").one(animationEnd, function (v) {
        $(v.target).removeClass("flashme");
        l.replacerFini();
      });
    }
  };
  this.replacerFini = function () {
    m.removeClass("replacer");
    m.css({
      transform: "translate3d(0px, 0px, 0px)"
    });
    l.used = false;
    l.locked = false;
    l.pointerAxis = {
      px: 0,
      py: 0
    };
  };
  this.usedTouchStart = function () {
    p = getTime();
    showPoloInArray([l.polo.id]);
  };
  this.usedTouchEnd = function () {
    stopShowingPoloInArray(p);
    p = 0;
  };
  this.checkusedTouchStart = function () {
    if (p != 0) {
      l.usedTouchEnd();
    }
  };
  this.hideYourself = function () {
    m.addClass("hideYourself");
  };
  this.stopHiddingYourself = function () {
    m.removeClass("hideYourself");
  };
  this.setTranslation = function (r, u) {
    l.pointerAxis = {
      px: r,
      py: u
    };
    r -= k.x;
    u -= k.y;
    r -= k.width / 2;
    u -= k.width / q;
    m.css({
      transform: "translate3d(" + r + "px, " + u + "px, 0px)"
    });
  };
}
function PoloObject(a0, a1) {
  this.sound = new SoundObject("polo" + a0);
  var a3;
  var a4;
  var a5;
  var a6;
  var a7;
  var a8;
  var a9;
  var aa;
  var ab;
  var ac;
  var ad;
  var ae;
  var af;
  var ag;
  var ah;
  var ai;
  var aj;
  var ak;
  var al;
  var am;
  var an;
  var ap;
  var aq;
  var ar;
  var as = this;
  var at = $("#box-polo").find(".polo[data-polo-id='" + a0 + "']");
  var au = $("#box-loader-polo").find(".zone[data-polo-id='" + a0 + "']");
  var av = au.find(".loader");
  var aw = au.find(".bar");
  var ax = false;
  var ay = a1;
  var az = "";
  var aA = false;
  var aB = listImages.spritePolo;
  var aC = aL;
  var aD = 0.5;
  var aE = 0.3;
  var aF = 0;
  var aG = false;
  this.id = a0;
  this.state = "normal";
  var aH = at.find(".ctrl");
  function aI() {
    ay.globalAlpha = 1;
    ay.drawImage(aB, 0, 0, cropPoloW, cropPoloH, as.drawPoloX, as.drawPoloY, drawPoloW, drawPoloH);
  }
  function aJ(b7, b8) {
    ay.drawImage(aB, b7, b8, cropEyeW, cropEyeH, as.drawPoloX, as.drawPoloY + drawEyeY, drawEyeW, drawEyeH);
  }
  function aK() {
    ay.globalAlpha = 1 - aD;
    ay.drawImage(aB, cropPoloW, 0, cropPoloW, cropPoloH, as.drawPoloX, as.drawPoloY, drawPoloW, drawPoloH);
  }
  function aL() {
    aI();
    aJ(cropEyeX, cropEyeY);
    aK();
  }
  function aM() {
    ay.globalAlpha = 1;
    ay.drawImage(a9, 0, 0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aN() {
    aM();
    ay.globalAlpha = 1 - aE;
    ay.drawImage(a9, cropAnimW * 2, 0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aO() {
    aM();
    aF = 1;
    ay.globalAlpha = aF;
    ay.drawImage(a9, cropAnimW * 2, 0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aP() {
    aM();
    var b7 = af ? 1 - aE : 0;
    aF = aF <= b7 ? b7 : decimal(aF - 0.1, 2);
    ay.globalAlpha = aF;
    ay.drawImage(a9, cropAnimW * 2, 0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
    if (aF <= b7) {
      as.stopHidingYourselfComplete();
    }
  }
  function aQ() {
    if (aa) {
      aL();
    } else {
      as.anime();
      ay.globalAlpha = 1;
      ay.drawImage(a9, cropAnimW, 0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
      ay.drawImage(a9, an, ap + 1, cropAnimW, am - 1, as.drawPoloX + ak, as.drawPoloY + al + 1, drawAnimW, aj - 1);
    }
  }
  function aR() {
    var b7 = timenow - aq;
    var b7 = Math.floor(b7 * aV);
    var b7 = ar - 1 < b7 ? ar - 1 : b7;
    aI();
    aJ(cropEyeX, aW[b7] * cropEyeH);
    aK();
    if (ar - 1 <= b7) {
      as.mode("normal");
    }
  }
  function aS() {
    var b7;
    var b8;
    if (ae) {
      aQ();
    } else {
      aI();
      b8 = as.getPupPos(drawPup1X, drawPup1Y);
      b7 = as.getPupPos(drawPup2X, drawPup2Y);
      ay.drawImage(aB, 0, cropPupY, cropPupW, cropPupW, b8[0], b8[1], drawPupW, drawPupW);
      ay.drawImage(aB, 0, cropPupY, cropPupW, cropPupW, b7[0], b7[1], drawPupW, drawPupW);
      if ((b8 = (mouseY - canvasBound.top) * cnvPXD) < as.drawPoloY + poloRatio * 90 * cnvPXD) {
        aJ(cropEyelidX, cropEyelid4Y);
      } else if (b8 >= as.drawPoloY + poloRatio * 90 * cnvPXD && b8 < as.drawPoloY + poloRatio * 130 * cnvPXD) {
        aJ(cropEyelidX, cropEyelid3Y);
      } else if (b8 >= as.drawPoloY + poloRatio * 170 * cnvPXD) {
        aJ(cropEyelidX, cropEyelid2Y);
      } else {
        aJ(cropEyelidX, cropEyelid1Y);
      }
    }
  }
  function aT() {
    aS();
    aK();
  }
  function aU() {
    aS();
  }
  this.$btcMute = at.find(".icon-game-bt-mute");
  this.$btcSolo = at.find(".icon-game-bt-solo");
  this.$btcStop = at.find(".icon-game-bt-delete");
  this.pictoHoverId = null;
  this.reinit = function () {
    aY();
    as.draw();
    aG = false;
    as.pictoHoverId = null;
    a3 = a4 = a5 = 0;
    az = a6 = a7 = a8 = a9 = null;
    aa = ab = ac = ad = ae = af = ag = ah = false;
  };
  this.getPicto = function () {
    return a6;
  };
  this.getAssetId = function () {
    return a7;
  };
  this.getMoment = function () {
    return a3;
  };
  this.getLoop = function () {
    return a4;
  };
  this.getEnabled = function () {
    return ab;
  };
  this.getBusy = function () {
    return ac;
  };
  this.getHover = function () {
    return aG;
  };
  this.getDeleting = function () {
    return ae;
  };
  this.getPlaying = function () {
    return ad;
  };
  this.getDiv = function () {
    return at;
  };
  this.getMute = function () {
    return af;
  };
  this.getHide = function () {
    return ah;
  };
  this.getSolo = function () {
    return ag;
  };
  this.setSolo = function (b7) {
    if (ag = b7) {
      as.$btcSolo.addClass("light");
    } else {
      as.$btcSolo.removeClass("light");
    }
  };
  this.setLoop = function (b7) {
    a4 = b7;
  };
  this.setMoment = function (b7) {
    a3 = b7;
  };
  this.setPlaying = function (b7) {
    ad = b7;
  };
  this.habiller = function (b7, b8, b9, ba, bb) {
    as.checkState();
    a7 = (a6 = b7).id;
    a3 = b8;
    a8 = b9.imgData;
    a9 = b9.imgSprite;
    ai = b9.headHeight;
    am = b9.headHeight * animSize;
    az = b9.color;
    a5 = a8.length;
    ac = true;
    as.resize();
    aw.css({
      "background-color": "#" + az
    });
    if (aA) {
      as.mode("waiting");
    } else {
      aa = true;
      TweenMax.delayedCall(ba, function () {
        as.rebond(bb);
      });
    }
    recordMix.xmlAction("append", as);
  };
  this.checkState = function () {
    if (!(!ae || aA)) {
      TweenMax.killTweensOf(as);
      as.remonte(0, true, false);
    }
  };
  this.deshabiller = function (b7, b8) {
    if (aa) {
      aa = false;
      TweenMax.killTweensOf(as.rebond);
      TweenMax.killTweensOf(as.rebond2);
    }
    ac = !(ae = true);
    TweenMax.to(as, b8 ? 0 : 0.3, {
      drawPoloY: drawMaxTopY,
      ease: Quint.easeIn,
      onComplete: as.remonte,
      onCompleteParams: [0, true, b8],
      delay: b7,
      overwrite: true
    });
    this.hideLoader();
    recordMix.xmlAction("remove", as);
  };
  this.baisser = function () {
    as.drawPoloY = drawMaxTopY;
  };
  this.remonte = function (b7, b8, b9) {
    if ((aA = true) === b8) {
      b8 = !modeReplay && !modeRandom && !modeWatch;
      a6.reactiver(b8);
      as.reinit();
      majListPoloDrop();
    }
    as.mode("normal");
    b8 = randomRangeInt(drawMinTopY, drawMinTopY + drawMaxRandPosY);
    TweenMax.to(as, b9 ? 0 : 0.4, {
      drawPoloY: b8,
      ease: Back.easeOut,
      delay: b9 ? 0 : b7,
      overwrite: true,
      onComplete: function () {
        aA = false;
      }
    });
  };
  this.rebond = function (b7) {
    var b8 = as.drawPoloY - drawMaxBounceY;
    var b9 = ad ? "anime" : "waiting";
    var ba = b7 ? 0 : 0.1;
    var b9 = as.getMute() ? "mute" : b9;
    as.mode(b9);
    TweenMax.to(as, ba, {
      drawPoloY: b8,
      ease: Quint.easeOut,
      onComplete: as.rebond2,
      onCompleteParams: [b7],
      overwrite: true
    });
    aa = false;
  };
  this.rebond2 = function (b7) {
    var b8 = as.drawPoloY + drawMaxBounceY;
    TweenMax.to(as, b7 ? 0 : 0.2, {
      drawPoloY: b8,
      ease: Back.easeOut,
      overwrite: true
    });
  };
  this.showLoader = function () {
    ax = true;
    av.addClass("show");
    aw.css({
      "animation-duration": decimal(getRemainingTime() / 1000, 2) + "s"
    });
    aw.addClass("progress");
  };
  this.hideLoader = function () {
    if (ax) {
      ax = false;
      av.removeClass("show");
      aw.removeClass("progress");
    }
  };
  this.hideYourself = function () {
    if (ad || ac) {
      ah = true;
      aF = af ? 1 - aE : aF;
      as.mode("hide");
    }
  };
  this.stopHidingYourself = function () {
    if (ad || ac) {
      as.mode("unhide");
    }
  };
  this.stopHidingYourselfComplete = function () {
    ah = false;
    if (af) {
      as.mode("mute");
    } else if (ad) {
      as.mode("anime");
    } else {
      as.mode("waiting");
    }
  };
  this.drawPoloX = 0;
  this.drawPoloY = drawMaxTopY;
  this.resize = function () {
    aj = ai * poloRatio * cnvPXD;
    as.drawPoloX = poloBlocX * as.id * cnvPXD;
    at[0].style.left = poloBlocX * as.id + sizes.polo.overlapW * poloRatio / 2 + "px";
    at[0].style.width = poloBlocW - sizes.polo.overlapW * poloRatio + "px";
    au[0].style.left = poloBlocX * as.id + sizes.polo.overlapW * poloRatio / 2 + "px";
    au[0].style.width = poloBlocW - sizes.polo.overlapW * poloRatio + "px";
  };
  this.draw = function () {
    aC();
  };
  this.mode = function (b7) {
    if (b7 != as.state) {
      TweenMax.killTweensOf(aZ);
      as.state = b7;
      switch (as.state) {
        case "normal":
          aC = aL;
          aY();
          break;
        case "cligne":
          aC = aR;
          break;
        case "regarde":
          aC = aT;
          break;
        case "hover":
          aC = aU;
          break;
        case "waiting":
          aC = aM;
          break;
        case "anime":
          aC = aQ;
          break;
        case "mute":
          aC = aN;
          break;
        case "hide":
          aC = aO;
          break;
        case "unhide":
          aC = aP;
      }
    }
  };
  this.anime = function () {
    var b7 = frame;
    if (boucleA && a5 == frameTotal) {
      b7 += frameHalf;
    }
    an = a8[b7 = a5 - 1 <= b7 ? a5 - 1 : b7][0] * animSize;
    ap = a8[b7][1] * animSize;
    ak = a8[b7][2] * poloRatio * cnvPXD;
    al = a8[b7][3] * poloRatio * cnvPXD;
  };
  this.getPupPos = function (b7, b8) {
    var b9 = (mouseX - canvasBound.left) * cnvPXD;
    var ba = (mouseY - canvasBound.top) * cnvPXD;
    var b9 = b9 - b7 - as.drawPoloX - drawPupW / 2;
    var ba = ba - b8 - as.drawPoloY - drawPupW / 2;
    var ba = Math.atan2(ba, b9);
    return [drawMaxPupMove * Math.cos(ba) + (as.drawPoloX + b7), drawMaxPupMove * Math.sin(ba) + (as.drawPoloY + b8)];
  };
  var aV = 0;
  var aW = [];
  var aX = [[0, 1, 2, 2, 1, 0], [0, 3, 4, 5, 6, 7, 8, 0], [0, 3, 4, 4, 3, 0], [0, 1, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 2, 2, 2, 2, 0], [0, 1, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 2, 9, 9, 9, 9, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 1, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 2, 2, 10, 10, 10, 10, 10, 2, 2, 0]];
  function aY() {
    var b7 = random(7) + 2;
    TweenMax.delayedCall(b7, aZ);
  }
  function aZ() {
    aq = getTime();
    var b7 = random(aX.length - 1);
    aW = aX[b7];
    ar = aW.length;
    aV = ar / (ar * 36);
    as.mode("cligne");
  }
  var b0 = 0;
  var b1 = 0;
  var b2 = 0;
  var b3 = 0;
  function b4(b7) {
    if (notnull(b7)) {
      b7.preventDefault();
    }
    if (ag) {
      if (getTotalSolo() == 1) {
        stopSoloPolo();
      } else {
        as.mute();
      }
      ag = false;
    } else {
      as.switchMute();
    }
    if (!(af || ag)) {
      stopOtherSolo();
    }
  }
  function b5(b7) {
    if (notnull(b7)) {
      b7.preventDefault();
    }
    clickPolo(as);
  }
  function b6(b7) {
    if (notnull(b7)) {
      b7.preventDefault();
    }
    (ag ? (ag = false, unmuteAll) : (ag = true, muteAll))(as);
  }
  this.activerClick = function () {
    if (!ab) {
      ab = true;
      at[0].addEventListener(pointerEventType.down, as.touchStart);
      as.activerCtrl();
    }
  };
  this.desactiverClick = function () {
    if (ab) {
      ab = false;
      TweenMax.killTweensOf(as.touchLong);
      at[0].removeEventListener(pointerEventType.down, as.touchStart);
      at[0].removeEventListener(pointerEventType.move, as.touchMove);
      at[0].removeEventListener(pointerEventType.up, as.touchEnd);
      as.desactiverCtrl();
    }
  };
  this.touchStart = function (b7) {
    b7.preventDefault();
    0;
    var b8 = "targetTouches" in b7 ? b7.targetTouches[0] : b7;
    b0 = b1 = b8.pageX;
    b2 = b3 = b8.pageY;
    TweenMax.delayedCall(0.25, as.touchLong, [b7]);
    at[0].removeEventListener(pointerEventType.down, as.touchStart);
    at[0].addEventListener(pointerEventType.move, as.touchMove);
    at[0].addEventListener(pointerEventType.up, as.touchEnd);
  };
  this.touchMove = function (b7) {
    b7.preventDefault();
    var b8 = ("targetTouches" in b7);
    var b7 = b8 ? b7.targetTouches[0] : b7;
    var b9 = b8 ? 60 : 20;
    b1 = b7.pageX;
    b3 = b7.pageY;
    if (b2 + (b8 ? 60 : 20) < b3 && Math.abs(b1 - b0) < b9) {
      TweenMax.killTweensOf(as.touchLong);
      clickPolo(as);
    }
  };
  this.touchLong = function (b7) {
    b7.preventDefault();
    TweenMax.killTweensOf(as.touchLong);
    ag = true;
    soloPolo();
    as.$btcSolo.addClass("light");
  };
  this.touchEnd = function (b7) {
    b7.preventDefault();
    TweenMax.killTweensOf(as.touchLong);
    at[0].removeEventListener(pointerEventType.move, as.touchMove);
    at[0].removeEventListener(pointerEventType.up, as.touchEnd);
    at[0].addEventListener(pointerEventType.down, as.touchStart);
    if (ag) {
      if (getTotalSolo() == 1) {
        stopSoloPolo();
      } else {
        as.mute();
      }
      ag = false;
      as.$btcSolo.removeClass("light");
    } else {
      as.switchMute();
    }
  };
  this.activerCtrl = function () {
    aH.addClass("visible").on(pointerEventType.down, stopProp);
    as.$btcMute.on(pointerEventType.down, b4);
    as.$btcSolo.on(pointerEventType.down, b6);
    as.$btcStop.on(pointerEventType.down, b5);
  };
  this.desactiverCtrl = function () {
    aH.removeClass("visible").off();
    as.$btcMute.off().removeClass("light");
    as.$btcSolo.off().removeClass("light");
    as.$btcStop.off().removeClass("light");
  };
  this.playSound = function () {
    ad = true;
    this.sound.play();
    a4++;
  };
  this.stopSound = function (b7) {
    ad = false;
    this.sound.stop(b7);
  };
  this.mute = function () {
    af = true;
    if (!ah) {
      as.mode("mute");
      as.$btcMute.addClass("light");
    }
    as.sound.mute();
    recordMix.xmlAction("mute", as);
  };
  this.unmute = function () {
    af = false;
    if (!ah) {
      if (ad) {
        this.mode("anime");
      } else {
        this.mode("waiting");
      }
      as.$btcMute.removeClass("light");
    }
    this.sound.unmute();
    recordMix.xmlAction("unmute", as);
  };
  this.switchMute = function () {
    if (af) {
      as.unmute();
    } else {
      as.mute();
    }
  };
  this.hitTest = function (b7, b8) {
    var b7 = (b7 - canvasBound.left) * cnvPXD;
    var b8 = (b8 - canvasBound.top) * cnvPXD;
    var b9 = poloOverlapW * cnvPXD / 2;
    return b7 > as.drawPoloX + b9 && b7 < as.drawPoloX + drawPoloW - b9 && b8 > as.drawPoloY && b8 < canvasBound.height * cnvPXD;
  };
  this.hitTestPicto = function (b7) {
    return !ac && !ae && as.hitTest(Math.round(b7.pointerAxis.px), Math.round(b7.pointerAxis.py));
  };
  this.rollover = function () {
    if (!aG) {
      aG = true;
      as.mode("hover");
    }
  };
  this.rollout = function (b7) {
    if (!!notnull(b7) && b7) {
      aG = false;
      as.mode("normal");
    } else if (aG) {
      aG = false;
      as.mode("regarde");
    }
  };
  this.resize();
  this.reinit();
}
var mixToWatch = null;
var mixToShare = null;
var XHRmemotime = {};
var $lineOpened = null;
var scrollPosY = 0;
var lineClicked = null;
var showLastMix = false;
var mixDB = {
  latest: [],
  search: [],
  top50: {
    day: [],
    week: [],
    month: [],
    year: []
  },
  totalNbMix: 0
};
function initMixlist() {
  $poplist = $mixlist.find("#poplist");
  $mixlist.$bck = $mixlist.find(".bac");
  $mixlist.$bck.fadeIn = function () {
    this.addClass("animateFadeIn");
  };
  $mixlist.$bck.fadeOut = function () {
    this.addClass("animateFadeOut").one(animationEnd, function (h) {
      $(h.target).removeClass("animateFadeIn animateFadeOut");
    });
  };
  $scrollbox = $poplist.find("#scrollbox");
  $boxinfo = $scrollbox.find(".boxinfo");
  $boxline = $scrollbox.find(".boxline");
  $tabLatest = $("#tab-latest");
  $tabTop50 = $("#tab-top50");
  $tabSearch = $("#tab-search");
  $tabMixlist = $("#tab-mixlist");
  $mixlist.find(".tabbox .tab").on(pointerEventType.down, clickBtTab);
  $mixlist.find(".pagebox .tab-filter .bt").on(pointerEventType.down, clickBtFilter);
  $mixlist.find(".pagebox#box-search .bt.search").on(pointerEventType.down, clickBtSearch);
}
function openPlaylist(g, h, i) {
  lock();
  showLastMix = i === true;
  $mixlist.addClass("show");
  $mixlist.$bck.fadeIn();
  if (h) {
    enableMixlist();
  } else {
    $poplist.addClass("open").one(animationEnd, enableMixlist);
  }
  if (g == "mixlist" || !hasNetwork || isSafeMode()) {
    delete XHRmemotime.mymix;
    activeBtTab("mixlist");
  } else {
    activeBtTab(g == "top50" ? "top50" : "latest");
  }
}
function enableMixlist() {
  unlock();
  $homeBtList.removeSpinner();
  $poplist.addClass("opened");
  $mixlist.$bck.on(pointerEventType.down, closePlaylist);
  $mixlist.find(".pagebox#box-search input#input-search").on(pointerEventType.down, function (h) {
    $mixlist.find(".pagebox#box-search .formline .input-loader").addClass("spin").show();
  });
  $mixlist.find(".pagebox#box-search input#input-search").on("focus", function () {
    $mixlist.find(".pagebox#box-search .formline .input-loader").removeClass("spin").hide();
  });
}
function closePlaylist() {
  focusHistory = [];
  deleteFocus();
  lock();
  $mixlist.$bck.off();
  $mixlist.$bck.fadeOut();
  $mixlist.find(".pagebox#box-search input#input-search").off();
  $poplist.removeClass("opened").addClass("close").one(animationEnd, hideMixlist);
}
function hideMixlist() {
  closeActionLine($lineOpened);
  $poplist.removeClass("open close");
  $mixlist.removeClass("show");
  $(".tab", $poplist).removeClass("active");
  $activeFilter = $activePage = $activeTab = null;
  blurAll();
  unlock();
  createFocus("home");
}
function cleanScrollbox() {
  if ($boxline) {
    $scrollbox.scrollTop(0);
    closeActionLine($lineOpened);
    unbindAllLine();
    $boxline.empty();
    $boxinfo.empty();
  }
}
function bindAllLine() {
  $boxline.find(".line").on(pointerEventType.down, clickLineStart);
  $boxline.find(".line").on(pointerEventType.up, clickLineEnd);
  $boxline.find(".box-action").on(pointerEventType.down, stopProp);
  $boxline.find(".box-action").on(pointerEventType.up, stopProp);
  $boxline.find(".bt.watch").on(pointerEventType.down, clickBtWatch);
  $boxline.find(".bt.share").on(pointerEventType.down, clickBtShare);
  $boxline.find(".bt.link").on(pointerEventType.down, clickBtLink);
  $boxline.find(".bt.fav").on(pointerEventType.down, clickBtFav);
  $boxline.find(".bt.delete").on(pointerEventType.down, clickBtDelete);
  $boxline.find(".bt.download").on(pointerEventType.down, clickBtDownload);
}
function unbindAllLine() {
  $boxline.find(".line").off();
  $boxline.find(".line .box-action").off();
  $boxline.find(".line .box-action .bt").off();
}
function unbindLine(g) {
  g.off();
  g.find(".box-action").off();
  g.find(".box-action .bt").off();
}
function clickLineStart(g) {
  var h = $(g.currentTarget).parent().parent();
  scrollPosY = h.scrollTop();
  lineClicked = $(g.currentTarget);
}
function clickLineEnd(g) {
  if (lineClicked && $(g.currentTarget).parent().parent().scrollTop() == scrollPosY && lineClicked.attr("data-key") == $(g.currentTarget).attr("data-key")) {
    openActionLine(g.currentTarget);
  }
  lineClicked = null;
}
function clickBtTab() {
  blurAll();
  if ($(this).hasClass("active")) {
    $scrollbox.scrollTop(0);
  } else {
    activeBtTab($(this).attr("id").replace("tab-", ""));
  }
}
function activeBtTab(g) {
  blurAll();
  $scrollbox.find(".spinner-box").removeClass("spin");
  $scrollbox.find(".spinner-box").hide();
  $boxinfo.empty();
  $poplist.find(".tabbox .tab").removeClass("active");
  ($activeTab = $poplist.find(".tabbox .tab#tab-" + g)).addClass("active");
  cleanScrollbox();
  $poplist.find(".pagebox").removeClass("show");
  ($activePage = $poplist.find(".pagebox#box-" + g)).addClass("show");
  if (g == "latest") {
    loadLatest();
  } else if (g == "top50") {
    activeFilter("day");
  } else if (g == "search") {
    cleanSearchInput();
    activeFilter("name");
  } else if (g == "mixlist") {
    activeFilter("mymix");
  }
}
function clickBtFilter() {
  blurAll();
  if ($(this).hasClass("active")) {
    $scrollbox.scrollTop(0);
  } else {
    activeFilter($(this).attr("id").replace("bt-", ""));
  }
}
function activeFilter(g) {
  blurAll();
  $poplist.find(".tab-filter .bt").removeClass("active");
  ($activeFilter = $poplist.find(".tab-filter .bt#bt-" + g)).addClass("active");
  if (["day", "week", "month", "year"].includes(g)) {
    cleanScrollbox();
    loadTop50();
  } else if (["name", "title", "dedi"].includes(g)) {
    cleanScrollbox();
    clickBtSearch();
  } else if (["mymix", "myfav"].includes(g)) {
    cleanScrollbox();
    loadMixlist();
  }
}
function getActiveTabString() {
  if ($activeTab && $activeTab.length) {
    return $activeTab.attr("id").replace("tab-", "");
  } else {
    return "";
  }
}
function getActiveFilterString() {
  if ($activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length) {
    return $activeFilter.attr("id").replace("bt-", "");
  } else {
    return "";
  }
}
function openActionLine(g) {
  var g = $(g);
  var h = $lineOpened !== null ? $lineOpened.index() : -1;
  toggleAcionLine($lineOpened);
  if (h != g.index()) {
    toggleAcionLine(g);
  }
}
function toggleAcionLine(g) {
  if (g !== null) {
    if (g.hasClass("animateOpen")) {
      g.removeClass("animateOpen").addClass("animateClose").one(animationEnd, function () {
        g.removeClass("animateClose");
      });
      $lineOpened = null;
      removeInFocusHistory("playlist-line-open");
      createFocus("playlist-all", g);
    } else {
      g.removeClass("animateClose").addClass("animateOpen");
      $lineOpened = g;
      createFocus("playlist-line-open");
    }
  }
}
function closeActionLine(g) {
  if (g !== null) {
    g.removeClass("animateOpen").removeClass("animateClose");
    $lineOpened = null;
  }
}
function showSpin(g) {
  g.addClass("spin");
  g.find("svg use").attr("xlink:href", "#ic-loader-mini");
  $scrollbox.find(".spinner-box").addClass("spin");
  $scrollbox.find(".spinner-box").show();
}
function hideSpin(g, h) {
  g.removeClass("spin");
  g.find("svg use").attr("xlink:href", h);
  $scrollbox.find(".spinner-box").removeClass("spin");
  $scrollbox.find(".spinner-box").hide();
}
function clickBtShare(g) {
  g.stopPropagation();
  var g = $(this);
  var h = g.parent().parent().attr("data-key").replace("mix-", "");
  if (notnull(mixToShare = searchMixInCurrentList(h))) {
    checkIfMixSavedThenShare("global", g);
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
function clickBtLink(g) {
  g.stopPropagation();
  var g = $(this);
  var i = g.parent().parent().attr("data-key").replace("mix-", "");
  if (notnull(mixToShare = searchMixInCurrentList(i))) {
    checkIfMixSavedThenShare("clipboard", g);
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
function clickBtFav(g) {
  g.stopPropagation();
  var g = $(this).parent().parent();
  var i = g.attr("data-key");
  var j = i.replace("mix-", "");
  var i = i.replace("mix-", "fav-");
  var j = searchMixInCurrentList(j);
  if (notnull(j)) {
    if (isMixInFav(j)) {
      g.removeClass("isfavoris");
      localMixObject.deleteMix(i);
      if (getActiveFilterString() == "myfav") {
        unbindLine(g);
        closeActionLine(g);
        g.remove();
        createFocus("playlist-all");
      }
    } else {
      g.addClass("isfavoris");
      localMixObject.saveMix(j, true);
      $tabMixlist.find("svg use").attr("xlink:href", "#ic-rate-mini");
      $tabMixlist.removeClass("animateFavIcon").addClass("animateFavIcon").one(animationEnd, function () {
        $tabMixlist.find("svg use").attr("xlink:href", "#ic-mixlist-mini");
        $tabMixlist.removeClass("animateFavIcon");
      });
    }
  } else {
    popupGeneralError({
      error: STR("pop.notFoundTitle")
    });
  }
}
function clickBtDelete(g) {
  g.stopPropagation();
  var i = $(this);
  var j = i.parent().parent();
  var k = searchMixInCurrentList(j.attr("data-key").replace("mix-", ""));
  Spinner.add(i);
  if (!k.online || hasNetwork) {
    boxDialog.open(STR("pop.deleteText"), STR("pop.deleteTitle"), [STR("bt.yes"), STR("bt.no")], [function () {
      deleteMixConfirm(i, j, k);
    }, function () {
      unlock();
      Spinner.reset();
    }]);
  } else {
    boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
      unlock();
      Spinner.reset();
    }]);
  }
}
function deleteMixConfirm(g, h, i) {
  if (localMixObject.deleteMix("mix-" + i.link)) {
    localMixObject.deleteMix("fav-" + i.link);
    unbindLine(h);
    closeActionLine(h);
    h.remove();
    if ((h = localMixObject.getMixlist().length) <= 5) {
      $scrollbox.scrollTop(0);
    }
    if (h == 0) {
      $boxinfo.html(STR("txt.mixlistEmpty"));
    }
    unlock();
    createFocus("playlist-all");
  } else {
    boxDialog.open(STR("pop.deleteBugText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      unlock();
    }]);
  }
  Spinner.reset();
  if (i.online) {
    $.ajax({
      type: "POST",
      url: domainOnline + "ph3/delete-mix-db.php",
      data: {
        uuid: getListUUID(),
        mix: i
      },
      dataType: "json",
      crossdomain: true,
      success: function (k) {
        if (k.state == "success") {
          saveGA("mix", "delete_db", i.link);
        } else {
          saveGA("mix", "delete_db_failed", i.link);
        }
      },
      error: function (k) {
        saveGA("mix", "delete_db_error", i.link);
      }
    });
  }
}
function clickBtDownload(g) {
  g.stopPropagation();
  var g = $(this);
  var i = g.parent().parent().attr("data-key").replace("mix-", "");
  if (notnull(mixToShare = searchMixInCurrentList(i))) {
    if (converterCanRun()) {
      popupConvertMix();
    } else {
      checkIfMixSavedThenShare("download", g);
    }
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
var ajaxLatestRunning = false;
function loadLatest() {
  if (ajaxLatestRunning) {
    return false;
  }
  if (!hasNetwork) {
    $boxinfo.html(STR("pop.noNetworkText"));
    return false;
  }
  if (!minuteMoreThan(1, false, "latest")) {
    fillLatest();
    return false;
  }
  ajaxLatestRunning = true;
  showSpin($tabLatest);
  var h = {
    v: app.version
  };
  $.ajax({
    type: "GET",
    url: domainOnline + "ph3/get-live.php?v=" + app.version,
    data: h,
    dataType: "json",
    crossdomain: true,
    success: function (i) {
      ajaxLatestComplete();
      (i.state == "success" ? (XHRmemotime.latest = new Date(), mixDB.totalNbMix = i.total, mixDB.latest = i.mixlist, mixDB.latest.map(function (k) {
        k.mymix = false;
        k.dateQuery = i.created;
      }), fillLatest) : ajaxLatestError)();
    },
    error: function (i) {
      ajaxLatestError();
    }
  });
}
function ajaxLatestComplete() {
  ajaxLatestRunning = false;
  hideSpin($tabLatest, "#ic-live-mini");
}
function ajaxLatestError() {
  ajaxLatestComplete();
  if ($mixlist.isOpen() && $tabLatest.hasClass("active")) {
    boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
  }
}
function fillLatest() {
  var g;
  if ($mixlist.isOpen() && $tabLatest.hasClass("active")) {
    g = generateHtml(mixDB.latest, generateLineMix, "latest");
    $boxline.html(g[0]);
    if (mixDB.totalNbMix > 0) {
      $boxinfo.html(STR("txt.latestMixInfo").replace("%{mix_total}", numberSpaced(mixDB.totalNbMix)).replace("%{version_name}", app.name));
    } else {
      $boxinfo.html(STR("txt.latestMixInfo").split("<br>")[0]);
    }
    bindAllLine();
    createFocus("playlist-all");
  }
}
var ajaxTop50Running = false;
function loadTop50() {
  return !ajaxTop50Running && (hasNetwork ? mixDB.top50.day.length && !minuteMoreThan(10, false, "top50") ? (fillTop50(), false) : (ajaxTop50Running = true, showSpin($tabTop50), void $.ajax({
    type: "GET",
    url: domainOnline + "ph3/get-top-50.php",
    data: {
      v: app.version
    },
    dataType: "json",
    crossdomain: true,
    success: function (h) {
      if (h.state == "success") {
        ajaxTop50Complete();
        mixDB.top50 = {
          day: h.listDay,
          week: h.listWeek,
          month: h.listMonth,
          year: h.listYear
        };
        mixDB.top50.day.map(i => i.mymix = false);
        mixDB.top50.week.map(i => i.mymix = false);
        mixDB.top50.month.map(i => i.mymix = false);
        mixDB.top50.year.map(i => i.mymix = false);
        fillTop50();
        hideSpin($tabTop50, "#ic-trophy-mini");
      } else {
        ajaxTop50Error();
      }
    },
    error: function (h) {
      ajaxTop50Error();
    }
  })) : ($boxinfo.html(STR("pop.noNetworkText")), false));
}
function ajaxTop50Complete() {
  ajaxTop50Running = false;
  hideSpin($tabTop50, "#ic-trophy-mini");
  XHRmemotime.top50 = new Date();
}
function ajaxTop50Error() {
  ajaxTop50Complete();
  if ($mixlist.isOpen() && $tabTop50.hasClass("active")) {
    $boxinfo.html(STR("pop.noCoServerText"));
  }
}
function fillTop50() {
  var h;
  var i;
  if ($mixlist.isOpen() && $tabTop50.hasClass("active")) {
    i = [];
    if ((h = getActiveFilterString()) == "day") {
      i = generateHtml(mixDB.top50.day, generateLineTop50);
      $boxline.html(i[0]);
      mixDB.top50.day = i[1];
    } else if (h == "week") {
      i = generateHtml(mixDB.top50.week, generateLineTop50);
      $boxline.html(i[0]);
      mixDB.top50.week = i[1];
    } else if (h == "month") {
      i = generateHtml(mixDB.top50.month, generateLineTop50);
      $boxline.html(i[0]);
      mixDB.top50.month = i[1];
    } else if (h == "year") {
      i = generateHtml(mixDB.top50.year, generateLineTop50);
      $boxline.html(i[0]);
      mixDB.top50.year = i[1];
    }
    $boxinfo.html(STR("txt.top50Info"));
    bindAllLine();
    createFocus("playlist-all");
  }
}
var ajaxSearchRunning = false;
var lastFilterSearch = "";
var lastSearch = "";
function clickBtSearch() {
  var h;
  var j;
  var k;
  var l;
  var m;
  return !ajaxSearchRunning && (hasNetwork ? (h = $poplist.find("form #input-search"), j = getActiveFilterString(), l = (k = cleanInputText(k = h.val().substr(0, 26))).split(" ").join(""), m = regexList.search, blurAll(), l == "" ? (lastSearch = "", cleanListSearch()) : lastSearch == k.toLowerCase() && lastFilterSearch == j || (m.test(l) ? invalidField(h) : (lastSearch = k.toLowerCase(), lastFilterSearch = j, showSpin($tabSearch), Spinner.add($poplist.find("#bt-search")), loadSearch(k, j))), void createFocus("playlist-all")) : (boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")]), false));
}
function fillSearch() {
  var h;
  if ($tabSearch.hasClass("active")) {
    h = generateHtml(mixDB.search, generateLineMix, "search");
    $boxline.html(h[0]);
    bindAllLine();
    createFocus("playlist-all");
  }
}
function loadSearch(g, h) {
  var j = {
    v: app.version
  };
  j.uuid = getListUUID();
  j.str = encodeURIComponent(g);
  j.f = encodeURIComponent(h);
  $("#list-search .spinner-box", $poplist).show();
  ajaxSearchRunning = true;
  cleanListSearch();
  $.ajax({
    type: "GET",
    url: domainOnline + "ph3/search-mix.php",
    data: j,
    dataType: "json",
    crossdomain: true,
    success: function (k) {
      var l;
      if (k.state == "success") {
        ajaxSearchComplete();
        l = k.mixlist.length <= 1 && notnull(STR("txt.result.one")) ? STR("txt.result.one") : STR("txt.result.other");
        $boxinfo.html(l.replace("%{count}", k.mixlist.length));
        if (k.mixlist.length) {
          k.mixlist.forEach(function (m, n) {
            m.dateQuery = k.now;
          });
          mixDB.search = k.mixlist;
          fillSearch();
        }
      } else {
        ajaxSearchError();
      }
    },
    error: function (k) {
      ajaxSearchError();
    }
  });
}
function ajaxSearchComplete() {
  ajaxSearchRunning = false;
  hideSpin($tabSearch, "#ic-search-mini");
  Spinner.reset();
}
function ajaxSearchError() {
  ajaxSearchComplete();
  if ($mixlist.isOpen() && $tabSearch.hasClass("active")) {
    boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
  }
}
function cleanSearchInput() {
  lastSearch = lastFilterSearch = "";
  $("#box-search #input-search").val("");
}
function cleanListSearch() {
  cleanScrollbox();
  mixDB.search = [];
}
function loadMixlist() {
  if (localMixObject.getMixlist().length || localMixObject.getFavlist().length) {
    fillMixlist();
  } else {
    $boxinfo.html(STR("txt.mixlistEmpty"));
  }
}
function fillMixlist() {
  var h;
  var i;
  var j;
  var k;
  if ($mixlist.isOpen() && $tabMixlist.hasClass("active")) {
    j = [];
    if ((h = getActiveFilterString()) == "mymix") {
      if ((k = localMixObject.getMixlist()).length && (j = generateHtml(k, generateLineMix, "mymix"), $boxline.html(j[0]), hasNetwork ? $boxinfo.html(STR("txt.mixlistInfo").replace("%{date_time}", 2)) : $boxinfo.html(STR("txt.mixlistNoCo")), minuteMoreThan(2, false, "mymix") && localMixObject.getStatMixOnline(), showLastMix)) {
        showLastMix = false;
        (i = $boxline.find(".line").first()).addClass("bckFlash").one(animationEnd, function () {
          i.removeClass("bckFlash");
        });
      }
    } else if (h == "myfav" && (k = localMixObject.getFavlist()).length && (j = generateHtml(k, generateLineMix, "myfav"), $boxline.html(j[0]), $boxinfo.empty(), minuteMoreThan(2, false, "myfav"))) {
      localMixObject.getStatFavOnline();
    }
    bindAllLine();
    createFocus("playlist-all");
  }
}
function generateHtml(g, h, j) {
  for (var k = "", l = [], m = 0, p = g.length; m < p; m++) {
    var q = g[m];
    l.push(q);
    k += h(q, m, j);
  }
  return [k, l];
}
function generateLineTop50(g, h) {
  return generateLineMix(g, h, "top50");
}
function generateLineMix(g, h, j) {
  var g = g || {};
  var h = h + 1 || 0;
  var j = j || "";
  var q = j === "top50";
  var w = j === "top50" || j === "latest" || j === "search";
  var x = j === "latest" || j === "search";
  var y = j === "mymix" && !g.online;
  var z = g.private == "1";
  var A = j === "mymix";
  var B = j === "mymix";
  var C = trustAppMobile;
  var D = (j === "mymix" || j === "search") && isMixInTop50(g);
  var E = (j === "mymix" || j === "search") && isMixInLatest(g);
  var j = j === "myfav" || isMixInFav(g);
  var F = sameMixInLocal(g);
  var G = notnull(g.datedb) ? g.datedb : getDateNow();
  var H = "line";
  var H = "<div data-key='mix-" + g.link + "' class='" + (H + (y ? " isoffline" : "") + (z ? " isprivate" : "") + (j ? " isfavoris" : "") + (F ? " ismymix" : "") + (D ? " istop50" : "") + (E ? " islatest" : "")) + "'>";
  return (H += "<div class='mixbanner box-info" + (q ? " rating" : "") + "'>") + (q ? "<div class='rating'>" + h + "</div>" : "") + "<div class='info'>" + ("<span class='title'>" + g.title + "</span>") + "<div class='dj'>" + (w ? "<div class='box-flag'><div class='fflag fflag-" + g.country.toUpperCase() + "'></div></div>" : "") + ("<span class='name'>" + g.name + "</span>") + "</div></div><div class='data'><div class='stat'><div class='boxstat mymix'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-user-mini'></use></svg></div></div><div class='boxstat private'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-lock-mini'></use></svg></div></div><div class='boxstat myfav'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-rate-mini'></use></svg></div></div><div class='boxstat top50'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-trophy-mini'></use></svg></div></div><div class='boxstat latest'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-live-mini'></use></svg></div></div>" + ("<div class='boxstat offline'><div class='txt'>" + STR("txt.offline") + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-nocloud-mini'></use></svg></div></div>") + ("<div class='boxstat liked'><div class='txt'>" + numberSpaced(g.nblike) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div></div>") + ("<div class='boxstat viewed'><div class='txt'>" + numberSpaced(g.nbview) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div></div>") + "</div>" + ("<span class='date' data-date='" + G + "'>" + (x ? getTimeAgo(G, g.dateQuery) : getStringDate(G)) + "</span>") + "</div></div><div class='box-action'><div class='bt bt-round bt-big watch color-green'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='hitzone'></div></div><div class='bt bt-round bt-big share color-blue'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='hitzone'></div></div>" + (C ? "<div class='bt bt-round bt-big link color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='hitzone'></div></div>" : "") + "<div class='bt bt-round bt-big fav'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-rate'></use></svg></div><div class='hitzone'></div></div>" + (B ? "<div class='bt bt-round bt-big download'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='hitzone'></div></div>" : "") + (A ? "<div class='bt bt-round bt-big delete'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-trash'></use></svg></div><div class='hitzone'></div></div>" : "") + "</div></div>";
}
function sameMixInLocal(g) {
  return checkMixInArray(g.id, localMixObject.getMixlist());
}
function isMixInFav(g) {
  return existInArrayFromProp(g.link, "link", localMixObject.getFavlist());
}
function isMixInTop50(g) {
  return !(g.mymix && !g.online || !(checkMixInArray(g.id, mixDB.top50.day) || checkMixInArray(g.id, mixDB.top50.week) || checkMixInArray(g.id, mixDB.top50.month) || checkMixInArray(g.id, mixDB.top50.year)));
}
function isMixInLatest(g) {
  return !(g.mymix && !g.online) && checkMixInArray(g.id, mixDB.latest);
}
function checkMixInArray(g, h, i) {
  i = i || "id";
  for (var j in h) {
    if (g == h[j][i]) {
      return true;
    }
  }
  return false;
}
function getMixInArray(g, h, i) {
  i = i || "id";
  for (var j in h) {
    if (g == h[j][i]) {
      return h[j];
    }
  }
}
function searchMixInCurrentList(g) {
  var j;
  var k = getActiveTabString();
  var l = getActiveFilterString();
  var m = g.replace("mix-", "");
  switch (k) {
    case "latest":
      j = getMixInArray(m, mixDB.latest, "link");
      break;
    case "top50":
      switch (l) {
        case "day":
          j = getMixInArray(m, mixDB.top50.day, "link");
          break;
        case "week":
          j = getMixInArray(m, mixDB.top50.week, "link");
          break;
        case "month":
          j = getMixInArray(m, mixDB.top50.month, "link");
          break;
        case "year":
          j = getMixInArray(m, mixDB.top50.year, "link");
      }
      break;
    case "mixlist":
      switch (l) {
        case "mymix":
          j = getMixInArray(m, localMixObject.getMixlist(), "link");
          break;
        case "myfav":
          j = getMixInArray(m, localMixObject.getFavlist(), "link");
      }
      break;
    case "search":
      j = getMixInArray(m, mixDB.search, "link");
  }
  return j;
}
function minuteMoreThan(g, h, i) {
  var k;
  if (isnull(XHRmemotime[i])) {
    return !h || g;
  } else {
    g = g * 60;
    k = new Date();
    i = XHRmemotime[i].getTime() - k.getTime();
    k = Math.round(Math.abs(i / 1000));
    if (h === true) {
      return secToText((g - k) * 1000);
    } else {
      return g <= k;
    }
  }
}
function startRandomMode() {
  modeRandom = true;
  $body.addClass("mode-random");
  lock();
  closeTool();
  hideDiv($boxBtBonus);
  hideDiv($boxPicto, true);
  hideDiv($boxLoaderPolo, true);
  $btTool.off().on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(stopRandomMode);
  });
  $btTool.bounce();
  $btTool.$svg.attr("xlink:href", "#ic-random");
  $bckGlobal.addClass("fadeIn");
  $boxStage.addClass("pointerlock");
  TweenMax.delayedCall(0.4, lancerRandomMode);
}
function showTextRandom() {
  $watchInfo.$title.html(STR("txt.randomTitle"));
  $watchInfo.$name.html(STR("txt.randomText"));
  $watchInfo.addClass("fadeIn");
}
function lancerRandomMode() {
  showTextRandom();
  randomMix.start(loopOn);
  unlock();
  saveGA("game", "random");
}
function stopRandomMode() {
  modeRandom = false;
  $body.removeClass("mode-random");
  randomMix.stop();
  $btTool.off();
  $btTool.bounce();
  enableBtTool();
  $bckGlobal.removeClass("fadeIn");
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $watchInfo.removeClass("fadeIn");
  TweenMax.delayedCall(0.4, afterStopRandom);
}
function afterStopRandom() {
  showDiv($boxBtBonus, true);
  if (!bonusPlaying) {
    showDiv($boxPicto, true);
    showDiv($boxLoaderPolo, true);
  }
  $boxStage.removeClass("pointerlock");
}
function RandomMix(h) {
  var j = this;
  this.start = function () {
    j.loop();
    j.checkIfPoloMuted();
  };
  this.stop = function () {};
  this.checkIfPoloMuted = function () {
    for (var k = getListPoloBusy(), l = 0, m = k.length; l < m; l++) {
      var p = k[l];
      if (p.getMute()) {
        p.unmute();
      }
    }
  };
  this.loop = function () {
    var k = getListPoloFree();
    var q = getListPoloBusy();
    var w = getListPictoFree();
    var x = k.length;
    var y = q.length;
    var z = 0;
    var A = random(6);
    var B = random(5);
    var C = random(2);
    var D = random(5) < 4 ? 2 : 1;
    var E = false;
    var F = 0;
    var G = "ajouter";
    var G = A < C ? "rien" : G;
    G = A < B || x === 0 ? "enlever" : G;
    G = !loopOn || y <= 1 ? "ajouter" : G;
    D = !loopOn || y <= 1 ? 1 : D;
    G = h ? "ajouter" : G;
    G = h && x === 0 ? "rien" : G;
    if (bonusPlaying || bonusWaiting) {
      G = "bonus";
      if (cntBoucleBonus == curBonus.nbLoop) {
        E = true;
        G = "enlever";
      }
    } else {
      for (z = 0; z < nbBonus; z++) {
        var H = listBonus[z];
        if (H.found) {
          G = "bonus";
          H.launchVideo();
          break;
        }
      }
    }
    if (G == "ajouter") {
      for (var I, F = Math.round((random(x - 1) + 1) / D), J = [], z = 0; z < F; z++) {
        I = getRandomObject(k);
        J.push(I.id);
      }
      J.sort();
      z = 0;
      for (; z < F; z++) {
        pictoTouchePolo(I = listPolo[J[z]], getRandomObject(w), z * 0.03);
        majListPoloDrop();
      }
    } else if (G == "enlever") {
      F = Math.round((random(y - 2) + 1) / D);
      F = E && y - F > 4 ? y - 4 : F;
      z = 0;
      for (; z < F; z++) {
        if ((I = getRandomObject(q)).getLoop() > 2 || E) {
          removePolo(I, 0);
        }
      }
    }
    if (G != "bonus") {
      var y = (q = getListPoloBusy()).length;
      var K = 0;
      for (z = 0; z < y; z++) {
        var L = q[z];
        if (L.getLoop() > 7 && ++K < y) {
          removePolo(L, 0);
        }
      }
    }
  };
}
function startRecordMode() {
  if (bonusPlaying) {
    popupBonusPlaying();
  } else {
    lock();
    modeRecord = true;
    $body.addClass("mode-record");
    waitForRecording = false;
    recordMix.init();
    readingBar.maxLoop = app.recmaxloop;
    readingBar.open("record");
    closeTool();
    $btTool.off().on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(stopRecordMode);
    });
    $btTool.bounce();
    $btTool.$svg.attr("xlink:href", "#ic-live");
    if (loopOn) {
      lancerRecordMode();
    } else {
      TweenMax.delayedCall(0.4, lancerRecordMode);
    }
  }
}
function lancerRecordMode() {
  (loopOn ? startRecording : (waitForRecording = true, popupDrag))();
  unlock();
}
function startRecording() {
  waitForRecording = false;
  readingBar.start();
  readingBar.onLoopsFinished = () => {
    stopRecordMode();
  };
  readingBar.onLooping = () => {
    recordMix.loop();
  };
  recordMix.start();
  saveGA("mix", "start_recording");
}
function stopRecordMode() {
  modeRecord = false;
  $body.removeClass("mode-record");
  readingBar.stop();
  readingBar.close();
  recordMix.stop();
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $btTool.off();
  $btTool.bounce();
  enableBtTool();
  if (readingBar.cntLoop < readingBar.minLoop && !waitForRecording) {
    TweenMax.delayedCall(0.25, popupShort);
  }
  if (readingBar.cntLoop >= readingBar.minLoop && !waitForRecording) {
    lock();
    pictoForceOnDrop();
    stopAllStage();
    popupRecok();
  }
}
var controlTimeout;
function RecordMix() {
  var h;
  var i;
  var j;
  var k;
  var l;
  var m = this;
  var p = decimal(loopDuration / 1000, 2);
  this.init = function () {
    i = h = "";
    j = false;
    k = 0;
    l = {};
  };
  this.setData = function (q) {
    l = q;
  };
  this.getData = function () {
    return l;
  };
  this.getXML = function () {
    return h;
  };
  this.start = function () {
    m.init();
    j = true;
    m.xmlOpen();
  };
  this.loop = function () {
    m.xmlCloseAction();
    m.xmlCloseLoop();
    k++;
    m.xmlOpenLoop();
    m.xmlOpenAction();
  };
  this.stop = function () {
    j = false;
    m.xmlClose();
  };
  this.xmlOpen = function () {
    h = "<mix version='" + build.version + "' control='true'>\n";
    m.xmlOpenLoop();
    m.xmlOpenAction();
  };
  this.xmlClose = function () {
    m.xmlCloseAction();
    m.xmlCloseLoop();
    h += "</mix>\n";
  };
  this.xmlOpenLoop = function () {
    i = "\t<loop boucleA='" + !boucleA + "' count='" + k + "'>\n";
    i += "\t\t<stage>\n";
    if (bonusPlaying) {
      i += "\t\t\t<bonus id='" + (bonusQueue - 1) + "' playing='true' cntBoucle='" + cntBoucleBonus + "' />\n";
    } else {
      if (bonusWaiting && k > 0) {
        i += "\t\t\t<bonus id='" + (bonusQueue - 1) + "' waiting='true'/>\n";
      }
      for (var q = 0; q < nbPoloMax; q++) {
        var u;
        var v = listPolo[q];
        if (v.getBusy()) {
          u = "";
          u = v.getPlaying() || v.getMoment() !== 0 || v.getLoop() !== 0 ? "\t\t\t<polo id='" + v.id + "' picto='" + v.getPicto().id + "' mute='" + v.getMute() + "' playing='" + v.getPlaying() + "'/>\n" : "\t\t\t<polo id='" + v.id + "' picto='" + v.getPicto().id + "' mute='" + v.getMute() + "' playing='true'/>\n";
          i += u;
        }
      }
    }
    i += "\t\t</stage>\n";
  };
  this.xmlCloseLoop = function () {
    h += i += "\t</loop>\n";
  };
  this.xmlOpenAction = function () {
    i += "\t\t<action>\n";
    if (k === 0 && bonusWaiting) {
      recordMix.xmlAction("bonus", listBonus[bonusQueue - 1], true);
    }
  };
  this.xmlCloseAction = function () {
    i += "\t\t</action>\n";
  };
  this.xmlAction = function (q, u, v) {
    var w;
    var x;
    if (j) {
      v = v !== undefined && v;
      w = decimal(getTimeSpent(true) / 1000, 2);
      x = "";
      if (q == "bonus") {
        x += v ? "\t\t\t<user type='" + q + "' bonus='" + u.getId() + "' when='0.1'/>\n" : "\t\t\t<user type='" + q + "' bonus='" + u.getId() + "' when='" + w + "'/>\n";
      } else {
        w = p - delayassist / 1000 < w ? p : w;
        x += "\t\t\t<user type='" + q + "' polo='" + u.id + "' picto='" + u.getPicto().id + "' when='" + w + "'/>\n";
      }
      i += x;
    }
  };
}
function prepareReplayMode() {
  modeReplay = true;
  $body.addClass("mode-replay");
  lock();
  closeTool();
  $btTool.off().on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(stopReplayMode);
  });
  $btTool.bounce();
  hideDiv($boxBtBonus, !modeWatch);
  hideDiv($boxPicto, !modeWatch);
  hideDiv($boxLoaderPolo, !modeWatch);
  $btTool.$svg.attr("xlink:href", "#ic-close");
  $btSave.on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(function () {
      Spinner.add($btSave);
      stopReplayMode(true);
    });
  });
  $boxStage.addClass("pointerlock");
  if (modeWatch) {
    $body.addClass("mode-watch");
    $mixlist.hide();
    $watchInfo.addClass("fadeIn");
  } else {
    $watchInfo.addClass("fadeIn");
    $watchInfo.$title.html(STR("txt.replayTitle"));
    $watchInfo.$name.html(STR("txt.replayText"));
    $watchInfo.$dedi.empty();
    $btSave.find(".txt").html(STR("bt.save"));
  }
}
function startReplayMode() {
  var g = modeWatch ? mixToWatch.xml != null ? mixToWatch.xml : mixToWatch.mix : recordMix.getXML();
  replayMix = new ReplayMix(g);
  readingBar.maxLoop = replayMix.getTotalLoop();
  readingBar.bonusList = replayMix.getBonusList();
  TweenMax.delayedCall(0.4, function () {
    readingBar.open("play", replayMix.control);
    readingBar.onLoopsFinished = () => {
      stopReplayMode();
    };
    readingBar.onLooping = () => {
      replayMix.loop();
    };
    readingBar.start();
    replayMix.start();
  });
  TweenMax.delayedCall(0.6, function () {
    createFocus("mode-replay");
    unlock();
  });
}
function stopReplayMode(g) {
  removeInFocusHistory("mode-replay");
  deleteFocus();
  if (!froze) {
    desactivateControl();
    $btTool.off();
    modeReplay = false;
    readingBar.stop();
    readingBar.close();
    replayMix.stop();
    if (modeWatch) {
      if (miniPlayer) {
        stopAllStage();
      }
      backToHome();
    } else {
      stopAllStage();
      $btTool.bounce();
      $btTool.$svg.attr("xlink:href", "#ic-burger");
      $watchInfo.removeClass("fadeIn");
      if (g === true) {
        Spinner.reset();
        if (appBrowserDemo) {
          popupGetApp(true);
        } else {
          popupForm();
        }
      } else {
        popupRecok();
      }
      TweenMax.delayedCall(0.4, afterStopReplay);
    }
    enableBtTool();
  }
}
function afterStopReplay() {
  showDiv($boxBtBonus, !modeWatch);
  showDiv($boxPicto, !modeWatch);
  showDiv($boxLoaderPolo, !modeWatch);
  $body.removeClass("mode-replay");
  $boxStage.removeClass("pointerlock");
}
function reinitModeWatch() {
  afterStopReplay();
  modeWatch = false;
  $body.removeClass("mode-watch");
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $watchInfo.removeClass();
  $mixlist.show();
}
function clickBtWatch(g) {
  if (g.type !== undefined) {
    g.stopPropagation();
  }
  var i;
  var g = g.type === undefined ? g : null;
  var j = isnull(g);
  if (isnull(g = j ? searchMixInCurrentList((i = $(this).parent().parent()).attr("data-key").replace("mix-", "")) : g)) {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")]);
  } else {
    modeWatch = true;
    mixToWatch = g;
    $watchInfo.$title.html(g.title);
    $watchInfo.$name.html(STR("txt.createdBy").split("%{name}").join(g.name));
    $watchInfo.$dedi.html(g.dedi == "" ? "" : STR("txt.dedicatedTo").split("%{name}").join(g.dedi));
    $watchInfo.$date.html(getStringDate(g.datedb));
    $watchInfo.$date.attr("data-date", g.datedb);
    $watchInfo.find(".mixbanner").attr("class", "mixbanner");
    $watchInfo.find(".stat").empty();
    if (j) {
      j = i.find(".stat").html();
      $watchInfo.find(".stat").html(j);
      j = $watchInfo.find(".dj .box-flag");
      if (g.country) {
        j.find(".fflag").removeClass().addClass("fflag fflag-" + g.country.toUpperCase());
      } else {
        j.hide();
      }
      j = "";
      j = (j = (j = (j = (j += i.hasClass("ismymix") ? " ismymix" : "") + (i.hasClass("isfavoris") ? " isfavoris" : "")) + (i.hasClass("istop50") ? " istop50" : "")) + (i.hasClass("islatest") ? " islatest" : "")) + (i.hasClass("isprivate") ? " isprivate" : "");
      $watchInfo.find(".mixbanner").addClass(j);
    } else {
      $watchInfo.find(".stat").html("\n\t\t\t\t<div class='boxstat liked'><div class='txt'>" + numberSpaced(g.nblike) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div></div>\n\t\t\t\t<div class='boxstat viewed'><div class='txt'>" + numberSpaced(g.nbview) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div></div>\n\t\t\t");
    }
    if (!(mixToWatch.mymix || ($btLike.removeClass("liked already disabled"), $btLike.off().on(pointerEventType.down, clickBtLikeMix), g.liked && $btLike.addClass("liked"), miniPlayer))) {
      countView();
    }
    clickHomeBtPlay();
  }
}
function clickBtLikeMix(g) {
  g.preventDefault();
  if ($btLike.hasClass("disabled")) {
    return false;
  }
  if (hasNetwork) {
    $btLike.addClass("disabled");
    Spinner.add($btLike);
    TweenMax.delayedCall(0.5, function () {
      if (mixToWatch.liked === true) {
        $btLike.removeClass("liked");
        TweenMax.delayedCall(0.5, function () {
          $btLike.removeClass("disabled");
        });
        countLike("nbunlike");
      } else {
        $btLike.addClass("liked");
        TweenMax.delayedCall(0.5, function () {
          $btLike.removeClass("disabled");
        });
        countLike("nblike");
      }
    });
  } else {
    boxDialog.open(STR("pop.noNetworkVotedText"), STR("pop.noNetworkTitle"), [STR("bt.ok")]);
  }
}
function countLike(g) {
  var i = {
    uuid: trustAppMobile ? device.uuid : "unknown",
    id: mixToWatch.id,
    link: mixToWatch.link,
    row: g
  };
  xhr("POST", domainOnline + "ph3/save-stat-mix.php", i, function (j) {
    if (j.state == "success") {
      switch (j.info) {
        case "like ok":
          mixToWatch.liked = true;
          mixToWatch.nblike++;
          break;
        case "unlike ok":
          delete mixToWatch.liked;
          mixToWatch.nblike--;
          mixToWatch.nblike = mixToWatch.nblike < 0 ? 0 : mixToWatch.nblike;
          break;
        case "already liked":
          boxDialog.open(STR("pop.alreadyVotedText"), STR("pop.alreadyVotedTitle"), [STR("bt.ok")]);
          $btLike.addClass("already liked");
          mixToWatch.liked = true;
      }
    }
    Spinner.reset();
    $watchInfo.$like = $watchInfo.find(".stat .liked");
    $watchInfo.$like.find(".bck").addClass("popIn").one(animationEnd, function (k) {
      $(k.target).removeClass(_classname);
    });
    $watchInfo.$like.find(".txt").text(numberSpaced(mixToWatch.nblike));
    if (!miniPlayer) {
      $lineOpened.find(".stat .liked .txt").text(numberSpaced(mixToWatch.nblike));
    }
  }, function (j) {});
}
function countView() {
  var h = {
    uuid: trustAppMobile ? device.uuid : "unknown",
    link: mixToWatch.link,
    row: "nbview"
  };
  if (hasNetwork) {
    xhr("POST", domainOnline + "ph3/save-stat-mix.php", h, function (i) {
      if (i.state == "success") {
        mixToWatch.viewed = true;
      }
    });
  }
}
var controlBoucle = 0;
var controlIsBuzy = false;
function activateControl() {
  $boxStage[0].addEventListener(pointerEventType.down, listenControlPress);
}
function listenControlPress(g) {
  g.preventDefault();
  if (!controlIsBuzy) {
    clearTimeout(controlTimeout);
    $boxStage[0].removeEventListener(pointerEventType.move, moveControlHead);
    $boxStage[0].addEventListener(pointerEventType.move, moveControlHead);
    document.body.removeEventListener(pointerEventType.up, listenControlRelease);
    document.body.addEventListener(pointerEventType.up, listenControlRelease);
    readingBar.openBig();
    moveControlHead(g);
    frozeScene();
  }
}
function listenControlRelease(g) {
  g.preventDefault();
  clearTimeout(controlTimeout);
  $boxStage[0].removeEventListener(pointerEventType.move, moveControlHead);
  document.body.removeEventListener(pointerEventType.up, listenControlRelease);
  readingBar.openNormal();
  controlTimeout = // TOLOOK
  setTimeout(controlTimeoutComplete, 400);
}
function controlTimeoutComplete() {
  controlIsBuzy = true;
  unfrozeScene(controlBoucle = readingBar.cntLoop);
  // TOLOOK
  setTimeout(function () {
    controlIsBuzy = false;
  }, 200);
}
function moveControlHead(g) {
  g = "targetTouches" in g ? g.targetTouches[0] : g;
  var h = $incredibox[0].offsetLeft;
  var g = g.pageX - h;
  var g = Math.floor(readingBar.maxLoop * g / (document.body.clientWidth - h * 2));
  g = (g = g < 0 ? 0 : g) > readingBar.maxLoop - 1 ? readingBar.maxLoop - 1 : g;
  readingBar.seek(g);
}
function desactivateControl() {
  $boxStage[0].removeEventListener(pointerEventType.down, listenControlPress);
  $boxStage[0].removeEventListener(pointerEventType.move, moveControlHead);
  document.body.removeEventListener(pointerEventType.up, listenControlRelease);
  controlBoucle = 0;
  clearTimeout(controlTimeout);
}
function ReplayMix(g) {
  var j;
  var k;
  var m;
  var o;
  var q;
  var v;
  var w;
  var x = this;
  function y() {
    var z;
    var A = getListPoloBusy();
    var B = getListPoloUnmute();
    if (B.length > 1) {
      for (z in A) {
        A[z].setSolo(false);
      }
    } else if (A.length == 1) {
      A[0].setSolo(false);
    } else if (A.length > 1 && B.length == 1) {
      for (z in A) {
        A[z].setSolo(false);
      }
      B[0].setSolo(true);
    }
  }
  this.control = false;
  this.reloop = false;
  this.waitForReloop = false;
  this.init = function () {
    var A;
    var B;
    k = $.parseXML(g);
    if ((j = $(k)).find("compo").length > 0) {
      m = true;
      A = convertFlashXml(g);
      k = $.parseXML(A);
      j = $(k);
    }
    k = j.find("mix");
    o = appBrowserDemo || appBrowserSchool || k.attr("control") === "true" && !appBrowser;
    q = k.children().length;
    v = decimal(loopDuration / 1000, 2);
    w = 0;
    if (o) {
      B = [];
      j.find("user[type=bonus]").each(function () {
        B.push(parseInt($(this).attr("bonus")));
      });
      if ((B = removeDupInArray(B)).length <= app.bonusarray.length) {
        activateControl();
      } else {
        o = false;
      }
    }
    this.control = o;
    this.reloop = false;
    this.waitForReloop = false;
  };
  this.getTotalLoop = function () {
    return q;
  };
  this.start = function () {
    x.loop();
  };
  this.stop = function () {
    TweenMax.killTweensOf(x.appendPolo);
    TweenMax.killTweensOf(x.removePolo);
    TweenMax.killTweensOf(x.mutePolo);
    TweenMax.killTweensOf(x.unmutePolo);
    TweenMax.killTweensOf(x.launchBonus);
    TweenMax.killTweensOf(x.soloPolo);
    this.control = false;
    x.reloop = false;
    x.waitForReloop = false;
  };
  this.loop = function (z) {
    var A;
    var B;
    if (notnull(z)) {
      w = z;
      x.reloop = true;
    }
    if (w == q) {
      stopReplayMode();
    } else {
      z = j.find("loop[count=\"" + w + "\"]");
      if (!(w !== 0 && !x.reloop)) {
        boucleA = z.attr("boucleA") == "true";
        B = z.find("stage");
        A = 0;
        $(B).children().each(function (C) {
          var D;
          var E;
          var F;
          var G;
          var H = this.tagName;
          if (H == "polo") {
            D = Number($(this).attr("id"));
            E = Number($(this).attr("picto"));
            G = $(this).attr("mute") == "true";
            C = D == -1 ? listPolo[C] : listPolo[D];
            D = listPicto[E];
            E = x.reloop ? 0 : 0.03;
            F = !!x.reloop;
            x.appendPolo(C, D, A * E, F);
            if ($(this).attr("playing") == "false") {
              C.waitOneLoop = true;
            }
            if (G) {
              x.mutePolo(C);
            }
            A++;
          }
          if (w > 0 && H == "bonus") {
            D = Number($(this).attr("id"));
            E = $(this).attr("playing") === "true";
            F = $(this).attr("waiting") === "true";
            G = Number($(this).attr("cntBoucle"));
            if (F) {
              TweenMax.delayedCall(0.1, x.launchBonus, [D]);
            } else if (E) {
              x.launchBonus(D, G, true);
            }
          }
        });
        if (m && (B = getListPoloUnmute()).length == 1 && getListPoloBusy().length > 1) {
          B[0].setSolo(true);
        }
        x.reloop = false;
      }
      B = z.find("action");
      $(B).children().each(function () {
        var C;
        var D;
        var E;
        var F;
        if (this.tagName == "user") {
          C = $(this).attr("type");
          D = decimal(Number($(this).attr("when")), 2);
          D = v < D ? v : D;
          if (C == "bonus") {
            E = Number($(this).attr("bonus"));
            E = m ? E - 1 : E;
            D = D === 0 ? 0.1 : D;
            D = waitingFirstLoop && D < delayassist / 1000 ? D + delayassist / 1000 : D;
            TweenMax.delayedCall(D, x.launchBonus, [E]);
          } else {
            E = Number($(this).attr("polo"));
            F = Number($(this).attr("picto"));
            E = E == -1 ? {
              fromFlash: true
            } : listPolo[E];
            F = listPicto[F];
            if (C == "append") {
              TweenMax.delayedCall(D, x.appendPolo, [E, F]);
            } else if (C == "remove") {
              TweenMax.delayedCall(D, x.removePolo, [E, F]);
            } else if (C == "mute") {
              TweenMax.delayedCall(D, x.mutePolo, [E, F]);
            } else if (C == "unmute") {
              TweenMax.delayedCall(D, x.unmutePolo, [E, F]);
            }
            if (m && C == "solo") {
              TweenMax.delayedCall(D, x.soloPolo, [F]);
            }
          }
        }
      });
      w++;
    }
  };
  this.getBonusList = function () {
    var A = [];
    $(j).find("bonus[playing='true']").each(function () {
      A.push({
        id: parseInt($(this).attr("id")),
        loopIndex: parseInt($(this).parent().parent().attr("count"))
      });
    });
    return A;
  };
  this.appendPolo = function (z, A, B, C) {
    pictoTouchePolo(z = z.fromFlash === true ? getListPoloFree()[0] : z, A, B, C);
    majListPoloDrop();
  };
  this.removePolo = function (z, A) {
    if ((z = z.fromFlash === true ? A.polo : z).getBusy()) {
      clickPolo(z);
    }
  };
  this.mutePolo = function (z, A) {
    if ((z = z.fromFlash === true ? A.polo : z).getBusy() && (mutePolo(z), m)) {
      y();
    }
  };
  this.unmutePolo = function (z, A) {
    if ((z = z.fromFlash === true ? A.polo : z).getBusy() && (unmutePolo(z), m)) {
      y();
    }
  };
  this.launchBonus = function (z, A, B) {
    if (notnull(listBonus[z])) {
      if (B) {
        immediatePlayBonus(z, A);
      } else {
        listBonus[z].launchVideo();
      }
    }
  };
  this.soloPolo = function (z) {
    if (m) {
      z = z.polo;
      if (z.getBusy()) {
        if (z.getSolo()) {
          z.setSolo(false);
          stopSoloPolo();
        } else {
          for (var A = getListPoloBusy(), B = 0, C = A.length; B < C; B++) {
            A[B].setSolo(false);
          }
          z.setSolo(true);
          soloPolo();
        }
      }
    }
  };
  if (notnull(g)) {
    this.init();
  }
}
function convertFlashXml(g) {
  var g = $.parseXML(g);
  var g = $(g).find("compo");
  var i = g.attr("boucle") === "true";
  var j = "<mix version=\"flash\">\n";
  g.children().each(function (k) {
    var n = "\t<loop boucleA=\"" + i + "\" count=\"" + k + "\">\n";
    var p = "\t\t<stage>\n";
    var q = "\t\t<action>\n";
    $(this).children().each(function (v) {
      var w;
      var x = $(this);
      var y = x.find("polo");
      var z = x.attr("type");
      var A = y.attr("picto");
      var B = y.attr("vol") === "0";
      var y = y.attr("nbBoucle") > 0;
      var x = x.find("moment").attr("seconde");
      var x = decimal(Number(x), 2).toString();
      z = (w = (z = (z = (z = (z = z === "ajouter" ? "append" : z) === "supprimer" ? "remove" : z) !== "mute" || B ? z : "mute") === "mute" && B ? "unmute" : z).indexOf("bonus") > -1 ? z.split("bonus").join("") : "") != "" ? "bonus" : z;
      A = Number(A.split("picto").join(""));
      if (Number(appVersion) == 2) {
        switch (A) {
          case 0:
            A = 5;
            break;
          case 1:
            A = 6;
            break;
          case 2:
            A = 7;
            break;
          case 3:
            A = 8;
            break;
          case 4:
            A = 9;
            break;
          case 5:
            A = 0;
            break;
          case 6:
            A = 1;
            break;
          case 7:
            A = 2;
            break;
          case 8:
            A = 3;
            break;
          case 9:
            A = 4;
        }
      }
      if (k == 0 && x === "0") {
        p += "\t\t\t<polo id=\"-1\" picto=\"" + A + "\" mute=\"" + B + "\" playing=\"" + y + "\" />\n";
      } else {
        B = "\t\t\t<user type=\"" + z + "\" polo=\"-1\" picto=\"" + A + "\" when=\"" + x + "\" />\n";
        q += B = z === "bonus" ? "\t\t\t<user type=\"" + z + "\" bonus=\"" + w + "\" when=\"" + x + "\" />\n" : B;
      }
    });
    j += n + ((p += "\t\t</stage>\n") + (q += "\t\t</action>\n")) + "\t</loop>\n";
    i = !i;
  });
  return trim(j += "</mix>");
}
function parseXmlAndCheckAssets() {
  var h = mixToWatch.xml || mixToWatch.mix;
  var j = $.parseXML(h);
  var k = $(j);
  var m = k.find("mix");
  var q = false;
  if (k.find("compo").length > 0) {
    q = true;
    h = convertFlashXml(mixToWatch.xml);
    mixToWatch.xml = h;
    j = $.parseXML(h);
    m = (k = $(j)).find("mix");
  }
  var v = [];
  var w = [];
  var x = [];
  function y(C) {
    var D;
    if (C.attr("type") === "bonus") {
      D = Number(C.attr("bonus"));
      if (!existInArray(w, D = q ? D - 1 : D)) {
        w.push(D);
      }
    } else {
      D = Number(C.attr("picto"));
      if (!existInArray(v, D)) {
        v.push(D);
      }
    }
  }
  m.children().each(function (C) {
    if (C === 0) {
      $(this).find("stage").each(function (D) {
        $(this).children().each(function (E) {
          y($(this));
        });
      });
    }
    $(this).find("action").each(function (D) {
      $(this).children().each(function (E) {
        y($(this));
      });
    });
  });
  for (var v = v.sort(function (C, D) {
      return C - D;
    }), w = w.sort(function (C, D) {
      return C - D;
    }), z = app.animearray[v[0]], A = 0, B = app.animearray.length; A < B; A++) {
    if (!existInArray(v, A)) {
      app.animearray[A] = z;
    }
  }
  A = 0;
  B = w.length;
  for (; A < B; A++) {
    x.push(app.bonusarray[w[A]]);
  }
}
var adBreak;
var adConfig;
var convertForceStop = false;
var convertWorker = null;
function stopConvert() {
  if (notnull(convertWorker)) {
    convertWorker.terminate();
  } else {
    convertForceStop = true;
  }
}
function startConvert(j, q) {
  for (var G, H = new AudioContext(), I = (convertForceStop = false, convertWorker = null, $($.parseXML(j.xml)).find("mix")), J = 0, K = q.find("#convert-loader-box"), L = K.find(".progress-bar"), M = q.find("#bt-save-file"), q = q.find(".spinner-box"), N = "mp3", O = 320, Q = 0, R = [], U = [], V = "incredibox-v" + app.version + "-" + slugify(j.title) + "-" + O + "kbps" + (j.online ? "-" + j.link : "") + "." + N, W = 0, W = 0; W < nbSound; W++) {
    R.push([tabBuffer.sound[W].sndA, tabBuffer.sound[W].sndB]);
  }
  for (W = 0; W < nbSoundBonus; W++) {
    U.push([tabBuffer.bonus[W].snd, tabBuffer.bonus[W].aspire]);
  }
  var X;
  var Y;
  var Z = [];
  var a0 = 0;
  var a1 = false;
  var a2 = false;
  $(I).children().length;
  $(I).children().each(function (ad) {
    var af = $(this).attr("boucleA") == "true";
    var ag = $(this).find("stage");
    var ah = $(this).find("action");
    var ai = [];
    var aj = af ? 0 : 1;
    var ak = !app.bonusloopA || af;
    if (a1 && ak) {
      a2 = !(a1 = false);
      Z.push(U[X][0]);
    }
    if (a2 && ++a0 > app.bonusarray[X].loop) {
      a2 = false;
      Y = X = void (a0 = 0);
    }
    if (!a2) {
      ag.children().each(function (al) {
        var am;
        var an;
        var ao;
        var ap;
        if (this.tagName == "polo" && (am = Number($(this).attr("picto")), ap = $(this).attr("playing") == "true", an = $(this).attr("mute") == "true", ao = [], ap)) {
          ap = R[am][aj];
          if (an) {
            ao.push({
              when: 0,
              type: "mute"
            });
          }
          ah.find("user[picto='" + am + "']").each(function (aq) {
            var ar = $(this).attr("type");
            var as = Number($(this).attr("when"));
            if (ar != "append") {
              ao.push({
                when: as,
                type: ar
              });
            }
          });
          if (ao.length > 0) {
            ap = function (aq, ar, as) {
              for (var at = aq.numberOfChannels, au = aq.duration, av = H.createBuffer(at, H.sampleRate * au, H.sampleRate), aw = 0; aw < at; aw++) {
                for (var ax = av.getChannelData(aw), ay = aq.getChannelData(aw), az = ay.length, aA = 0, aB = ar, aC = aB, aD = [], aE = 0; aE < as.length; aE++) {
                  var aF = as[aE].when;
                  var aF = Math.round(aF * az / au);
                  aD.push([aF, as[aE].type]);
                }
                for (var aG = aD.length > 0, aH = 0; aH < az; aH++) {
                  if (aG && aH >= aD[aA][0]) {
                    aB = aD[aA][1] == "mute" || aD[aA][1] == "remove";
                    if (aD.length <= ++aA && (aG = false, Math.round(aH * 100 / az) > 95)) {
                      aB = aC;
                    }
                    aC = aB;
                  }
                  if (aB) {
                    ax[aH] = 0;
                  } else {
                    ax[aH] += ay[aH];
                  }
                }
              }
              return av;
            }(ap, an, ao);
          }
          ai.push(ap);
        }
      });
      ah.find("user[type='bonus']").each(function (al) {
        a1 = true;
        X = Number($(this).attr("bonus"));
        Y = Number($(this).attr("when"));
      });
      if (a1) {
        ah.find("user[type='remove']").each(function (al) {
          var am = Number($(this).attr("picto"));
          var an = Number($(this).attr("when"));
          if (Y < an && function (ao, ap) {
            for (var aq = 0; aq < ap.length; aq++) {
              if (ao == ap[aq]) {
                return 1;
              }
            }
            return;
          }(am + 1, app.bonusarray[X].code.split(","))) {
            a1 = false;
            Y = undefined;
          }
        });
        Y = 0;
      }
      if (!(!a1 || app.bonusloopA && af)) {
        ai.push(U[X][1]);
      }
      Z.push(function (al) {
        for (var am = al.length, an = 0, ao = 0, ap = 0; ap < am; ap++) {
          if (al[ap].numberOfChannels > an) {
            an = al[ap].numberOfChannels;
          }
          if (al[ap].duration > ao) {
            ao = al[ap].duration;
          }
        }
        for (var aq = H.createBuffer(an, H.sampleRate * (ao - Q), H.sampleRate), ar = 0; ar < am; ar++) {
          for (var as = 0; as < al[ar].numberOfChannels; as++) {
            for (var at = aq.getChannelData(as), au = al[ar].getChannelData(as), av = 0; av < au.length; av++) {
              at[av] += au[av];
            }
          }
        }
        return aq;
      }(ai));
    }
  });
  if (!convertForceStop) {
    for (var a3 = j = function (ad) {
        for (var ae = ad.length, af = [], ag = 0, ah = 0; ah < ae; ah++) {
          af.push(ad[ah].numberOfChannels);
          ag += ad[ah].duration;
        }
        ag = Math.ceil(ag);
        for (var ai = af.reduce(function (ap, aq) {
            return Math.min(ap, aq);
          }), aj = H.createBuffer(ai, H.sampleRate * ag, H.sampleRate), ak = 0; ak < ai; ak++) {
          for (var al = aj.getChannelData(ak), am = 0, an = 0; an < ae; an++) {
            var ao = ad[an].getChannelData(ak);
            al.set(ao, am);
            am += ao.length;
          }
        }
        return aj;
      }(Z), a4 = 0.9, a5 = a3.numberOfChannels, a6 = 0; a6 < a5; a6++) {
      for (var a7 = a3.getChannelData(a6), a8 = 0, a9 = 0, aa = 0, ab = a7.length; aa < ab; aa++) {
        if (a7[aa] > a8) {
          a8 = a7[aa];
        }
        if (a7[aa] < a9) {
          a9 = a7[aa];
        }
        if (a7[aa] > a4) {
          a7[aa] = a4;
          0;
        }
        if (a7[aa] < -a4) {
          a7[aa] = -a4;
          0;
        }
      }
    }
    I = j;
    var ac = 0;
    convertWorker = new Worker("js/libs/convert-worker.js");
    var I = {
      sampleR: I.sampleRate,
      numberC: I.numberOfChannels,
      leftData: I.getChannelData(0),
      rightData: I.getChannelData(1),
      lng: I.length,
      kbps: O,
      typeToExport: N
    };
    convertWorker.postMessage([I]);
    convertWorker.onmessage = function (ad) {
      var ae;
      var ad = ad.data;
      if (ad.type == "msg") {
        ac++;
        ae = Math.floor(ac * (100 - J) / 40);
        L.css({
          width: J + (ae = (ae = ae < 5 ? 5 : ae) > 100 ? 100 : ae) + "%"
        });
      } else {
        convertWorker.terminate();
        ae = ad.val;
        G = N == "mp3" ? new Blob(ae, {
          type: "audio/mp3"
        }) : new Blob([new DataView(ae)], {
          type: "audio/wav"
        });
        if (window.cordova && cordova.plugins && cordova.plugins.saveDialog) {
          boxPopup.$icon.trigger(pointerEventType.down);
          cordova.plugins.saveDialog.saveFile(G, V).then(ag => {}).catch(ag => {
            if (ag != "The dialog has been cancelled") {
              popupGeneralError({
                error: "file plugin failed"
              });
            }
          });
        } else {
          G = window.URL.createObjectURL(G);
          K.addClass("hide");
          M.attr("href", G).attr("download", V).addClass("enabled");
          createFocus("popup-convert-mix-ready");
        }
        convertWorker = null;
        H.close();
        H = null;
      }
    };
    q.addClass("hide");
    K.addClass("show");
  }
}
var adConfigReady = false;
var withAdBreak = false;
function initAd() {}
function callAd(g, h, i) {
  if (i) {
    i();
  }
}
var gaShouldTrack = false;
var gaAlreadySet = false;
function initAnalytics() {}
function saveGA(g, h, i) {}
